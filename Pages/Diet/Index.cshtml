@page
@model KontrolaNawykow.Pages.Diet.IndexModel
@{
    ViewData["Title"] = "Dieta";
    Layout = null;
}

<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dieta - KontrolaNawyków</title>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/diet-style.css" asp-append-version="true" />
    <link href="https://fonts.googleapis.com/css2?family=Purple+Purse&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Charmonman:wght@400;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <div class="main-container">
        @await Html.PartialAsync("/Pages/Components/_Navigation.cshtml")

        <div class="content-container">
            <!-- Nawigacja tygodniowa -->
            <div class="week-navigation">
                <div>
                    <a href="?WeekOffset=@(Model.WeekOffset - 1)" class="week-nav-btn">
                        <i class="fas fa-chevron-left"></i> Poprzedni
                    </a>
                    <a href="?WeekOffset=0" class="week-nav-btn @(Model.WeekOffset == 0 ? "active" : "")">
                        Obecny tydzień
                    </a>
                    <a href="?WeekOffset=@(Model.WeekOffset + 1)" class="week-nav-btn">
                        Następny <i class="fas fa-chevron-right"></i>
                    </a>
                </div>
                <button type="button" class="add-meal-top-btn" onclick="showAddRecipeModal()">
                    <i class="fas fa-plus"></i> Dodaj przepis
                </button>
            </div>

            <div class="days-header">
                @foreach (var day in Model.WeekDays)
                {
                    <div class="day-column @(day.IsToday ? "today" : "")">
                        <div class="day-name">@day.Name</div>
                        <div class="day-date">@day.Date.ToString("dd.MM")</div>
                    </div>
                }
            </div>

            <div class="week-view">
                @foreach (var day in Model.WeekDays)
                {
                    <div class="day-column @(day.IsToday ? "today" : "")">
                        <div class="meals-section">
                            @if (Model.MealPlans.ContainsKey(day.Date))
                            {
                                var meals = Model.MealPlans[day.Date].Where(m => !m.Eaten).ToList();
                                @foreach (var meal in meals)
                                {
                                    <div class="meal-card" id="meal-@meal.Id">
                                        <div class="meal-header">
                                            <span class="meal-type">@meal.MealType.ToString()</span>
                                            <div class="meal-actions">
                                                <button class="meal-action-btn heart-btn" onclick="markMealEaten(@meal.Id)" title="Oznacz jako zjedzone">
                                                    <i class="fas fa-utensils"></i>
                                                </button>
                                                <button class="meal-action-btn" onclick="editMeal(@meal.Id)" title="Edytuj posiłek">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="meal-action-btn" onclick="deleteMeal(@meal.Id)" title="Usuń posiłek">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                        <div class="meal-content">
                                            @if (meal.Recipe != null)
                                            {
                                                @if (meal.Recipe.ImageData != null)
                                                {
                                                    <img src="data:image/jpeg;base64,@Convert.ToBase64String(meal.Recipe.ImageData)" alt="@meal.Recipe.Name" class="meal-image" />
                                                }
                                                else
                                                {
                                                    <div class="meal-image-placeholder">
                                                        <i class="fas fa-image"></i>
                                                    </div>
                                                }
                                                <div class="meal-details">
                                                    <p class="meal-name">@meal.Recipe.Name</p>
                                                    <div class="meal-macros">
                                                        <span><i class="fas fa-fire"></i> @meal.Recipe.Calories kcal</span>
                                                        <span><i class="fas fa-drumstick-bite"></i> @meal.Recipe.Protein g</span>
                                                        <span><i class="fas fa-cheese"></i> @meal.Recipe.Fat g</span>
                                                        <span><i class="fas fa-bread-slice"></i> @meal.Recipe.Carbs g</span>
                                                    </div>
                                                    <button class="show-recipe-btn" onclick="showRecipeDetails(@meal.Recipe.Id)">
                                                        <i class="fas fa-book-open"></i> Pokaż przepis
                                                    </button>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="meal-image-placeholder">
                                                    <i class="fas fa-utensils"></i>
                                                </div>
                                                <div class="meal-details">
                                                    <p class="meal-name">@meal.CustomEntry</p>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            }

                            <div class="add-meal-btn" onclick="showAddMealModal('@day.Date.ToString("yyyy-MM-dd")')">
                                <i class="fas fa-plus"></i> Dodaj posiłek
                            </div>
                        </div>
                        @if (Model.MealPlans.ContainsKey(day.Date))
                        {
                            var eatenMeals = Model.MealPlans[day.Date].Where(m => m.Eaten).ToList();
                            @if (eatenMeals.Any())
                            {
                                <div class="eaten-meals-section">
                                    <h4>Zjedzone posiłki</h4>
                                    @foreach (var meal in eatenMeals)
                                    {
                                        <div class="meal-card eaten">
                                            <div class="meal-header">
                                                <span class="meal-type">@meal.MealType.ToString()</span>
                                                <div class="meal-actions">
                                                    <button class="meal-action-btn" onclick="unmarkMealEaten(@meal.Id)" title="Oznacz jako niezjedzone">
                                                        <i class="fas fa-undo"></i>
                                                    </button>
                                                </div>
                                            </div>
                                            <div class="meal-content">
                                                @if (meal.Recipe != null)
                                                {
                                                    @if (meal.Recipe.ImageData != null)
                                                    {
                                                        <img src="data:image/jpeg;base64,@Convert.ToBase64String(meal.Recipe.ImageData)" alt="@meal.Recipe.Name" class="meal-image" />
                                                    }
                                                    else
                                                    {
                                                        <div class="meal-image-placeholder">
                                                            <i class="fas fa-image"></i>
                                                        </div>
                                                    }
                                                    <div class="meal-details">
                                                        <p class="meal-name">@meal.Recipe.Name</p>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="meal-image-placeholder">
                                                        <i class="fas fa-utensils"></i>
                                                    </div>
                                                    <div class="meal-details">
                                                        <p class="meal-name">@meal.CustomEntry</p>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        }

                        <div class="daily-summary">
                            @{
                                var dailyTotals = Model.GetDailyTotals(day.Date);
                            }
                            <div class="macros-summary">
                                <p><i class="fas fa-fire"></i> Kcal: @dailyTotals.Calories</p>
                                <p><i class="fas fa-drumstick-bite"></i> Białka: @dailyTotals.Protein g</p>
                                <p><i class="fas fa-cheese"></i> Tłuszcze: @dailyTotals.Fat g</p>
                                <p><i class="fas fa-bread-slice"></i> Węglowodany: @dailyTotals.Carbs g</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Modal dla dodawania/edycji posiłku -->
    <div id="addMealModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('addMealModal')">&times;</span>
            <h2>Dodaj posiłek</h2>
            <form id="addMealForm">
                <input type="hidden" id="mealDate" name="Date" />
                <input type="hidden" id="mealId" name="Id" />

                <div class="form-group">
                    <label for="mealType">Rodzaj posiłku:</label>
                    <select id="mealType" name="MealType" class="form-control" required>
                        <option value="Sniadanie">Śniadanie</option>
                        <option value="Obiad">Obiad</option>
                        <option value="Kolacja">Kolacja</option>
                        <option value="Przekaska">Przekąska</option>
                    </select>
                </div>

                <div class="tabs">
                    <div class="tab active" onclick="switchTab('recipes')">Przepisy</div>
                    <div class="tab" onclick="switchTab('ingredients')">Składniki</div>
                </div>

                <!-- Tab przepisów -->
                <div id="recipes-tab" class="tab-content active">
                    <div class="search-box">
                        <input type="text" id="recipe-search" class="search-input" placeholder="Szukaj przepisów..." onkeyup="filterRecipes()" />
                        <button type="button" class="search-btn"><i class="fas fa-search"></i></button>
                    </div>

                    <div class="tabs">
                        <div class="tab active" onclick="switchRecipeTab('private')">Moje przepisy</div>
                        <div class="tab" onclick="switchRecipeTab('public')">Publiczne przepisy</div>
                    </div>

                    <div id="private-recipes" class="tab-content active">
                        <div class="recipes-scroll-container">
                            <div class="recipes-scroll-wrapper" id="private-recipe-grid">
                                @foreach (var recipe in Model.Recipes.Where(r => r.UserId == Model.CurrentUser.Id))
                                {
                                   <div class="recipe-item" data-id="@recipe.Id" data-name="@recipe.Name.ToLower()" onclick="selectRecipe(this, @recipe.Id)">
                                    <button type="button" class="recipe-edit-btn" onclick="editRecipe(@recipe.Id); event.stopPropagation();">
                                        <i class="fas fa-edit"></i> Edytuj
                                    </button>
                                    @if (recipe.ImageData != null)
                                    {
                                        <img src="data:image/jpeg;base64,@Convert.ToBase64String(recipe.ImageData)" alt="@recipe.Name" class="recipe-thumb" />
                                    }
                                    else
                                    {
                                        <div class="recipe-thumb-placeholder">
                                            <i class="fas fa-image"></i>
                                        </div>
                                    }
                                    <div class="recipe-title">@recipe.Name</div>
                                    <div class="recipe-macros">
                                        <div><i class="fas fa-fire"></i> @recipe.Calories kcal</div>
                                        <div><i class="fas fa-drumstick-bite"></i> B: @recipe.Protein g</div>
                                        <div><i class="fas fa-cheese"></i> T: @recipe.Fat g</div>
                                        <div><i class="fas fa-bread-slice"></i> W: @recipe.Carbs g</div>
                                    </div>
                                </div>
                                }
                            </div>
                        </div>
                    </div>

                    <div id="public-recipes" class="tab-content">
                        <div class="recipes-scroll-container">
                            <div class="recipes-scroll-wrapper" id="public-recipe-grid">
                                @foreach (var recipe in Model.Recipes.Where(r => r.IsPublic && r.UserId != Model.CurrentUser.Id))
                                {
                                    <div class="recipe-item" data-id="@recipe.Id" data-name="@recipe.Name.ToLower()" onclick="selectRecipe(this, @recipe.Id)">
                                        @if (recipe.ImageData != null)
                                        {
                                            <img src="data:image/jpeg;base64,@Convert.ToBase64String(recipe.ImageData)" alt="@recipe.Name" class="recipe-thumb" />
                                        }
                                        else
                                        {
                                            <div class="recipe-thumb-placeholder">
                                                <i class="fas fa-image"></i>
                                            </div>
                                        }
                                        <div class="recipe-title">@recipe.Name</div>
                                        <div class="recipe-macros">
                                            <div><i class="fas fa-fire"></i> @recipe.Calories kcal</div>
                                            <div><i class="fas fa-drumstick-bite"></i> B: @recipe.Protein g</div>
                                            <div><i class="fas fa-cheese"></i> T: @recipe.Fat g</div>
                                            <div><i class="fas fa-bread-slice"></i> W: @recipe.Carbs g</div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <input type="hidden" id="recipeId" name="RecipeId" />

        <!-- Tab składników -->
        <div id="ingredients-tab" class="tab-content">
            <div class="search-box">
                <input type="text" id="ingredient-search" class="search-input" placeholder="Szukaj składników..." onkeyup="filterIngredients()" />
                <button type="button" class="search-btn"><i class="fas fa-search"></i></button>
            </div>

            <div class="ingredients-scroll-container">
                <div class="ingredients-scroll-wrapper" id="ingredients-grid">
                    @foreach (var ingredient in Model.Ingredients.OrderBy(i => i.Name))
                    {
                        <div class="ingredient-card" data-id="@ingredient.Id" data-name="@ingredient.Name.ToLower()" onclick="selectIngredient(this, @ingredient.Id, '@ingredient.Name', @ingredient.Calories, @ingredient.Protein, @ingredient.Fat, @ingredient.Carbs)">
                            <div class="ingredient-card-header">@ingredient.Name</div>
                            <div class="ingredient-card-macros">
                                <div><i class="fas fa-fire"></i> @ingredient.Calories kcal/100g</div>
                                <div><i class="fas fa-drumstick-bite"></i> Białko: @ingredient.Protein g</div>
                                <div><i class="fas fa-cheese"></i> Tłuszcz: @ingredient.Fat g</div>
                                <div><i class="fas fa-bread-slice"></i> Węgl.: @ingredient.Carbs g</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="form-group mt-4">
            <button type="button" class="btn btn-primary btn-block" id="saveMealBtn" onclick="saveMeal()">
            <i class="fas fa-save"></i> Zapisz
        </button>
        </div>
        </form>
    </div>
    </div>

    <!-- Modal dla dodawania/edycji przepisu -->
    <div id="recipeModal" class="modal">
        <div class="modal-content modal-lg">
            <span class="close" onclick="closeModal('recipeModal')">&times;</span>
            <h2>Dodaj nowy przepis</h2>
            <form id="recipeForm" enctype="multipart/form-data">
                <input type="hidden" id="recipeEditId" name="Id" />

                <div class="form-group">
                    <label for="recipeName">Nazwa przepisu:</label>
                    <input type="text" id="recipeName" name="Name" class="form-control" required />
                </div>

                <div class="image-upload">
                    <div class="image-preview" id="recipeImagePreview">
                        <i class="fas fa-image"></i>
                    </div>
                    <input type="file" id="recipeImage" name="Image" accept="image/*" style="display: none;" onchange="previewImage(this)" />
                    <button type="button" class="upload-btn" onclick="document.getElementById('recipeImage').click()">
                        <i class="fas fa-upload"></i> Wybierz zdjęcie
                    </button>
                </div>

                <div class="form-group">
                    <label>Makroskładniki (wyliczone automatycznie na podstawie składników):</label>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                        <div class="form-group">
                            <label for="recipeCalories">Kalorie (kcal):</label>
                            <input type="number" id="recipeCalories" name="Calories" class="form-control" required min="0" readonly />
                        </div>
                        <div class="form-group">
                            <label for="recipeProtein">Białko (g):</label>
                            <input type="number" id="recipeProtein" name="Protein" class="form-control" required min="0" step="0.1" readonly />
                        </div>
                        <div class="form-group">
                            <label for="recipeFat">Tłuszcz (g):</label>
                            <input type="number" id="recipeFat" name="Fat" class="form-control" required min="0" step="0.1" readonly />
                        </div>
                        <div class="form-group">
                            <label for="recipeCarbs">Węglowodany (g):</label>
                            <input type="number" id="recipeCarbs" name="Carbs" class="form-control" required min="0" step="0.1" readonly />
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label>Składniki:</label>
                    <div id="recipeIngredients" class="ingredient-list">
                        <!-- Tu będą dodawane składniki przepisu -->
                    </div>
                    <div class="add-ingredient-form">
                        <select id="ingredientSelect" class="form-control" style="flex: 2;">
                            <option value="">Wybierz składnik...</option>
                            @foreach (var ingredient in Model.Ingredients.OrderBy(i => i.Name))
                            {
                                <option value="@ingredient.Id"
                                        data-calories="@ingredient.Calories"
                                        data-protein="@ingredient.Protein"
                                        data-fat="@ingredient.Fat"
                                        data-carbs="@ingredient.Carbs">
                                    @ingredient.Name
                                </option>
                            }
                        </select>
                        <input type="number" id="ingredientAmount" placeholder="Ilość" min="0" step="0.1" style="flex: 1;" />
                        <button type="button" class="add-ingredient-btn" onclick="addIngredientToRecipe()">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>

                    <!-- Dodawanie nowego składnika w modalu przepisu -->
                    <div class="new-ingredient-form">
                        <h4>Dodaj nowy składnik:</h4>
                        <div class="form-group">
                            <label for="recipe-new-ingredient-name">Nazwa składnika:</label>
                            <input type="text" id="recipe-new-ingredient-name" class="form-control" placeholder="Nazwa nowego składnika" />
                        </div>

                        <div class="macros-grid">
                            <div class="macros-input">
                                <label for="recipe-new-ingredient-calories"><i class="fas fa-fire"></i> Kalorie (kcal/100g):</label>
                                <input type="number" id="recipe-new-ingredient-calories" min="0" value="0" />
                            </div>
                            <div class="macros-input">
                                <label for="recipe-new-ingredient-protein"><i class="fas fa-drumstick-bite"></i> Białko (g/100g):</label>
                                <input type="number" id="recipe-new-ingredient-protein" min="0" step="0.1" value="0" />
                            </div>
                            <div class="macros-input">
                                <label for="recipe-new-ingredient-fat"><i class="fas fa-cheese"></i> Tłuszcz (g/100g):</label>
                                <input type="number" id="recipe-new-ingredient-fat" min="0" step="0.1" value="0" />
                            </div>
                            <div class="macros-input">
                                <label for="recipe-new-ingredient-carbs"><i class="fas fa-bread-slice"></i> Węglowodany (g/100g):</label>
                                <input type="number" id="recipe-new-ingredient-carbs" min="0" step="0.1" value="0" />
                            </div>
                        </div>

                        <button type="button" class="add-ingredient-btn" onclick="addNewIngredientToRecipe()">
                            <i class="fas fa-plus"></i> Dodaj składnik
                        </button>
                    </div>
                </div>

                <div class="form-group">
                    <label for="recipeInstructions">Sposób przygotowania:</label>
                    <textarea id="recipeInstructions" name="Instructions" class="form-control" rows="5"></textarea>
                </div>

                <div class="form-group">
                    <label>
                        <input type="checkbox" id="recipeIsPublic" name="IsPublic" />
                        Udostępnij przepis publicznie
                    </label>
                </div>

                <button type="button" class="btn btn-primary" onclick="saveRecipe()">Zapisz przepis</button>
            </form>
        </div>
    </div>

    <!-- Modal dla szczegółów przepisu -->
    <div id="recipeDetailsModal" class="modal">
        <div class="modal-content modal-lg">
            <span class="close" onclick="closeModal('recipeDetailsModal')">&times;</span>
            <div id="recipeDetailsContent">
                <!-- Szczegóły przepisu będą wczytane dynamicznie -->
            </div>
        </div>
    </div>
    <script>
        // Funkcje modalu
        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        // Obsługa zakładek w modalu dodawania posiłku
        function switchTab(tabId) {
            // Ukryj wszystkie zakładki
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });

            // Usuń aktywną klasę ze wszystkich zakładek
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });

            // Aktywuj wybraną zakładkę
            document.getElementById(`${tabId}-tab`).classList.add('active');

            // Aktywuj przycisk zakładki
            event.target.classList.add('active');
        }

        // Obsługa zakładek w sekcji przepisów
        function switchRecipeTab(tabId) {
            // Ukryj wszystkie zakładki przepisów
            document.querySelectorAll('#recipes-tab .tab-content').forEach(tab => {
                tab.classList.remove('active');
            });

            // Usuń aktywną klasę z przycisków zakładek
            document.querySelectorAll('#recipes-tab .tab').forEach(tab => {
                tab.classList.remove('active');
            });

            // Aktywuj wybraną zakładkę
            document.getElementById(`${tabId}-recipes`).classList.add('active');

            // Aktywuj przycisk zakładki
            event.target.classList.add('active');
        }

        // Wybór przepisu w gridzie
        function selectRecipe(element, recipeId) {
            // Usuń zaznaczenie ze wszystkich przepisów
            document.querySelectorAll('.recipe-item').forEach(item => {
                item.classList.remove('selected');
            });

            // Zaznacz wybrany przepis
            element.classList.add('selected');

            // Zapisz ID przepisu w ukrytym polu
            document.getElementById('recipeId').value = recipeId;
        }

        // Filtrowanie przepisów podczas wyszukiwania
        function filterRecipes() {
            const searchText = document.getElementById('recipe-search').value.toLowerCase();

            // Filtruj prywatne przepisy
            document.querySelectorAll('#private-recipe-grid .recipe-item').forEach(item => {
                const recipeName = item.getAttribute('data-name');
                if (recipeName.includes(searchText)) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            });

            // Filtruj publiczne przepisy
            document.querySelectorAll('#public-recipe-grid .recipe-item').forEach(item => {
                const recipeName = item.getAttribute('data-name');
                if (recipeName.includes(searchText)) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            });
        }

        // Filtrowanie składników podczas wyszukiwania
        function filterIngredients() {
            const searchText = document.getElementById('ingredient-search').value.toLowerCase();

            document.querySelectorAll('#ingredients-grid .recipe-item').forEach(item => {
                const ingredientName = item.getAttribute('data-name');
                if (ingredientName.includes(searchText)) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            });
        }

        // Dodawanie składnika do posiłku z wartościami odżywczymi
        function addIngredientToMeal(ingredientId, ingredientName, calories, protein, fat, carbs) {
            const list = document.getElementById('selected-ingredients-list');

            // Sprawdź czy składnik nie został już dodany
            if (document.querySelector(`.ingredient-item[data-id="${ingredientId}"]`)) {
                return;
            }

            const item = document.createElement('div');
            item.className = 'ingredient-item';
            item.setAttribute('data-id', ingredientId);
            item.setAttribute('data-calories', calories);
            item.setAttribute('data-protein', protein);
            item.setAttribute('data-fat', fat);
            item.setAttribute('data-carbs', carbs);

            item.innerHTML = `
                        <span>${ingredientName}</span>
                        <input type="number" class="ingredient-amount form-control" placeholder="Ilość" value="100" min="0" step="0.1" onchange="updateMealMacros()" />
                        <button type="button" class="remove-ingredient-btn" onclick="removeIngredient(this)">
                            <i class="fas fa-times"></i>
                        </button>
                        <input type="hidden" name="IngredientIds[]" value="${ingredientId}" />
                        <input type="hidden" name="IngredientAmounts[]" value="100" />
                        <div class="meal-macros" style="font-size: 10px; margin-top: 4px;">
                            <span><i class="fas fa-fire"></i> ${calories} kcal</span>
                            <span><i class="fas fa-drumstick-bite"></i> ${protein}g</span>
                            <span><i class="fas fa-cheese"></i> ${fat}g</span>
                            <span><i class="fas fa-bread-slice"></i> ${carbs}g</span>
                        </div>
                    `;

            list.appendChild(item);
            updateMealMacros();
        }

        // Dodawanie nowego składnika z makroskładnikami
        function addNewIngredientWithMacros() {
            const ingredientName = document.getElementById('new-ingredient-name').value;
            const calories = document.getElementById('new-ingredient-calories').value;
            const protein = document.getElementById('new-ingredient-protein').value;
            const fat = document.getElementById('new-ingredient-fat').value;
            const carbs = document.getElementById('new-ingredient-carbs').value;

            if (!ingredientName) {
                alert('Wprowadź nazwę składnika');
                return;
            }

            // Wyślij zapytanie do API, aby dodać nowy składnik
            fetch('/api/ingredient', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    name: ingredientName,
                    calories: parseInt(calories) || 0,
                    protein: parseFloat(protein) || 0,
                    fat: parseFloat(fat) || 0,
                    carbs: parseFloat(carbs) || 0
                }),
            })
                .then(response => response.json())
                .then(data => {
                    // Dodaj nowy składnik do listy
                    addIngredientToMeal(data.id, data.name, data.calories, data.protein, data.fat, data.carbs);

                    // Wyczyść pola
                    document.getElementById('new-ingredient-name').value = '';
                    document.getElementById('new-ingredient-calories').value = '0';
                    document.getElementById('new-ingredient-protein').value = '0';
                    document.getElementById('new-ingredient-fat').value = '0';
                    document.getElementById('new-ingredient-carbs').value = '0';

                    // Odśwież stronę aby zaktualizować listę składników
                    // location.reload();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Wystąpił błąd podczas dodawania nowego składnika');
                });
        }

        // Usuwanie składnika z listy
        function removeIngredient(button) {
            const item = button.closest('.ingredient-item');
            item.remove();
            updateMealMacros();
        }

        // Aktualizacja makroskładników posiłku
        function updateMealMacros() {
            let totalCalories = 0;
            let totalProtein = 0;
            let totalFat = 0;
            let totalCarbs = 0;

            document.querySelectorAll('#selected-ingredients-list .ingredient-item').forEach(item => {
                const amount = parseFloat(item.querySelector('.ingredient-amount').value) || 0;
                const calories = parseFloat(item.getAttribute('data-calories')) || 0;
                const protein = parseFloat(item.getAttribute('data-protein')) || 0;
                const fat = parseFloat(item.getAttribute('data-fat')) || 0;
                const carbs = parseFloat(item.getAttribute('data-carbs')) || 0;

                totalCalories += calories * amount / 100;
                totalProtein += protein * amount / 100;
                totalFat += fat * amount / 100;
                totalCarbs += carbs * amount / 100;
            });

            // Aktualizuj UI jeśli potrzeba
            // Możesz dodać element, który będzie pokazywał sumę makroskładników dla wybranych składników
        }

        // Podgląd zdjęcia
        function previewImage(input) {
            if (input.files && input.files[0]) {
                const reader = new FileReader();

                reader.onload = function (e) {
                    const preview = document.getElementById('recipeImagePreview');
                    preview.innerHTML = `<img src="${e.target.result}" alt="Podgląd" />`;
                }

                reader.readAsDataURL(input.files[0]);
            }
        }

        // Dodawanie składnika do przepisu
        function addIngredientToRecipe() {
            const ingredientSelect = document.getElementById('ingredientSelect');
            const ingredientId = parseInt(ingredientSelect.value);
            const amount = document.getElementById('ingredientAmount').value;

            // Sprawdź czy wybrano prawidłowy składnik
            if (!ingredientId || isNaN(ingredientId) || ingredientId <= 0) {
                alert('Wybierz prawidłowy składnik z listy');
                console.error('Nieprawidłowe ID składnika:', ingredientId);
                return;
            }

            // Sprawdź czy podano ilość
            if (!amount || isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {
                alert('Podaj prawidłową ilość składnika');
                return;
            }

            const ingredientName = ingredientSelect.options[ingredientSelect.selectedIndex].text;
            const calories = parseFloat(ingredientSelect.options[ingredientSelect.selectedIndex].dataset.calories) || 0;
            const protein = parseFloat(ingredientSelect.options[ingredientSelect.selectedIndex].dataset.protein) || 0;
            const fat = parseFloat(ingredientSelect.options[ingredientSelect.selectedIndex].dataset.fat) || 0;
            const carbs = parseFloat(ingredientSelect.options[ingredientSelect.selectedIndex].dataset.carbs) || 0;

            // Debugowanie
            console.log('Dodaję składnik do przepisu:', {
                id: ingredientId,
                name: ingredientName,
                amount: amount,
                calories: calories,
                protein: protein,
                fat: fat,
                carbs: carbs
            });

            addIngredientToRecipeWithMacros(ingredientId, ingredientName, amount, calories, protein, fat, carbs);
        }

        // Dodawanie nowego składnika do przepisu
        function addNewIngredientToRecipe() {
            const ingredientName = document.getElementById('recipe-new-ingredient-name').value;
            const calories = document.getElementById('recipe-new-ingredient-calories').value;
            const protein = document.getElementById('recipe-new-ingredient-protein').value;
            const fat = document.getElementById('recipe-new-ingredient-fat').value;
            const carbs = document.getElementById('recipe-new-ingredient-carbs').value;

            if (!ingredientName) {
                alert('Wprowadź nazwę składnika');
                return;
            }

            // Wyślij zapytanie do API, aby dodać nowy składnik
            fetch('/api/ingredient', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    name: ingredientName,
                    calories: parseInt(calories) || 0,
                    protein: parseFloat(protein) || 0,
                    fat: parseFloat(fat) || 0,
                    carbs: parseFloat(carbs) || 0
                }),
            })
                .then(response => response.json())
                .then(data => {
                    // Dodaj nowy składnik do przepisu
                    addIngredientToRecipeWithMacros(data.id, data.name, 100, data.calories, data.protein, data.fat, data.carbs);

                    // Dodaj nowy składnik do listy wyboru
                    const option = document.createElement('option');
                    option.value = data.id;
                    option.text = data.name;
                    option.dataset.calories = data.calories;
                    option.dataset.protein = data.protein;
                    option.dataset.fat = data.fat;
                    option.dataset.carbs = data.carbs;
                    document.getElementById('ingredientSelect').add(option);

                    // Wyczyść pola
                    document.getElementById('recipe-new-ingredient-name').value = '';
                    document.getElementById('recipe-new-ingredient-calories').value = '0';
                    document.getElementById('recipe-new-ingredient-protein').value = '0';
                    document.getElementById('recipe-new-ingredient-fat').value = '0';
                    document.getElementById('recipe-new-ingredient-carbs').value = '0';
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Wystąpił błąd podczas dodawania nowego składnika');
                });
        }

        // Dodawanie składnika do przepisu z wartościami odżywczymi
        function addIngredientToRecipeWithMacros(ingredientId, ingredientName, amount, calories, protein, fat, carbs) {
            const list = document.getElementById('recipeIngredients');
    
            // Debug - logowanie wartości wejściowych
            console.log("Dodawanie składnika:", {
                ingredientId: ingredientId,
                name: ingredientName,
                amount: amount,
                calories: calories,
                protein: protein, 
                fat: fat,
                carbs: carbs
            });

            // Sprawdzanie czy ID jest poprawne
            if (!ingredientId || isNaN(parseInt(ingredientId)) || parseInt(ingredientId) <= 0) {
                console.error("Nieprawidłowe ID składnika:", ingredientId);
                alert("Nieprawidłowe ID składnika. Proszę wybrać składnik z listy.");
                return;
            }

            // Sprawdzenie czy składnik już istnieje
            if (document.querySelector(`.ingredient-item[data-ing-id="${ingredientId}"]`)) {
                alert('Ten składnik został już dodany do przepisu');
                return;
            }

            const item = document.createElement('div');
            item.className = 'ingredient-item';
    
            // Bardzo ważna zmiana - upewniamy się, że ID jest liczbą całkowitą
            const numericId = parseInt(ingredientId);
            item.setAttribute('data-ing-id', numericId);
    
            item.setAttribute('data-calories', calories);
            item.setAttribute('data-protein', protein);
            item.setAttribute('data-fat', fat);
            item.setAttribute('data-carbs', carbs);

            item.innerHTML = `
                <span>${ingredientName}</span>
                <input type="number" class="ingredient-amount form-control" value="${amount}" min="0.1" step="0.1" onchange="calculateRecipeMacros()" />
                <button type="button" class="remove-ingredient-btn" onclick="removeIngredientFromRecipe(this)">
                    <i class="fas fa-times"></i>
                </button>
                <div class="meal-macros" style="font-size: 10px; margin-top: 4px;">
                    <span><i class="fas fa-fire"></i> ${calories} kcal/100g</span>
                    <span><i class="fas fa-drumstick-bite"></i> ${protein}g</span>
                    <span><i class="fas fa-cheese"></i> ${fat}g</span>
                    <span><i class="fas fa-bread-slice"></i> ${carbs}g</span>
                </div>
            `;

            list.appendChild(item);

            // Wyczyść pola wyboru
            document.getElementById('ingredientSelect').value = '';
            document.getElementById('ingredientAmount').value = '';

            // Oblicz makroskładniki przepisu
            calculateRecipeMacros();
    
            // Debug - wypisz wszystkie składniki po dodaniu nowego
            console.log("Lista składników po dodaniu:");
            document.querySelectorAll('#recipeIngredients .ingredient-item').forEach((item, index) => {
                console.log(`Składnik #${index + 1}:`, {
                    id: item.getAttribute('data-ing-id'),
                    name: item.querySelector('span').textContent,
                    amount: item.querySelector('.ingredient-amount').value
                });
            });
        }

        // Usuwanie składnika z przepisu
        function removeIngredientFromRecipe(button) {
            const item = button.closest('.ingredient-item');
            item.remove();
            calculateRecipeMacros();
        }

         // Obliczanie makroskładników przepisu na podstawie składników
        function calculateRecipeMacros() {
            let totalCalories = 0;
            let totalProtein = 0;
            let totalFat = 0;
            let totalCarbs = 0;

            document.querySelectorAll('#recipeIngredients .ingredient-item').forEach(item => {
                const amount = parseFloat(item.querySelector('.ingredient-amount').value) || 0;
                const calories = parseFloat(item.getAttribute('data-calories')) || 0;
                const protein = parseFloat(item.getAttribute('data-protein')) || 0;
                const fat = parseFloat(item.getAttribute('data-fat')) || 0;
                const carbs = parseFloat(item.getAttribute('data-carbs')) || 0;

                totalCalories += calories * amount / 100;
                totalProtein += protein * amount / 100;
                totalFat += fat * amount / 100;
                totalCarbs += carbs * amount / 100;
            });

            // Zaokrąglij wartości
            totalCalories = Math.round(totalCalories);
            totalProtein = Math.round(totalProtein * 10) / 10;
            totalFat = Math.round(totalFat * 10) / 10;
            totalCarbs = Math.round(totalCarbs * 10) / 10;

            // Aktualizuj pola formularza
            document.getElementById('recipeCalories').value = totalCalories;
            document.getElementById('recipeProtein').value = totalProtein;
            document.getElementById('recipeFat').value = totalFat;
            document.getElementById('recipeCarbs').value = totalCarbs;
        }

         // Pokazywanie modalu dodawania posiłku
        function showAddMealModal(date) {
            // Reset formularza
            document.getElementById('addMealForm').reset();
            document.getElementById('mealId').value = '';
            document.getElementById('mealDate').value = date;
            document.getElementById('saveMealBtn').textContent = 'Zapisz';
            document.querySelector('#addMealModal h2').textContent = 'Dodaj posiłek';

            // Wyczyść zaznaczenie przepisów
            document.querySelectorAll('.recipe-item').forEach(item => {
                item.classList.remove('selected');
            });
    
            // Wyczyść zaznaczenie składników
            document.querySelectorAll('.ingredient-card').forEach(item => {
                item.classList.remove('selected');
            });
    
            // Usuń ukryte pola z poprzednich wyborów
            const oldSelectedIngredient = document.getElementById('selectedIngredientId');
            if (oldSelectedIngredient) {
                oldSelectedIngredient.remove();
            }
    
            const oldSelectedIngredientName = document.getElementById('selectedIngredientName');
            if (oldSelectedIngredientName) {
                oldSelectedIngredientName.remove();
            }
    
            // Zresetuj ID przepisu
            document.getElementById('recipeId').value = '';

            // Przywróć domyślne zakładki
            switchTab('recipes');
            switchRecipeTab('private');

            document.getElementById('addMealModal').style.display = 'block';
        }

        // Pokazywanie modalu dodawania/edycji przepisu
        function showAddRecipeModal() {
            // Reset formularza
            document.getElementById('recipeForm').reset();
            document.getElementById('recipeEditId').value = '';
            document.getElementById('recipeImagePreview').innerHTML = '<i class="fas fa-image"></i>';
            document.getElementById('recipeIngredients').innerHTML = '';
            document.querySelector('#recipeModal h2').textContent = 'Dodaj nowy przepis';

            // Zresetuj pola makroskładników
            document.getElementById('recipeCalories').value = '0';
            document.getElementById('recipeProtein').value = '0';
            document.getElementById('recipeFat').value = '0';
            document.getElementById('recipeCarbs').value = '0';

            document.getElementById('recipeModal').style.display = 'block';
        }

        // Zapisywanie przepisu
        async function saveRecipe() {
    try {
        const form = document.getElementById('recipeForm');
        const formData = new FormData(form);

        // Sprawdź wymagane pola
        const recipeName = formData.get('Name');
        if (!recipeName || recipeName.trim() === '') {
            alert('Nazwa przepisu jest wymagana.');
            return;
        }

        // Zbierz wszystkie składniki
        const ingredients = [];
        const ingredientItems = document.querySelectorAll('#recipeIngredients .ingredient-item');

        console.log('Znaleziono elementów składników:', ingredientItems.length);

        if (ingredientItems.length === 0) {
            alert('Dodaj przynajmniej jeden składnik do przepisu.');
            return;
        }

        // Zbieranie danych o składnikach
        for (let i = 0; i < ingredientItems.length; i++) {
            const item = ingredientItems[i];

            // Pobierz wartości
            const ingredientIdString = item.getAttribute('data-ing-id');
            const amountString = item.querySelector('.ingredient-amount').value;

            // Parsuj do liczb
            const ingredientId = parseInt(ingredientIdString);
            const amount = parseFloat(amountString);

            console.log(`Składnik #${i+1}:`, {
                dataIngId: ingredientIdString,
                parsedId: ingredientId,
                amount: amount
            });

            // Dodaj składnik do listy z nazwami pól dokładnie takimi jak w C#
            ingredients.push({
                IngredientId: ingredientId,  // Z dużej litery, jak w C#
                Amount: amount               // Z dużej litery, jak w C#
            });
        }

        // Diagnostyka składników
        console.log('Składniki przed serializacją:', ingredients);

        // Serializuj składniki do JSON
        const ingredientsJson = JSON.stringify(ingredients);
        console.log('JSON składników (surowy):', ingredientsJson);

        // Test deserializacji
        const testParse = JSON.parse(ingredientsJson);
        console.log('JSON po deserializacji:', testParse);

        // Usuń stare dane składników (jeśli istnieją)
        formData.delete('RecipeIngredients');

        // Dodaj nową wartość
        formData.append('RecipeIngredients', ingredientsJson);

        // Sprawdź FormData
        console.log('Dane formularza:');
        for (let [key, value] of formData.entries()) {
            if (key === 'RecipeIngredients') {
                console.log(`${key}: ${value}`);
            }
        }

        // Upewnij się, że wszystkie wymagane wartości makroskładników są ustawione
        const calories = document.getElementById('recipeCalories').value || '0';
        const protein = document.getElementById('recipeProtein').value || '0';
        const fat = document.getElementById('recipeFat').value || '0';
        const carbs = document.getElementById('recipeCarbs').value || '0';

        formData.set('Calories', calories);
        formData.set('Protein', protein.toString().replace(',', '.'));
        formData.set('Fat', fat.toString().replace(',', '.'));
        formData.set('Carbs', carbs.toString().replace(',', '.'));

        // Sprawdź czy przepis jest publiczny
        const isPublic = document.getElementById('recipeIsPublic').checked;
        formData.set('IsPublic', isPublic.toString());

        // Decydujemy czy aktualizujemy czy tworzymy
        const recipeId = formData.get('Id');
        const isUpdate = recipeId && parseInt(recipeId) > 0;
        const url = isUpdate ? `/api/recipe/${recipeId}` : '/api/recipe';
        const method = isUpdate ? 'PUT' : 'POST';

        // Finalne logowanie danych przed wysłaniem
        console.log('Wysyłane dane:', {
            url: url,
            method: method,
            id: recipeId,
            recipeName: formData.get('Name'),
            ingredients: ingredients,
            ingredientsJson: ingredientsJson,
            calories: formData.get('Calories'),
            protein: formData.get('Protein'),
            fat: formData.get('Fat'),
            carbs: formData.get('Carbs'),
            isPublic: formData.get('IsPublic')
        });

        // Pokaż stan ładowania
        const saveButton = document.querySelector('#recipeModal button.btn-primary');
        const originalButtonText = saveButton.textContent;
        saveButton.textContent = 'Zapisywanie...';
        saveButton.disabled = true;

        // Wyślij żądanie
        const response = await fetch(url, {
            method: method,
            body: formData,
        });

        // Przywróć oryginalny stan przycisku
        saveButton.textContent = originalButtonText;
        saveButton.disabled = false;

        if (response.ok) {
            console.log('Przepis został pomyślnie zapisany');
            closeModal('recipeModal');
            location.reload();
        } else {
            // Próba uzyskania szczegółów błędu
            try {
                const errorText = await response.text();
                console.error('Błąd odpowiedzi:', errorText);

                // Pokaż szczegóły błędu w alercie
                let errorMessage = `Błąd: ${response.status} ${response.statusText}`;
                if (errorText) {
                    errorMessage += `\n\nSzczegóły: ${errorText}`;
                }
                alert(errorMessage);
            } catch (errorReadingError) {
                console.error('Błąd podczas czytania odpowiedzi błędu:', errorReadingError);
                alert(`Wystąpił błąd podczas zapisywania przepisu: ${response.status} ${response.statusText}`);
            }
        }
    } catch (error) {
        console.error('Wystąpił wyjątek:', error);
        alert(`Wystąpił błąd podczas zapisywania przepisu: ${error.message}`);
    }
}

        // Edycja posiłku
        async function editMeal(id) {
            try {
                // Dodaj timeout i obsługę problemów z połączeniem
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 sekund timeout
        
                const response = await fetch(`/api/mealplan/${id}`, {
                    signal: controller.signal,
                    headers: {
                        'Accept': 'application/json'
                    }
                });
        
                clearTimeout(timeoutId);

                if (response.ok) {
                    const meal = await response.json();

                    // Ustawienie wartości formularza
                    document.getElementById('mealId').value = meal.id;
                    document.getElementById('mealDate').value = meal.date ? meal.date.split('T')[0] : '';
                    document.getElementById('mealType').value = meal.mealType || 'Sniadanie';

                    // Wyczyść zaznaczenie wszystkich elementów
                    document.querySelectorAll('.recipe-item').forEach(item => {
                        item.classList.remove('selected');
                    });
                    document.querySelectorAll('.ingredient-card').forEach(item => {
                        item.classList.remove('selected');
                    });

                    // Wybór odpowiedniej zakładki i wypełnienie danych
                    if (meal.recipeId) {
                        // Jest to przepis
                        switchTab('recipes');

                        // Znajdź element przepisu i zaznacz go
                        const recipeItem = document.querySelector(`.recipe-item[data-id="${meal.recipeId}"]`);
                        if (recipeItem) {
                            // Przełącz na odpowiednią zakładkę (prywatne/publiczne)
                            if (recipeItem.closest('#private-recipes')) {
                                switchRecipeTab('private');
                            } else {
                                switchRecipeTab('public');
                            }

                            // Zaznacz przepis
                            selectRecipe(recipeItem, meal.recipeId);
                    
                            // Przewiń do zaznaczonego przepisu
                            recipeItem.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' });
                        }
                    } else if (meal.customEntry) {
                        // Przejdź do zakładki składników, jeśli to składnik
                        switchTab('ingredients');
                
                        // Próba wyodrębnienia ID składnika z customEntry
                        const match = meal.customEntry.match(/Składnik.*?(\d+)/);
                        if (match && match[1]) {
                            const ingredientId = match[1];
                            const ingredientCard = document.querySelector(`.ingredient-card[data-id="${ingredientId}"]`);
                    
                            if (ingredientCard) {
                                // Zaznacz składnik
                                const ingredientName = ingredientCard.querySelector('.ingredient-card-header').textContent;
                                selectIngredient(ingredientCard, ingredientId, ingredientName);
                        
                                // Przewiń do zaznaczonego składnika
                                ingredientCard.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' });
                            }
                        }
                    }

                    // Aktualizacja UI
                    document.querySelector('#addMealModal h2').textContent = 'Edytuj posiłek';
                    document.getElementById('saveMealBtn').textContent = 'Zapisz zmiany';

                    // Pokaż modal
                    document.getElementById('addMealModal').style.display = 'block';
                } else {
                    console.error('Nie udało się pobrać danych posiłku:', response.status, response.statusText);
                    alert('Nie udało się pobrać danych posiłku. Kod błędu: ' + response.status);
                }
            } catch (error) {
                console.error('Error:', error);
                if (error.name === 'AbortError') {
                    alert('Upłynął czas oczekiwania na odpowiedź serwera. Spróbuj ponownie.');
                } else {
                    alert('Wystąpił błąd podczas pobierania danych posiłku: ' + error.message);
                }
            }
        }
        // Wybór składnika 
        function selectIngredient(element, ingredientId, ingredientName, calories, protein, fat, carbs) {
            // Usuń zaznaczenie ze wszystkich składników
            document.querySelectorAll('.ingredient-card').forEach(item => {
                item.classList.remove('selected');
            });

            // Zaznacz wybrany składnik
            element.classList.add('selected');
    
            // Usuń stare ukryte pola, jeśli istnieją
            const oldInput = document.getElementById('selectedIngredientId');
            if (oldInput) oldInput.remove();
    
            const oldNameInput = document.getElementById('selectedIngredientName');
            if (oldNameInput) oldNameInput.remove();
    
            // Dodaj ukryte pole z ID składnika
            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.id = 'selectedIngredientId';
            hiddenInput.name = 'SelectedIngredientId';
            hiddenInput.value = ingredientId;
            document.getElementById('addMealForm').appendChild(hiddenInput);
    
            // Dodaj ukryte pole z nazwą składnika
            const hiddenNameInput = document.createElement('input');
            hiddenNameInput.type = 'hidden';
            hiddenNameInput.id = 'selectedIngredientName';
            hiddenNameInput.name = 'SelectedIngredientName';
            hiddenNameInput.value = ingredientName;
            document.getElementById('addMealForm').appendChild(hiddenNameInput);
    
            // Wyczyść ewentualne zaznaczenie przepisu
            document.getElementById('recipeId').value = '';
            document.querySelectorAll('.recipe-item').forEach(item => {
                item.classList.remove('selected');
            });
        }

        // Funkcja pomocnicza do wyciągania ID składnika z customEntry
        function extractIngredientId(customEntry) {
            if (!customEntry) return null;
    
            const match = customEntry.match(/Składnik ID: (\d+)/);
            if (match && match[1]) {
                return parseInt(match[1]);
            }
            return null;
        }

        // Edycja przepisu
        async function editRecipe(id) {
            try {
                const response = await fetch(`/api/recipe/${id}`);

                if (response.ok) {
                    const recipe = await response.json();

                    // Wypełnij formularz danymi
                    document.getElementById('recipeEditId').value = recipe.id;
                    document.getElementById('recipeName').value = recipe.name;
                    document.getElementById('recipeCalories').value = recipe.calories;
                    document.getElementById('recipeProtein').value = recipe.protein;
                    document.getElementById('recipeFat').value = recipe.fat;
                    document.getElementById('recipeCarbs').value = recipe.carbs;
                    document.getElementById('recipeInstructions').value = recipe.instructions || '';
                    document.getElementById('recipeIsPublic').checked = recipe.isPublic;

                    // Wyświetl zdjęcie, jeśli istnieje
                    if (recipe.imageData) {
                        const preview = document.getElementById('recipeImagePreview');
                        preview.innerHTML = `<img src="data:image/jpeg;base64,${recipe.imageData}" alt="${recipe.name}" />`;
                    }

                    // Dodaj składniki
                    document.getElementById('recipeIngredients').innerHTML = '';
                    if (recipe.recipeIngredients && recipe.recipeIngredients.length > 0) {
                        recipe.recipeIngredients.forEach(ri => {
                            // Dodaj składnik z makroskładnikami
                            addIngredientToRecipeWithMacros(
                                ri.ingredientId,
                                ri.ingredient.name,
                                ri.amount,
                                ri.ingredient.calories,
                                ri.ingredient.protein,
                                ri.ingredient.fat,
                                ri.ingredient.carbs
                            );
                        });
                    }

                    // Aktualizacja UI
                    document.querySelector('#recipeModal h2').textContent = 'Edytuj przepis';

                    // Pokaż modal
                    document.getElementById('recipeModal').style.display = 'block';
                } else {
                    alert('Nie udało się pobrać danych przepisu.');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Wystąpił błąd podczas pobierania danych przepisu.');
            }
        }

        // Oznaczanie posiłku jako zjedzonego
        async function markMealEaten(id) {
            try {
                const response = await fetch(`/api/mealplan/${id}/eaten`, {
                    method: 'PUT',
                });

                if (response.ok) {
                    location.reload();
                } else {
                    alert('Wystąpił błąd podczas oznaczania posiłku jako zjedzonego.');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Wystąpił błąd podczas oznaczania posiłku jako zjedzonego.');
            }
        }

        // Oznaczanie posiłku jako niezjedzonego
        async function unmarkMealEaten(id) {
            try {
                const response = await fetch(`/api/mealplan/${id}/uneaten`, {
                    method: 'PUT',
                });

                if (response.ok) {
                    location.reload();
                } else {
                    alert('Wystąpił błąd podczas oznaczania posiłku jako niezjedzonego.');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Wystąpił błąd podczas oznaczania posiłku jako niezjedzonego.');
            }
        }

        // Usuwanie posiłku
        async function deleteMeal(id) {
            if (confirm('Czy na pewno chcesz usunąć ten posiłek?')) {
                try {
                    const response = await fetch(`/api/mealplan/${id}`, {
                        method: 'DELETE',
                    });

                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Wystąpił błąd podczas usuwania posiłku.');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Wystąpił błąd podczas usuwania posiłku.');
                }
            }
        }

        // Szczegóły przepisu
        async function showRecipeDetails(id) {
            try {
                // Dodaj timeout i obsługę problemów z połączeniem
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 sekund timeout
        
                const response = await fetch(`/api/recipe/${id}`, {
                    signal: controller.signal,
                    headers: {
                        'Accept': 'application/json'
                    }
                });
        
                clearTimeout(timeoutId);

                if (response.ok) {
                    const recipe = await response.json();
                    const content = document.getElementById('recipeDetailsContent');

                    // Reszta kodu pozostaje bez zmian
                    let imageHtml = '';
                    if (recipe.imageData) {
                        imageHtml = `<img src="data:image/jpeg;base64,${recipe.imageData}" alt="${recipe.name}" style="max-width: 100%; max-height: 300px; object-fit: cover; border-radius: 5px; margin-bottom: 15px;" />`;
                    }

                    let ingredientsHtml = '';
                    if (recipe.recipeIngredients && recipe.recipeIngredients.length > 0) {
                        ingredientsHtml = '<h3>Składniki:</h3><ul>';
                        recipe.recipeIngredients.forEach(ri => {
                            const ingredientName = ri.ingredient ? ri.ingredient.name : 'Nieznany składnik';
                            ingredientsHtml += `<li>${ri.amount} g ${ingredientName}</li>`;
                        });
                        ingredientsHtml += '</ul>';
                    }

                    content.innerHTML = `
                        <div style="display: flex; justify-content: space-between; align-items: start;">
                            <h2>${recipe.name}</h2>
                            <button type="button" class="btn btn-primary" onclick="editRecipe(${recipe.id})">
                                <i class="fas fa-edit"></i> Edytuj przepis
                            </button>
                        </div>
                        ${imageHtml}
                        <div class="recipe-macros" style="display: flex; gap: 15px; margin-bottom: 15px;">
                            <p><strong><i class="fas fa-fire"></i> Kalorie:</strong> ${recipe.calories} kcal</p>
                            <p><strong><i class="fas fa-drumstick-bite"></i> Białko:</strong> ${recipe.protein} g</p>
                            <p><strong><i class="fas fa-cheese"></i> Tłuszcze:</strong> ${recipe.fat} g</p>
                            <p><strong><i class="fas fa-bread-slice"></i> Węglowodany:</strong> ${recipe.carbs} g</p>
                        </div>
                        ${ingredientsHtml}
                        <h3>Sposób przygotowania:</h3>
                        <p>${recipe.instructions || 'Brak szczegółowego przepisu.'}</p>
                    `;

                    document.getElementById('recipeDetailsModal').style.display = 'block';
                } else {
                    console.error('Błąd pobierania szczegółów przepisu:', response.status, response.statusText);
                    alert('Nie udało się wczytać szczegółów przepisu. Kod błędu: ' + response.status);
                }
            } catch (error) {
                console.error('Error:', error);
                if (error.name === 'AbortError') {
                    alert('Upłynął czas oczekiwania na odpowiedź serwera. Spróbuj ponownie.');
                } else {
                    alert('Wystąpił błąd podczas wczytywania szczegółów przepisu: ' + error.message);
                }
            }
        }

         // Funkcja zapisywania posiłku do jadłospisu
        // Funkcja zapisywania posiłku do jadłospisu
        async function saveMeal() {
            try {
                // Zbierz podstawowe dane
                const mealDate = document.getElementById('mealDate').value;
                const mealType = document.getElementById('mealType').value;
                const recipeId = document.getElementById('recipeId').value;
                const selectedIngredientId = document.getElementById('selectedIngredientId')?.value;
                const mealId = document.getElementById('mealId').value;

                // Walidacja podstawowych danych
                if (!mealDate) {
                    alert('Data posiłku jest wymagana');
                    return;
                }
                if (!mealType) {
                    alert('Wybierz rodzaj posiłku');
                    return;
                }

                // Sprawdź czy wybrano przepis lub składnik
                if (!recipeId && !selectedIngredientId) {
                    alert('Wybierz przepis lub składnik');
                    return;
                }

                // Przygotuj dane do wysłania
                const mealPlanDto = {
                    Date: mealDate,
                    MealType: mealType,
                    CustomEntry: "" // Zawsze dodajemy wartość, nawet pustą
                };

                // Dodaj ID posiłku jeśli edytujemy istniejący
                if (mealId) {
                    mealPlanDto.Id = parseInt(mealId);
                }

                // Jeśli wybrano przepis, dodaj jego ID
                if (recipeId) {
                    mealPlanDto.RecipeId = parseInt(recipeId);
                    // Jeśli wybrano przepis, dodaj jego nazwę jako CustomEntry
                    const recipeElement = document.querySelector(`.recipe-item[data-id="${recipeId}"]`);
                    if (recipeElement) {
                        const recipeName = recipeElement.querySelector('.recipe-title').textContent;
                        mealPlanDto.CustomEntry = `Przepis: ${recipeName}`;
                    } else {
                        mealPlanDto.CustomEntry = `Przepis ID: ${recipeId}`;
                    }
                }
                // Jeśli wybrano składnik
                else if (selectedIngredientId) {
                    mealPlanDto.RecipeId = null;
                    const ingredientElement = document.querySelector(`.ingredient-card[data-id="${selectedIngredientId}"]`);
                    if (ingredientElement) {
                        const ingredientName = ingredientElement.querySelector('.ingredient-card-header').textContent;
                        mealPlanDto.CustomEntry = `Składnik: ${ingredientName}`;
                    } else {
                        mealPlanDto.CustomEntry = `Składnik ID: ${selectedIngredientId}`;
                    }
                }

                console.log('Dane posiłku do zapisania:', mealPlanDto);

                // Określ URL i metodę na podstawie tego, czy edytujemy istniejący posiłek
                const url = mealId ? `/api/mealplan/${mealId}` : '/api/mealplan';
                const method = mealId ? 'PUT' : 'POST';

                // Pokaż ładowanie
                const saveButton = document.getElementById('saveMealBtn');
                const originalText = saveButton.innerHTML;
                saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Zapisywanie...';
                saveButton.disabled = true;

                // Dodaj timeout dla żądania
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 sekund timeout

                // Wyślij żądanie do API
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(mealPlanDto),
                    signal: controller.signal
                });

                clearTimeout(timeoutId);

                console.log('Odpowiedź serwera:', response.status, response.statusText);

                if (response.ok) {
                    console.log('Posiłek zapisany pomyślnie');

                    let responseData = null;
                    try {
                        const responseText = await response.text();
                        if (responseText) {
                            responseData = JSON.parse(responseText);
                        }
                    } catch (jsonError) {
                        console.log('Brak odpowiedzi JSON lub błąd parsowania, ale operacja zakończona sukcesem');
                    }

                    console.log('Dane odpowiedzi:', responseData);

                    closeModal('addMealModal');

                    setTimeout(() => {
                        location.reload();
                    }, 500);

                } else {
                    let errorMessage = `Błąd HTTP: ${response.status} ${response.statusText}`;

                    try {
                        const errorText = await response.text();
                        if (errorText) {
                            errorMessage += `\n\nSzczegóły: ${errorText}`;
                        }
                    } catch (errorReadingError) {
                        console.error('Błąd podczas czytania odpowiedzi błędu:', errorReadingError);
                    }

                    console.error('Błąd serwera:', errorMessage);
                    alert(errorMessage);

                    saveButton.innerHTML = originalText;
                    saveButton.disabled = false;
                }

            } catch (error) {
                console.error('Wystąpił błąd:', error);

                let errorMessage = 'Wystąpił błąd podczas zapisywania posiłku';

                if (error.name === 'AbortError') {
                    errorMessage = 'Upłynął czas oczekiwania na odpowiedź serwera. Spróbuj ponownie.';
                } else if (error.message) {
                    errorMessage += ': ' + error.message;
                }

                alert(errorMessage);

                const saveButton = document.getElementById('saveMealBtn');
                if (saveButton) {
                    saveButton.innerHTML = 'Zapisz';
                    saveButton.disabled = false;
                }

                console.log('Sprawdzam czy posiłek został zapisany mimo błędu...');
                setTimeout(() => {
                    if (confirm('Wystąpił błąd, ale posiłek mógł się zapisać. Czy chcesz odświeżyć stronę?')) {
                        location.reload();
                    }
                }, 2000);
            }
        }
        // Funkcja testująca połączenie z API
        async function testApiConnection() {
            try {
                const response = await fetch('/api/recipe/1', {
                    method: 'HEAD'
                });
                console.log('Test połączenia API:', response.status);
                return response.ok;
            } catch (error) {
                console.error('Błąd testu połączenia API:', error);
                return false;
            }
        }

        // Wywołaj test przy ładowaniu strony
        document.addEventListener('DOMContentLoaded', async function() {
            const apiStatus = await testApiConnection();
            if (!apiStatus) {
                console.warn('Ostrzeżenie: Połączenie z API może być niestabilne lub niedostępne.');
            }
        });

            // Zamknij modal po kliknięciu poza nim
            window.onclick = function (event) {
                const modals = document.getElementsByClassName('modal');
                for (let i = 0; i < modals.length; i++) {
                    if (event.target == modals[i]) {
                        modals[i].style.display = 'none';
                    }
                }
            };
    </script>
</body>
</html>