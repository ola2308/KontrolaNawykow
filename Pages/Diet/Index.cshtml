@page
@model KontrolaNawykow.Pages.Diet.IndexModel
@{
    ViewData["Title"] = "Dieta";
    Layout = null;
}
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dieta - KontrolaNawyków</title>
    <style>
        /* Reset and base styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f8f9fa;
            min-height: 100vh;
        }

        /* Navigation Header */
        .navigation-header {
            background: linear-gradient(135deg, #e91e63 0%, #ad1457 100%);
            padding: 0;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 100;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .nav-tabs {
            display: flex;
            padding: 0 20px;
        }

        .nav-actions {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 0 20px;
        }

        .nav-tab {
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            padding: 15px 25px;
            font-weight: 600;
            transition: all 0.3s ease;
            border-bottom: 3px solid transparent;
            font-size: 16px;
        }

        .nav-tab:hover {
            color: white;
            background: rgba(255,255,255,0.1);
        }

        .nav-tab.active {
            color: white;
            border-bottom-color: #fff;
            background: rgba(255,255,255,0.15);
        }

        .profile-link {
            color: white;
            text-decoration: none;
            padding: 8px 16px;
            border-radius: 20px;
            background: rgba(255,255,255,0.15);
            font-weight: 600;
            font-size: 14px;
            transition: all 0.3s ease;
            border: 1px solid rgba(255,255,255,0.2);
        }

        .profile-link:hover {
            background: rgba(255,255,255,0.25);
            transform: translateY(-1px);
            color: white;
            text-decoration: none;
        }

        .logout-btn {
            background: rgba(255,255,255,0.1);
            color: white;
            border: 1px solid rgba(255,255,255,0.3);
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .logout-btn:hover {
            background: rgba(255,255,255,0.2);
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        }

        /* Week Navigation */
        .week-nav {
            background: white;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .week-arrow {
            background: #e91e63;
            color: white;
            border: none;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            font-size: 1.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .week-arrow:hover {
            background: #c2185b;
            transform: scale(1.1);
        }

        .week-date {
            font-size: 1.2rem;
            font-weight: 600;
            color: #333;
            min-width: 150px;
            text-align: center;
        }

        /* Header Actions */
        .header-actions {
            background: white;
            padding: 20px;
            display: flex;
            justify-content: center;
            gap: 15px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .action-btn {
            background: #e91e63;
            color: white;
            text-decoration: none;
            padding: 12px 20px;
            border-radius: 5px;
            font-weight: 600;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
            font-size: 1rem;
        }

        .action-btn:hover {
            background: #c2185b;
            color: white;
            text-decoration: none;
            transform: translateY(-1px);
        }

        .action-btn.recipes {
            background: #28a745;
        }

        .action-btn.recipes:hover {
            background: #218838;
        }

        /* Days Grid */
        .days-container {
            padding: 20px;
        }

        .days-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 20px;
            max-width: 1400px;
            margin: 0 auto;
        }

        .day-card {
            background: white;
            border-radius: 10px;
            padding: 20px 15px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            min-height: 400px;
            border: 1px solid #e0e0e0;
        }

        .day-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        }

        .day-card.today {
            background: linear-gradient(135deg, rgba(233, 30, 99, 0.1), rgba(173, 20, 87, 0.05));
            border-color: #e91e63;
        }

        .day-header {
            text-align: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f0f0f0;
        }

        .day-name {
            font-size: 1.1rem;
            font-weight: 700;
            color: #333;
            margin-bottom: 5px;
        }

        .day-date {
            font-size: 0.9rem;
            color: #666;
        }

        .day-content {
            display: flex;
            flex-direction: column;
            height: calc(100% - 80px);
        }

        .add-meal-btn {
            background: #e91e63;
            color: white;
            border: none;
            padding: 12px 15px;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 15px;
            font-size: 0.9rem;
        }

        .add-meal-btn:hover {
            background: #c2185b;
            transform: translateY(-1px);
        }

        .meals-list {
            flex: 1;
            overflow-y: auto;
        }

        .meal-item {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 8px;
            display: flex;
            flex-direction: column;
            gap: 8px;
            transition: all 0.3s ease;
            border: 1px solid #e9ecef;
            position: relative;
        }

        .meal-item:hover {
            background: #e9ecef;
        }

        .meal-item.eaten {
            background: #d4edda;
            border-color: #c3e6cb;
        }

        .meal-item.custom-nutrition {
            border-left: 4px solid #17a2b8;
        }

        .meal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .meal-type {
            font-size: 0.8rem;
            font-weight: 600;
            color: #e91e63;
            text-transform: uppercase;
        }

        .meal-actions {
            display: flex;
            gap: 5px;
        }

        .meal-action-btn {
            background: none;
            border: none;
            cursor: pointer;
            font-size: 0.8rem;
            padding: 4px 8px;
            border-radius: 4px;
            transition: all 0.3s ease;
            opacity: 0;
        }

        .meal-item:hover .meal-action-btn {
            opacity: 1;
        }

        .meal-action-btn.edit {
            background: #17a2b8;
            color: white;
        }

        .meal-action-btn.delete {
            background: #dc3545;
            color: white;
        }

        .meal-action-btn.eaten {
            background: #28a745;
            color: white;
        }

        .meal-action-btn:hover {
            transform: scale(1.1);
        }

        .meal-name {
            font-size: 0.95rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 5px;
        }

        .meal-stats {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.8rem;
            color: #666;
        }

        .meal-calories {
            font-weight: 600;
            color: #e91e63;
        }

        .meal-macros {
            font-size: 0.7rem;
            color: #888;
        }

        /* Daily Summary */
        .daily-summary {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border: 1px solid #e0e0e0;
        }

        .summary-title {
            color: #333;
            font-size: 1.4rem;
            margin-bottom: 20px;
            text-align: center;
            font-weight: 600;
        }

        .summary-stats {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }

        .summary-stat {
            text-align: center;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e9ecef;
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: #e91e63;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 0.8rem;
            color: #666;
            font-weight: 500;
        }

        .progress-section {
            margin-top: 20px;
        }

        .progress-item {
            margin-bottom: 15px;
        }

        .progress-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }

        .progress-label {
            font-weight: 600;
            color: #555;
            font-size: 0.9rem;
        }

        .progress-value {
            font-weight: 600;
            color: #333;
            font-size: 0.9rem;
        }

        .progress-bar {
            height: 12px;
            background: #f0f0f0;
            border-radius: 6px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            border-radius: 6px;
            transition: width 0.5s ease;
        }

        .progress-fill.calories {
            background: #e91e63;
        }

        .progress-fill.protein {
            background: #17a2b8;
        }

        .progress-fill.carbs {
            background: #ffc107;
        }

        .progress-fill.fat {
            background: #fd7e14;
        }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
            backdrop-filter: blur(5px);
        }

        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            border-radius: 15px;
            padding: 30px;
            max-width: 800px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }

        .modal-header {
            text-align: center;
            margin-bottom: 25px;
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 5px;
        }

        .modal-subtitle {
            color: #666;
            font-size: 0.9rem;
        }

        .meal-type-selection {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            margin-bottom: 25px;
        }

        .meal-type-btn {
            padding: 12px 15px;
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            font-weight: 600;
            color: #333;
        }

        .meal-type-btn:hover {
            background: #e9ecef;
        }

        .meal-type-btn.selected {
            background: #e91e63;
            color: white;
            border-color: #e91e63;
        }

        .recipe-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
            max-height: 400px;
            overflow-y: auto;
        }

        .recipe-card {
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            padding: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
        }

        .recipe-card:hover {
            background: #e91e63;
            color: white;
            border-color: #e91e63;
            transform: translateY(-2px);
        }

        .recipe-card.selected {
            background: #e91e63;
            color: white;
            border-color: #e91e63;
        }

        .recipe-name {
            font-weight: 600;
            margin-bottom: 8px;
            font-size: 0.95rem;
        }

        .recipe-stats {
            font-size: 0.8rem;
            opacity: 0.8;
        }

        .recipe-rating {
            margin-top: 8px;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 5px;
        }

        .stars {
            color: #ffd700;
            font-size: 0.9rem;
        }

        .rating-value {
            font-weight: 600;
            color: #333;
        }

        .custom-meal-input {
            margin-bottom: 25px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
        }

        .form-input {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.3s ease;
            box-sizing: border-box;
        }

        .form-input:focus {
            border-color: #e91e63;
            outline: none;
            box-shadow: 0 0 0 3px rgba(233, 30, 99, 0.1);
        }

        .macros-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }

        .macro-group {
            display: flex;
            flex-direction: column;
        }

        .macro-input {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.3s ease;
            box-sizing: border-box;
        }

        .macro-input:focus {
            border-color: #e91e63;
            outline: none;
            box-shadow: 0 0 0 3px rgba(233, 30, 99, 0.1);
        }

        .macro-calories {
            border-color: #e91e63 !important;
        }

        .macro-protein {
            border-color: #17a2b8 !important;
        }

        .macro-carbs {
            border-color: #ffc107 !important;
        }

        .macro-fat {
            border-color: #fd7e14 !important;
        }

        .gramature-section {
            margin-bottom: 25px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 10px;
            border: 1px solid #e9ecef;
        }

        .gramature-info {
            color: #666;
            font-size: 0.8rem;
            margin-top: 5px;
            font-style: italic;
        }

        .nutrition-preview {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid #dee2e6;
            display: none;
        }

        .preview-title {
            font-weight: 600;
            color: #333;
            margin-bottom: 15px;
            text-align: center;
        }

        .preview-stats {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
        }

        .preview-stat {
            text-align: center;
            padding: 10px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .preview-value {
            font-size: 1.2rem;
            font-weight: 700;
            margin-bottom: 3px;
        }

        .preview-value.calories { color: #e91e63; }
        .preview-value.protein { color: #17a2b8; }
        .preview-value.carbs { color: #ffc107; }
        .preview-value.fat { color: #fd7e14; }

        .preview-label {
            font-size: 0.7rem;
            color: #666;
            font-weight: 500;
        }

        .modal-tabs {
            display: flex;
            margin-bottom: 25px;
            border-bottom: 2px solid #f0f0f0;
        }

        .modal-tab {
            flex: 1;
            padding: 12px 20px;
            background: none;
            border: none;
            cursor: pointer;
            font-weight: 600;
            color: #666;
            transition: all 0.3s ease;
            border-bottom: 3px solid transparent;
        }

        .modal-tab.active {
            color: #e91e63;
            border-bottom-color: #e91e63;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .modal-actions {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-top: 25px;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1rem;
        }

        .btn-primary {
            background: #e91e63;
            color: white;
        }

        .btn-primary:hover {
            background: #c2185b;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #5a6268;
        }

        /* Responsive Design */
        @@media (max-width: 1200px) {
            .days-grid {
                grid-template-columns: repeat(4, 1fr);
            }

            .summary-stats {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @@media (max-width: 768px) {
            .navigation-header {
                flex-direction: column;
                padding: 10px 0;
            }

            .nav-tabs {
                flex-wrap: wrap;
                padding: 0 10px;
                justify-content: center;
            }

            .nav-actions {
                padding: 10px 20px 0;
                justify-content: center;
            }

            .nav-tab {
                padding: 12px 15px;
                font-size: 14px;
            }

            .days-container {
                padding: 15px 10px;
            }

            .days-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 15px;
            }

            .week-nav {
                padding: 15px;
                gap: 15px;
            }

            .week-arrow {
                width: 40px;
                height: 40px;
                font-size: 1.2rem;
            }

            .week-date {
                font-size: 1rem;
                min-width: 120px;
            }

            .summary-stats {
                grid-template-columns: 1fr;
            }

            .recipe-grid {
                grid-template-columns: 1fr;
            }

            .meal-type-selection {
                grid-template-columns: repeat(2, 1fr);
            }

            .macros-grid {
                grid-template-columns: 1fr;
            }

            .preview-stats {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @@media (max-width: 480px) {
            .days-grid {
                grid-template-columns: 1fr;
            }S

            .nav-tabs {
                flex-direction: column;
                align-items: center;
            }

            .nav-actions {
                flex-direction: column;
                gap: 10px;
            }

            .modal-content {
                padding: 20px;
                margin: 15px;
            }

            .modal-actions {
                flex-direction: column;
            }

            .meal-type-selection {
                grid-template-columns: 1fr;
            }

            .header-actions {
                flex-direction: column;
            }

            .preview-stats {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Navigation Header -->
    <div class="navigation-header">
        <div class="nav-tabs">
            <a href="/Diet" class="nav-tab active">Dieta</a>
            <a href="/ToDo" class="nav-tab">ToDo</a>
            <a href="/Admin" class="nav-tab">Admin</a>
            <a href="/Dietitian" class="nav-tab">Twój dietetyk</a>
        </div>
        <div class="nav-actions">
            <a href="/Profile/Index" class="profile-link">👤 Mój profil</a>
            <form method="post" action="/Account/Logout" style="display: inline;">
                <button type="submit" class="logout-btn">🚪 Wyloguj</button>
            </form>
        </div>
    </div>

    <!-- Header Actions -->
    <div class="header-actions">
        <a href="/Recipes/Search" class="action-btn recipes">🔍 Wyszukaj przepisy</a>
        <a href="/Recipes/Add" class="action-btn">➕ Dodaj przepis</a>
    </div>

    <!-- Week Navigation -->
    <div class="week-nav">
        <button class="week-arrow" onclick="changeWeek(-1)">❮</button>
        <div class="week-date" id="weekDisplay"></div>
        <button class="week-arrow" onclick="changeWeek(1)">❯</button>
    </div>

    <!-- Days Grid -->
    <div class="days-container">
        <div class="days-grid" id="daysGrid">
            <!-- Days will be generated by JavaScript -->
        </div>
    </div>

    <!-- Daily Summary -->
    <div class="daily-summary">
        <h3 class="summary-title">📊 Podsumowanie Dzisiejsze</h3>
        
        <div class="summary-stats">
            <div class="summary-stat">
                <div class="stat-value" id="totalCalories">0</div>
                <div class="stat-label">Kalorie</div>
            </div>
            <div class="summary-stat">
                <div class="stat-value" id="totalProtein">0g</div>
                <div class="stat-label">Białko</div>
            </div>
            <div class="summary-stat">
                <div class="stat-value" id="totalCarbs">0g</div>
                <div class="stat-label">Węglowodany</div>
            </div>
            <div class="summary-stat">
                <div class="stat-value" id="totalFat">0g</div>
                <div class="stat-label">Tłuszcze</div>
            </div>
        </div>

        <div class="progress-section">
            <div class="progress-item">
                <div class="progress-header">
                    <span class="progress-label">🔥 Kalorie</span>
                    <span class="progress-value" id="caloriesProgress">0 / @(Model.CurrentUser?.CustomCaloriesDeficit ?? 2000) kcal</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill calories" id="caloriesBar" style="width: 0%"></div>
                </div>
            </div>

            <div class="progress-item">
                <div class="progress-header">
                    <span class="progress-label">🥩 Białko</span>
                    <span class="progress-value" id="proteinProgress">0 / @(Model.CurrentUser?.CustomProteinGrams ?? 100)g</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill protein" id="proteinBar" style="width: 0%"></div>
                </div>
            </div>

            <div class="progress-item">
                <div class="progress-header">
                    <span class="progress-label">🍞 Węglowodany</span>
                    <span class="progress-value" id="carbsProgress">0 / @(Model.CurrentUser?.CustomCarbsGrams ?? 200)g</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill carbs" id="carbsBar" style="width: 0%"></div>
                </div>
            </div>

            <div class="progress-item">
                <div class="progress-header">
                    <span class="progress-label">🥑 Tłuszcze</span>
                    <span class="progress-value" id="fatProgress">0 / @(Model.CurrentUser?.CustomFatGrams ?? 80)g</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill fat" id="fatBar" style="width: 0%"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Meal Modal -->
    <div class="modal" id="mealModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Dodaj Posiłek</h2>
                <p class="modal-subtitle" id="modalDate"></p>
            </div>

            <!-- Meal Type Selection -->
            <div class="meal-type-selection">
                <div class="meal-type-btn" data-type="Sniadanie">🌅 Śniadanie</div>
                <div class="meal-type-btn" data-type="Obiad">🌞 Obiad</div>
                <div class="meal-type-btn" data-type="Kolacja">🌙 Kolacja</div>
                <div class="meal-type-btn" data-type="Przekaska">🍎 Przekąska</div>
            </div>

            <!-- Modal Tabs -->
            <div class="modal-tabs">
                <button class="modal-tab active" onclick="switchTab('recipe')">🍽️ Wybierz przepis</button>
                <button class="modal-tab" onclick="switchTab('custom')">✍️ Własny posiłek</button>
            </div>

            <!-- Recipe Tab -->
            <div class="tab-content active" id="recipeTab">
                <div class="recipe-grid" id="recipeGrid">
                    <!-- Recipes will be loaded here via AJAX -->
                </div>
            </div>

            <!-- Custom Meal Tab -->
            <div class="tab-content" id="customTab">
                <div class="custom-meal-input">
                    <div class="form-group">
                        <label class="form-label">Nazwa posiłku:</label>
                        <input type="text" class="form-input" id="customMealName" placeholder="Wpisz nazwę własnego posiłku...">
                    </div>

                    <div class="form-group">
                        <label class="form-label">Makroskładniki na 100g:</label>
                        <div class="macros-grid">
                            <div class="macro-group">
                                <label class="form-label" style="margin-bottom: 5px;">🔥 Kalorie (kcal):</label>
                                <input type="number" class="macro-input macro-calories" id="customCalories" placeholder="0" min="0" max="9999">
                            </div>
                            <div class="macro-group">
                                <label class="form-label" style="margin-bottom: 5px;">🥩 Białko (g):</label>
                                <input type="number" class="macro-input macro-protein" id="customProtein" placeholder="0" min="0" max="100" step="0.1">
                            </div>
                            <div class="macro-group">
                                <label class="form-label" style="margin-bottom: 5px;">🍞 Węglowodany (g):</label>
                                <input type="number" class="macro-input macro-carbs" id="customCarbs" placeholder="0" min="0" max="100" step="0.1">
                            </div>
                            <div class="macro-group">
                                <label class="form-label" style="margin-bottom: 5px;">🥑 Tłuszcze (g):</label>
                                <input type="number" class="macro-input macro-fat" id="customFat" placeholder="0" min="0" max="100" step="0.1">
                            </div>
                        </div>
                    </div>

                    <!-- Nutrition Preview -->
                    <div class="nutrition-preview" id="nutritionPreview">
                        <div class="preview-title">📊 Podgląd wartości odżywczych:</div>
                        <div class="preview-stats">
                            <div class="preview-stat">
                                <div class="preview-value calories" id="previewCalories">0</div>
                                <div class="preview-label">kcal</div>
                            </div>
                            <div class="preview-stat">
                                <div class="preview-value protein" id="previewProtein">0</div>
                                <div class="preview-label">Białko (g)</div>
                            </div>
                            <div class="preview-stat">
                                <div class="preview-value carbs" id="previewCarbs">0</div>
                                <div class="preview-label">Węglowodany (g)</div>
                            </div>
                            <div class="preview-stat">
                                <div class="preview-value fat" id="previewFat">0</div>
                                <div class="preview-label">Tłuszcze (g)</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Gramatura Section (for both tabs) -->
            <div class="gramature-section">
                <div class="form-group">
                    <label class="form-label">Gramatura (g):</label>
                    <input type="number" class="form-input" id="gramatureInput" value="100" min="1" max="2000" placeholder="100">
                    <div class="gramature-info">Makroskładniki zostaną przeliczone na podstawie podanej gramatury</div>
                </div>
            </div>

            <div class="modal-actions">
                <button type="button" class="btn btn-primary" onclick="addMeal()">🍽️ Dodaj posiłek</button>
                <button type="button" class="btn btn-secondary" onclick="closeModal()">❌ Anuluj</button>
            </div>
        </div>
    </div>

    <script>
        // Configuration from server
        const userNutrition = {
            calories: @(Model.CurrentUser?.CustomCaloriesDeficit ?? 2000),
            protein: @(Model.CurrentUser?.CustomProteinGrams ?? 100),
            carbs: @(Model.CurrentUser?.CustomCarbsGrams ?? 200),
            fat: @(Model.CurrentUser?.CustomFatGrams ?? 80)
        };

        console.log('User nutrition data:', userNutrition);

        // Initialize current week to Monday
        let currentWeekStart = new Date();
        // Set to Monday of current week (0 = Sunday, so we need to adjust)
        const dayOfWeek = currentWeekStart.getDay();
        const diff = currentWeekStart.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);
        currentWeekStart.setDate(diff);

        let meals = {};
        let recipes = [];
        
        const dayNames = ['Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota', 'Niedziela'];
        const mealTypes = ['Sniadanie', 'Obiad', 'Kolacja', 'Przekaska'];
        const mealTypeNames = {
            'Sniadanie': '🌅 Śniadanie',
            'Obiad': '🌞 Obiad', 
            'Kolacja': '🌙 Kolacja',
            'Przekaska': '🍎 Przekąska'
        };
        
        let currentMealDate = null;
        let selectedRecipe = null;
        let selectedMealType = null;
        let currentTab = 'recipe';

        function generateDaysGrid() {
            const daysGrid = document.getElementById('daysGrid');
            daysGrid.innerHTML = '';
            
            const today = new Date();
            
            for (let i = 0; i < 7; i++) {
                const date = new Date(currentWeekStart);
                date.setDate(currentWeekStart.getDate() + i);
                
                const dayCard = document.createElement('div');
                dayCard.className = 'day-card';
                
                // Check if this date is today
                if (date.toDateString() === today.toDateString()) {
                    dayCard.classList.add('today');
                }
                
                const dateStr = date.toISOString().split('T')[0];
                const dayIndex = date.getDay();
                const adjustedDayIndex = dayIndex === 0 ? 6 : dayIndex - 1; // Convert Sunday (0) to 6, Monday (1) to 0, etc.
                
                dayCard.innerHTML = `
                    <div class="day-header">
                        <div class="day-name">${dayNames[adjustedDayIndex]}</div>
                        <div class="day-date">${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}</div>
                    </div>
                    <div class="day-content">
                        <button class="add-meal-btn" onclick="openMealModal('${dateStr}')">+ Dodaj posiłek</button>
                        <div class="meals-list" id="meals-${dateStr}">
                            ${renderMeals(dateStr)}
                        </div>
                    </div>
                `;
                
                daysGrid.appendChild(dayCard);
            }
        }

        function renderMeals(dateStr) {
            const dayMeals = meals[dateStr] || [];
            return dayMeals.map(meal => `
                <div class="meal-item ${meal.eaten ? 'eaten' : ''} ${meal.hasCustomNutrition ? 'custom-nutrition' : ''}">
                    <div class="meal-header">
                        <div class="meal-type">${mealTypeNames[meal.type] || meal.type}</div>
                        <div class="meal-actions">
                            <button class="meal-action-btn eaten" onclick="toggleMealEaten('${dateStr}', ${meal.id})" title="${meal.eaten ? 'Oznacz jako niezjedzone' : 'Oznacz jako zjedzone'}">
                                ${meal.eaten ? '✓' : '○'}
                            </button>
                            <button class="meal-action-btn edit" onclick="editMeal('${dateStr}', ${meal.id})" title="Edytuj">✏️</button>
                            <button class="meal-action-btn delete" onclick="deleteMeal('${dateStr}', ${meal.id})" title="Usuń">🗑️</button>
                        </div>
                    </div>
                    <div class="meal-name">${meal.recipeName || meal.customEntry}</div>
                    <div class="meal-stats">
                        <div class="meal-calories">${Math.round(meal.calories || 0)} kcal</div>
                        <div class="meal-macros">B: ${Math.round(meal.protein || 0)}g | W: ${Math.round(meal.carbs || 0)}g | T: ${Math.round(meal.fat || 0)}g</div>
                    </div>
                    ${meal.gramature && meal.gramature !== 100 ? `<div style="font-size: 0.7rem; color: #888; margin-top: 5px;">Gramatura: ${meal.gramature}g</div>` : ''}
                </div>
            `).join('');
        }

        function updateWeekDisplay() {
            const endDate = new Date(currentWeekStart);
            endDate.setDate(currentWeekStart.getDate() + 6);
            
            const options = { day: '2-digit', month: '2-digit' };
            const startStr = currentWeekStart.toLocaleDateString('pl-PL', options);
            const endStr = endDate.toLocaleDateString('pl-PL', options);
            
            document.getElementById('weekDisplay').textContent = `${startStr} - ${endStr}`;
        }

        function changeWeek(direction) {
            currentWeekStart.setDate(currentWeekStart.getDate() + (direction * 7));
            updateWeekDisplay();
            generateDaysGrid();
            loadMealsForWeek();
        }

        function openMealModal(dateStr) {
            currentMealDate = dateStr;
            const date = new Date(dateStr);
            const dayIndex = date.getDay();
            const adjustedDayIndex = dayIndex === 0 ? 6 : dayIndex - 1;
            const dayName = dayNames[adjustedDayIndex];
            const dateDisplay = `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}`;
            document.getElementById('modalDate').textContent = `${dayName}, ${dateDisplay}`;
            document.getElementById('mealModal').classList.add('show');
            loadRecipes();
            
            // Reset selections
            selectedRecipe = null;
            selectedMealType = null;
            document.querySelectorAll('.meal-type-btn').forEach(btn => btn.classList.remove('selected'));
            document.querySelectorAll('.recipe-card').forEach(card => card.classList.remove('selected'));
            
            // Reset custom meal form
            document.getElementById('customMealName').value = '';
            document.getElementById('customCalories').value = '';
            document.getElementById('customProtein').value = '';
            document.getElementById('customCarbs').value = '';
            document.getElementById('customFat').value = '';
            document.getElementById('gramatureInput').value = '100';
            document.getElementById('nutritionPreview').style.display = 'none';
        }

        function closeModal() {
            document.getElementById('mealModal').classList.remove('show');
            currentMealDate = null;
            selectedRecipe = null;
            selectedMealType = null;
            document.getElementById('customMealName').value = '';
            document.getElementById('customCalories').value = '';
            document.getElementById('customProtein').value = '';
            document.getElementById('customCarbs').value = '';
            document.getElementById('customFat').value = '';
            document.getElementById('gramatureInput').value = '100';
            document.getElementById('nutritionPreview').style.display = 'none';
            switchTab('recipe');
            
            // Clear selections
            document.querySelectorAll('.meal-type-btn').forEach(btn => btn.classList.remove('selected'));
            document.querySelectorAll('.recipe-card').forEach(card => card.classList.remove('selected'));
        }

        function switchTab(tabName) {
            currentTab = tabName;
            
            // Update tab buttons
            document.querySelectorAll('.modal-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelector(`.modal-tab:nth-child(${tabName === 'recipe' ? '1' : '2'})`).classList.add('active');
            
            // Update tab content
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            document.getElementById(tabName === 'recipe' ? 'recipeTab' : 'customTab').classList.add('active');
        }

        // Update nutrition preview when inputs change
        function updateNutritionPreview() {
            const calories = parseFloat(document.getElementById('customCalories').value) || 0;
            const protein = parseFloat(document.getElementById('customProtein').value) || 0;
            const carbs = parseFloat(document.getElementById('customCarbs').value) || 0;
            const fat = parseFloat(document.getElementById('customFat').value) || 0;
            const gramature = parseFloat(document.getElementById('gramatureInput').value) || 100;
            
            const multiplier = gramature / 100;
            
            // Show preview if any value is entered
            const preview = document.getElementById('nutritionPreview');
            if (calories > 0 || protein > 0 || carbs > 0 || fat > 0) {
                preview.style.display = 'block';
                document.getElementById('previewCalories').textContent = Math.round(calories * multiplier);
                document.getElementById('previewProtein').textContent = (protein * multiplier).toFixed(1);
                document.getElementById('previewCarbs').textContent = (carbs * multiplier).toFixed(1);
                document.getElementById('previewFat').textContent = (fat * multiplier).toFixed(1);
            } else {
                preview.style.display = 'none';
            }
        }

        // Meal type selection
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('meal-type-btn')) {
                // Remove previous selection
                document.querySelectorAll('.meal-type-btn').forEach(btn => btn.classList.remove('selected'));
                
                // Add selection to clicked button
                e.target.classList.add('selected');
                selectedMealType = e.target.dataset.type;
            }
        });

        function selectRecipe(recipeId, recipeName, calories, protein, carbs, fat) {
            selectedRecipe = { id: recipeId, name: recipeName, calories, protein, carbs, fat };
            
            // Update visual selection
            document.querySelectorAll('.recipe-card').forEach(card => {
                card.classList.remove('selected');
            });
            document.querySelector(`[data-recipe-id="${recipeId}"]`).classList.add('selected');
        }

        async function loadRecipes() {
            try {
                console.log('Loading recipes...');
                const response = await fetch('/api/recipe');
                if (response.ok) {
                    recipes = await response.json();
                    console.log('Loaded recipes:', recipes);
                    renderRecipes();
                } else {
                    console.error('Błąd podczas ładowania przepisów:', response.status);
                    document.getElementById('recipeGrid').innerHTML = '<div style="grid-column: 1/-1; text-align: center; color: #dc3545; padding: 20px;">Błąd podczas ładowania przepisów</div>';
                }
            } catch (error) {
                console.error('Błąd:', error);
                document.getElementById('recipeGrid').innerHTML = '<div style="grid-column: 1/-1; text-align: center; color: #dc3545; padding: 20px;">Błąd połączenia z serwerem</div>';
            }
        }

        function renderRecipes() {
            const recipeGrid = document.getElementById('recipeGrid');
            if (!recipes.length) {
                recipeGrid.innerHTML = '<div style="grid-column: 1/-1; text-align: center; color: #666; padding: 20px;">Brak przepisów. <a href="/Recipes/Add" style="color: #e91e63;">Dodaj pierwszy przepis</a></div>';
                return;
            }
            
            recipeGrid.innerHTML = recipes.map(recipe => {
                const gramature = parseFloat(document.getElementById('gramatureInput')?.value) || 100;
                const multiplier = gramature / 100; // przepisy są na 100g
                
                return `
                <div class="recipe-card" data-recipe-id="${recipe.id}" onclick="selectRecipe(${recipe.id}, '${recipe.name.replace(/'/g, "\\'")}', ${recipe.calories || 0}, ${recipe.protein || 0}, ${recipe.carbs || 0}, ${recipe.fat || 0})">
                    <div class="recipe-name">${recipe.name}</div>
                    <div class="recipe-stats">
                        ${Math.round((recipe.calories || 0) * multiplier)} kcal<br>
                        B: ${Math.round((recipe.protein || 0) * multiplier)}g | W: ${Math.round((recipe.carbs || 0) * multiplier)}g | T: ${Math.round((recipe.fat || 0) * multiplier)}g
                        <br><small style="color: #888;">Na ${gramature}g</small>
                    </div>
                    ${recipe.averageRating > 0 ? `
                        <div class="recipe-rating">
                            <span class="stars">${'★'.repeat(Math.round(recipe.averageRating))}</span>
                            <span class="rating-value">${recipe.averageRating.toFixed(1)}</span>
                        </div>
                    ` : ''}
                </div>
                `;
            }).join('');
        }

        async function addMeal() {
            console.log('Adding meal...');
            
            if (!currentMealDate) {
                alert('Błąd: Nie wybrano daty');
                return;
            }

            if (!selectedMealType) {
                alert('Proszę wybrać typ posiłku');
                return;
            }

            const gramature = parseFloat(document.getElementById('gramatureInput').value) || 100;

            let mealData = {
                date: currentMealDate,
                mealType: selectedMealType,
                gramature: gramature
            };

            if (currentTab === 'recipe') {
                if (!selectedRecipe) {
                    alert('Proszę wybrać przepis');
                    return;
                }
                mealData.recipeId = selectedRecipe.id;
                console.log('Adding meal with recipe:', selectedRecipe, 'gramature:', gramature);
            } else {
                const customName = document.getElementById('customMealName').value.trim();
                if (!customName) {
                    alert('Proszę wpisać nazwę posiłku');
                    return;
                }
                
                const calories = parseFloat(document.getElementById('customCalories').value) || 0;
                const protein = parseFloat(document.getElementById('customProtein').value) || 0;
                const carbs = parseFloat(document.getElementById('customCarbs').value) || 0;
                const fat = parseFloat(document.getElementById('customFat').value) || 0;

                if (calories === 0 && protein === 0 && carbs === 0 && fat === 0) {
                    alert('Proszę wpisać przynajmniej jeden makroskładnik');
                    return;
                }

                mealData.customEntry = customName;
                mealData.customCalories = calories > 0 ? calories : null;
                mealData.customProtein = protein > 0 ? protein : null;
                mealData.customCarbs = carbs > 0 ? carbs : null;
                mealData.customFat = fat > 0 ? fat : null;
                
                console.log('Adding custom meal:', customName, 'with nutrition:', {calories, protein, carbs, fat}, 'gramature:', gramature);
            }

            console.log('Meal data to send:', mealData);

            try {
                const response = await fetch('/api/mealplan', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(mealData)
                });

                console.log('Response status:', response.status);

                if (response.ok) {
                    const newMeal = await response.json();
                    console.log('Added meal response:', newMeal);
                    
                    // Calculate nutrition based on gramature
                    const multiplier = gramature / 100;
                    
                    // Add to local meals data
                    if (!meals[currentMealDate]) {
                        meals[currentMealDate] = [];
                    }
                    
                    const mealToAdd = {
                        id: newMeal.id,
                        type: selectedMealType,
                        recipeName: newMeal.recipe?.name,
                        customEntry: newMeal.customEntry,
                        calories: Math.round(newMeal.calories * multiplier),
                        protein: Math.round(newMeal.protein * multiplier),
                        carbs: Math.round(newMeal.carbs * multiplier),
                        fat: Math.round(newMeal.fat * multiplier),
                        gramature: gramature,
                        eaten: newMeal.eaten,
                        hasCustomNutrition: newMeal.hasCustomNutrition
                    };
                    
                    console.log('Adding meal to local data:', mealToAdd);
                    meals[currentMealDate].push(mealToAdd);

                    // Refresh the day's meals
                    const mealsContainer = document.getElementById(`meals-${currentMealDate}`);
                    if (mealsContainer) {
                        mealsContainer.innerHTML = renderMeals(currentMealDate);
                        console.log('Refreshed meals container for date:', currentMealDate);
                    }

                    // Update daily summary if it's today
                    const today = new Date().toISOString().split('T')[0];
                    if (currentMealDate === today) {
                        updateDailySummary();
                    }

                    closeModal();
                } else {
                    const errorData = await response.text();
                    console.error('Error response:', errorData);
                    alert(`Błąd podczas dodawania posiłku: ${errorData}`);
                }
            } catch (error) {
                console.error('Błąd:', error);
                alert('Błąd podczas dodawania posiłku');
            }
        }

        async function loadMealsForWeek() {
            try {
                console.log('Loading meals for week starting:', currentWeekStart.toISOString().split('T')[0]);
                
                const response = await fetch('/api/mealplan');
                if (response.ok) {
                    const allMeals = await response.json();
                    console.log('Loaded meals:', allMeals);
                    
                    // Clear current meals
                    meals = {};
                    
                    // Group meals by date
                    allMeals.forEach(meal => {
                        if (meal.date) {
                            const dateStr = new Date(meal.date).toISOString().split('T')[0];
                            
                            if (!meals[dateStr]) {
                                meals[dateStr] = [];
                            }
                            
                            // Calculate actual nutrition values based on gramature
                            const multiplier = (meal.gramature || 100) / 100;
                            
                            meals[dateStr].push({
                                id: meal.id,
                                type: meal.mealType,
                                recipeName: meal.recipe?.name,
                                customEntry: meal.customEntry,
                                calories: Math.round((meal.calories || 0) * multiplier),
                                protein: Math.round((meal.protein || 0) * multiplier),
                                carbs: Math.round((meal.carbs || 0) * multiplier),
                                fat: Math.round((meal.fat || 0) * multiplier),
                                gramature: meal.gramature,
                                eaten: meal.eaten,
                                hasCustomNutrition: meal.hasCustomNutrition
                            });
                        }
                    });
                    
                    console.log('Grouped meals by date:', meals);
                    
                    // Refresh the grid
                    generateDaysGrid();
                    updateDailySummary();
                } else {
                    console.error('Błąd podczas ładowania posiłków:', response.status);
                }
            } catch (error) {
                console.error('Błąd:', error);
            }
        }

        async function toggleMealEaten(dateStr, mealId) {
            try {
                const meal = meals[dateStr]?.find(m => m.id === mealId);
                if (!meal) return;

                const newEatenStatus = !meal.eaten;
                const endpoint = newEatenStatus ? 'eaten' : 'uneaten';
                
                const response = await fetch(`/api/mealplan/${mealId}/${endpoint}`, {
                    method: 'PUT'
                });

                if (response.ok) {
                    meal.eaten = newEatenStatus;
                    
                    // Refresh the day's meals
                    const mealsContainer = document.getElementById(`meals-${dateStr}`);
                    if (mealsContainer) {
                        mealsContainer.innerHTML = renderMeals(dateStr);
                    }

                    // Update daily summary if it's today
                    const today = new Date().toISOString().split('T')[0];
                    if (dateStr === today) {
                        updateDailySummary();
                    }
                } else {
                    alert('Błąd podczas aktualizacji statusu posiłku');
                }
            } catch (error) {
                console.error('Błąd:', error);
                alert('Błąd podczas aktualizacji statusu posiłku');
            }
        }

        async function deleteMeal(dateStr, mealId) {
            if (!confirm('Czy na pewno chcesz usunąć ten posiłek?')) {
                return;
            }

            try {
                const response = await fetch(`/api/mealplan/${mealId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    // Remove from local data
                    if (meals[dateStr]) {
                        meals[dateStr] = meals[dateStr].filter(m => m.id !== mealId);
                    }
                    
                    // Refresh the day's meals
                    const mealsContainer = document.getElementById(`meals-${dateStr}`);
                    if (mealsContainer) {
                        mealsContainer.innerHTML = renderMeals(dateStr);
                    }

                    // Update daily summary if it's today
                    const today = new Date().toISOString().split('T')[0];
                    if (dateStr === today) {
                        updateDailySummary();
                    }
                } else {
                    alert('Błąd podczas usuwania posiłku');
                }
            } catch (error) {
                console.error('Błąd:', error);
                alert('Błąd podczas usuwania posiłku');
            }
        }

        function editMeal(dateStr, mealId) {
            // TODO: Implement edit functionality
            alert('Funkcja edycji będzie dostępna wkrótce');
        }

        function updateDailySummary() {
            const today = new Date().toISOString().split('T')[0];
            const todayMeals = meals[today] || [];
            const eatenMeals = todayMeals.filter(meal => meal.eaten);

            let totalCalories = 0;
            let totalProtein = 0;
            let totalCarbs = 0;
            let totalFat = 0;

            eatenMeals.forEach(meal => {
                totalCalories += meal.calories || 0;
                totalProtein += meal.protein || 0;
                totalCarbs += meal.carbs || 0;
                totalFat += meal.fat || 0;
            });

            // Update summary stats
            document.getElementById('totalCalories').textContent = totalCalories;
            document.getElementById('totalProtein').textContent = `${Math.round(totalProtein)}g`;
            document.getElementById('totalCarbs').textContent = `${Math.round(totalCarbs)}g`;
            document.getElementById('totalFat').textContent = `${Math.round(totalFat)}g`;

            // Update progress bars
            const caloriesPercent = Math.min(100, (totalCalories / userNutrition.calories) * 100);
            const proteinPercent = Math.min(100, (totalProtein / userNutrition.protein) * 100);
            const carbsPercent = Math.min(100, (totalCarbs / userNutrition.carbs) * 100);
            const fatPercent = Math.min(100, (totalFat / userNutrition.fat) * 100);

            document.getElementById('caloriesBar').style.width = `${caloriesPercent}%`;
            document.getElementById('proteinBar').style.width = `${proteinPercent}%`;
            document.getElementById('carbsBar').style.width = `${carbsPercent}%`;
            document.getElementById('fatBar').style.width = `${fatPercent}%`;

            // Update progress text
            document.getElementById('caloriesProgress').textContent = `${totalCalories} / ${userNutrition.calories} kcal`;
            document.getElementById('proteinProgress').textContent = `${Math.round(totalProtein)} / ${userNutrition.protein}g`;
            document.getElementById('carbsProgress').textContent = `${Math.round(totalCarbs)} / ${userNutrition.carbs}g`;
            document.getElementById('fatProgress').textContent = `${Math.round(totalFat)} / ${userNutrition.fat}g`;
        }

        // Add event listeners for input changes
        document.addEventListener('DOMContentLoaded', function() {
            const gramatureInput = document.getElementById('gramatureInput');
            const customInputs = ['customCalories', 'customProtein', 'customCarbs', 'customFat'];
            
            if (gramatureInput) {
                gramatureInput.addEventListener('input', function() {
                    // Re-render recipes with new gramature calculations
                    if (recipes.length > 0) {
                        renderRecipes();
                    }
                    // Update nutrition preview
                    updateNutritionPreview();
                });
            }

            // Add event listeners for custom nutrition inputs
            customInputs.forEach(inputId => {
                const input = document.getElementById(inputId);
                if (input) {
                    input.addEventListener('input', updateNutritionPreview);
                }
            });
            
            // Initial preview update
            updateNutritionPreview();
        });

        // Close modal when clicking outside
        document.getElementById('mealModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });

        // Initialize
        console.log('Initializing Diet page...');
        updateWeekDisplay();
        generateDaysGrid();
        loadMealsForWeek();
    </script>
</body>
</html>