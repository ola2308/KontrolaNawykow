@page
@model KontrolaNawykow.Pages.Diet.IndexModel
@{
    ViewData["Title"] = "Dieta";
    Layout = null;
}
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dieta - KontrolaNawyków</title>
    <style>
        /* Reset and base styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f8f9fa;
            min-height: 100vh;
        }

        /* Navigation Header */
        .navigation-header {
            background: linear-gradient(135deg, #e91e63 0%, #ad1457 100%);
            padding: 0;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 100;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .nav-tabs {
            display: flex;
            padding: 0 20px;
        }

        .nav-actions {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 0 20px;
        }

        .nav-tab {
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            padding: 15px 25px;
            font-weight: 600;
            transition: all 0.3s ease;
            border-bottom: 3px solid transparent;
            font-size: 16px;
        }

        .nav-tab:hover {
            color: white;
            background: rgba(255,255,255,0.1);
        }

        .nav-tab.active {
            color: white;
            border-bottom-color: #fff;
            background: rgba(255,255,255,0.15);
        }

        .profile-link {
            color: white;
            text-decoration: none;
            padding: 8px 16px;
            border-radius: 20px;
            background: rgba(255,255,255,0.15);
            font-weight: 600;
            font-size: 14px;
            transition: all 0.3s ease;
            border: 1px solid rgba(255,255,255,0.2);
        }

        .profile-link:hover {
            background: rgba(255,255,255,0.25);
            transform: translateY(-1px);
            color: white;
            text-decoration: none;
        }

        .logout-btn {
            background: rgba(255,255,255,0.1);
            color: white;
            border: 1px solid rgba(255,255,255,0.3);
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .logout-btn:hover {
            background: rgba(255,255,255,0.2);
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        }

        /* Week Navigation */
        .week-nav {
            background: white;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .week-arrow {
            background: #e91e63;
            color: white;
            border: none;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            font-size: 1.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .week-arrow:hover {
            background: #c2185b;
            transform: scale(1.1);
        }

        .week-date {
            font-size: 1.2rem;
            font-weight: 600;
            color: #333;
            min-width: 150px;
            text-align: center;
        }

        /* Header Actions */
        .header-actions {
            background: white;
            padding: 20px;
            display: flex;
            justify-content: center;
            gap: 15px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .action-btn {
            background: #e91e63;
            color: white;
            text-decoration: none;
            padding: 12px 20px;
            border-radius: 5px;
            font-weight: 600;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
            font-size: 1rem;
        }

        .action-btn:hover {
            background: #c2185b;
            color: white;
            text-decoration: none;
            transform: translateY(-1px);
        }

        .action-btn.recipes {
            background: #28a745;
        }

        .action-btn.recipes:hover {
            background: #218838;
        }

        /* Days Grid */
        .days-container {
            padding: 20px;
        }

        .days-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 20px;
            max-width: 1400px;
            margin: 0 auto;
        }

        .day-card {
            background: white;
            border-radius: 10px;
            padding: 20px 15px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            min-height: 400px;
            border: 1px solid #e0e0e0;
        }

        .day-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        }

        .day-card.today {
            background: linear-gradient(135deg, rgba(233, 30, 99, 0.1), rgba(173, 20, 87, 0.05));
            border-color: #e91e63;
        }

        .day-header {
            text-align: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f0f0f0;
        }

        .day-name {
            font-size: 1.1rem;
            font-weight: 700;
            color: #333;
            margin-bottom: 5px;
        }

        .day-date {
            font-size: 0.9rem;
            color: #666;
        }

        .day-content {
            display: flex;
            flex-direction: column;
            height: calc(100% - 80px);
        }

        .add-meal-btn {
            background: #e91e63;
            color: white;
            border: none;
            padding: 12px 15px;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 15px;
            font-size: 0.9rem;
        }

        .add-meal-btn:hover {
            background: #c2185b;
            transform: translateY(-1px);
        }

        .meals-list {
            flex: 1;
            overflow-y: auto;
        }

        .meal-item {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 8px;
            display: flex;
            flex-direction: column;
            gap: 8px;
            transition: all 0.3s ease;
            border: 1px solid #e9ecef;
            position: relative;
        }

        .meal-item:hover {
            background: #e9ecef;
        }

        .meal-item.eaten {
            background: #d4edda;
            border-color: #c3e6cb;
        }

        .meal-item.custom-nutrition {
            border-left: 4px solid #17a2b8;
        }

        .meal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .meal-type {
            font-size: 0.8rem;
            font-weight: 600;
            color: #e91e63;
            text-transform: uppercase;
        }

        .meal-actions {
            display: flex;
            gap: 5px;
        }

        .meal-action-btn {
            background: none;
            border: none;
            cursor: pointer;
            font-size: 0.8rem;
            padding: 4px 8px;
            border-radius: 4px;
            transition: all 0.3s ease;
            opacity: 0;
        }

        .meal-item:hover .meal-action-btn {
            opacity: 1;
        }

        .meal-action-btn.view {
            background: #17a2b8;
            color: white;
        }

        .meal-action-btn.delete {
            background: #dc3545;
            color: white;
        }

        .meal-action-btn.eaten {
            background: #28a745;
            color: white;
        }

        .meal-action-btn:hover {
            transform: scale(1.1);
        }

        .meal-name {
            font-size: 0.95rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 5px;
        }

        .meal-stats {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.8rem;
            color: #666;
        }

        .meal-calories {
            font-weight: 600;
            color: #e91e63;
        }

        .meal-macros {
            font-size: 0.7rem;
            color: #888;
        }

        /* Daily Summary */
        .daily-summary {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border: 1px solid #e0e0e0;
        }

        .summary-title {
            color: #333;
            font-size: 1.4rem;
            margin-bottom: 20px;
            text-align: center;
            font-weight: 600;
        }

        .summary-stats {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }

        .summary-stat {
            text-align: center;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e9ecef;
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: #e91e63;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 0.8rem;
            color: #666;
            font-weight: 500;
        }

        .progress-section {
            margin-top: 20px;
        }

        .progress-item {
            margin-bottom: 15px;
        }

        .progress-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }

        .progress-label {
            font-weight: 600;
            color: #555;
            font-size: 0.9rem;
        }

        .progress-value {
            font-weight: 600;
            color: #333;
            font-size: 0.9rem;
        }

        .progress-bar {
            height: 12px;
            background: #f0f0f0;
            border-radius: 6px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            border-radius: 6px;
            transition: width 0.5s ease;
        }

        .progress-fill.calories {
            background: #e91e63;
        }

        .progress-fill.protein {
            background: #17a2b8;
        }

        .progress-fill.carbs {
            background: #ffc107;
        }

        .progress-fill.fat {
            background: #fd7e14;
        }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
            backdrop-filter: blur(5px);
        }

        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            border-radius: 20px;
            padding: 0;
            max-width: 900px;
            width: 95%;
            max-height: 90vh;
            overflow: hidden;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            animation: modalSlideIn 0.3s ease-out;
        }

        @@keyframes modalSlideIn {
            from {
                transform: translateY(-50px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .modal-header {
            background: linear-gradient(135deg, #e91e63, #ad1457);
            color: white;
            padding: 25px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 0;
        }

        .modal-subtitle {
            color: rgba(255,255,255,0.8);
            font-size: 0.9rem;
            margin-top: 5px;
        }

        .close-modal {
            background: none;
            border: none;
            color: white;
            font-size: 1.8rem;
            cursor: pointer;
            padding: 8px;
            border-radius: 50%;
            transition: all 0.3s ease;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .close-modal:hover {
            background: rgba(255,255,255,0.2);
        }

        .modal-body {
            padding: 30px;
            overflow-y: auto;
            max-height: calc(90vh - 200px);
        }

        /* Meal Type Selection */
        .meal-type-selection {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 12px;
            margin-bottom: 30px;
        }

        .meal-type-btn {
            padding: 15px;
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            font-weight: 600;
            color: #333;
            font-size: 0.9rem;
        }

        .meal-type-btn:hover {
            background: #e9ecef;
            transform: translateY(-2px);
        }

        .meal-type-btn.selected {
            background: #e91e63;
            color: white;
            border-color: #e91e63;
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(233, 30, 99, 0.3);
        }

        /* Modal Tabs */
        .modal-tabs {
            display: flex;
            margin-bottom: 25px;
            border-bottom: 3px solid #f0f0f0;
            background: #f8f9fa;
            border-radius: 10px 10px 0 0;
        }

        .modal-tab {
            flex: 1;
            padding: 15px 20px;
            background: none;
            border: none;
            cursor: pointer;
            font-weight: 600;
            color: #666;
            transition: all 0.3s ease;
            border-bottom: 3px solid transparent;
            border-radius: 10px 10px 0 0;
            font-size: 1rem;
        }

        .modal-tab:hover {
            background: rgba(233, 30, 99, 0.1);
            color: #e91e63;
        }

        .modal-tab.active {
            color: #e91e63;
            border-bottom-color: #e91e63;
            background: white;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* Recipe Filters */
        .recipe-filters {
            margin-bottom: 20px;
            padding: 20px;
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border-radius: 15px;
            border: 1px solid #dee2e6;
        }

        .filter-row {
            display: flex;
            gap: 15px;
            align-items: center;
            margin-bottom: 15px;
        }

        .filter-row:last-child {
            margin-bottom: 0;
        }

        /* Recipe View Modal Styles */
        .recipe-view-container {
            max-width: 100%;
        }

        .recipe-view-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 25px;
            padding-bottom: 20px;
            border-bottom: 2px solid #f0f0f0;
        }

        .recipe-view-info {
            flex: 1;
        }

        .recipe-view-name {
            font-size: 2rem;
            font-weight: 700;
            color: #333;
            margin-bottom: 10px;
            line-height: 1.2;
        }

        .recipe-view-meta {
            color: #666;
            font-size: 0.9rem;
        }

        .recipe-view-image {
            flex-shrink: 0;
            margin-left: 20px;
        }

        .recipe-view-image img {
            max-width: 200px;
            max-height: 150px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            object-fit: cover;
        }

        .recipe-view-nutrition {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
            margin-bottom: 30px;
            padding: 20px;
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border-radius: 15px;
            border: 1px solid #dee2e6;
        }

        .nutrition-card {
            background: white;
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            border: 2px solid transparent;
            transition: all 0.3s ease;
        }

        .nutrition-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.15);
        }

        .nutrition-card.calories {
            border-color: #e91e63;
        }

        .nutrition-card.protein {
            border-color: #17a2b8;
        }

        .nutrition-card.carbs {
            border-color: #ffc107;
        }

        .nutrition-card.fat {
            border-color: #fd7e14;
        }

        .nutrition-value {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .nutrition-value.calories { color: #e91e63; }
        .nutrition-value.protein { color: #17a2b8; }
        .nutrition-value.carbs { color: #ffc107; }
        .nutrition-value.fat { color: #fd7e14; }

        .nutrition-label {
            font-size: 0.9rem;
            color: #666;
            font-weight: 500;
        }

        .nutrition-note {
            text-align: center;
            color: #888;
            font-style: italic;
            margin-top: 10px;
            font-size: 0.9rem;
        }

        .recipe-view-rating {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            margin-bottom: 30px;
            padding: 15px;
            background: linear-gradient(135deg, #fff3cd, #ffeaa7);
            border-radius: 10px;
            border: 1px solid #ffc107;
        }

        .rating-stars {
            font-size: 1.5rem;
            color: #ffd700;
        }

        .rating-text {
            font-weight: 600;
            color: #856404;
        }

        .recipe-view-ingredients {
            margin-bottom: 30px;
        }

        .ingredients-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .ingredients-list {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            border: 1px solid #e9ecef;
        }

        .ingredient-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid #e9ecef;
        }

        .ingredient-item:last-child {
            border-bottom: none;
        }

        .ingredient-name {
            font-weight: 600;
            color: #333;
            display: flex;
            flex-direction: column;
            gap: 2px;
        }

        .ingredient-name small {
            font-weight: normal;
            opacity: 0.7;
        }

        .ingredient-amount {
            color: #e91e63;
            font-weight: 600;
        }

        .ingredients-note {
            margin-top: 15px;
            padding: 12px 15px;
            background: linear-gradient(135deg, #e8f5e8, #d4edda);
            border-radius: 8px;
            border-left: 4px solid #28a745;
            font-size: 0.9rem;
            color: #155724;
            text-align: center;
        }

        .ingredients-note small {
            font-size: 0.8rem;
            opacity: 0.8;
        }

        .recipe-view-instructions {
            margin-bottom: 20px;
        }

        .instructions-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .instructions-content {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            border: 1px solid #e9ecef;
            line-height: 1.6;
            color: #444;
            white-space: pre-line;
        }

        .no-instructions {
            font-style: italic;
            color: #888;
            text-align: center;
            padding: 30px;
        }

        .recipe-view-loading {
            text-align: center;
            padding: 40px;
            color: #666;
        }

        .recipe-view-error {
            text-align: center;
            padding: 40px;
            color: #dc3545;
            background: #f8d7da;
            border-radius: 10px;
            margin: 20px 0;
        }

        /* Recipe Rating Section */
        .recipe-rating-section {
            margin-top: 30px;
            padding: 25px;
            background: linear-gradient(135deg, #fff3cd, #ffeaa7);
            border-radius: 15px;
            border: 2px solid #ffc107;
        }

        .rating-section-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: #856404;
            margin-bottom: 20px;
            text-align: center;
        }

        .rating-form {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .star-rating {
            display: flex;
            justify-content: center;
            gap: 5px;
            margin-bottom: 10px;
        }

        .star {
            font-size: 2.5rem;
            color: #ddd;
            cursor: pointer;
            transition: all 0.3s ease;
            user-select: none;
        }

        .star:hover,
        .star.active {
            color: #ffd700;
            transform: scale(1.1);
        }

        .star:hover ~ .star {
            color: #ddd;
        }

        .rating-comment {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .rating-textarea {
            width: 100%;
            min-height: 100px;
            padding: 15px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            font-size: 1rem;
            font-family: inherit;
            resize: vertical;
            transition: all 0.3s ease;
            background: white;
        }

        .rating-textarea:focus {
            border-color: #ffc107;
            outline: none;
            box-shadow: 0 0 0 3px rgba(255, 193, 7, 0.2);
        }

        .rating-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
        }

        .rating-submit-btn {
            background: linear-gradient(135deg, #ffc107, #e0a800);
            color: #212529;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .rating-submit-btn:hover:not(:disabled) {
            background: linear-gradient(135deg, #e0a800, #d39e00);
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(255, 193, 7, 0.3);
        }

        .rating-submit-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .rating-help {
            color: #856404;
            font-size: 0.9rem;
            font-style: italic;
        }

        .rating-success {
            background: linear-gradient(135deg, #d4edda, #c3e6cb);
            border: 2px solid #28a745;
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            color: #155724;
            font-weight: 600;
            margin-top: 15px;
        }

        .rating-error {
            background: linear-gradient(135deg, #f8d7da, #f5c6cb);
            border: 2px solid #dc3545;
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            color: #721c24;
            font-weight: 600;
            margin-top: 15px;
        }

        .existing-rating {
            background: linear-gradient(135deg, #d1ecf1, #bee5eb);
            border: 2px solid #17a2b8;
            border-radius: 10px;
            padding: 20px;
            margin-top: 15px;
        }

        .existing-rating-title {
            font-weight: 600;
            color: #0c5460;
            margin-bottom: 10px;
            text-align: center;
        }

        .existing-rating-stars {
            text-align: center;
            font-size: 1.5rem;
            color: #ffd700;
            margin-bottom: 10px;
        }

        .existing-rating-comment {
            background: white;
            padding: 15px;
            border-radius: 8px;
            color: #444;
            font-style: italic;
            border-left: 4px solid #17a2b8;
        }

        .existing-rating-date {
            text-align: center;
            color: #0c5460;
            font-size: 0.8rem;
            margin-top: 10px;
        }

        /* Rating Prompt Modal */
        .rating-prompt-content {
            max-width: 500px;
            width: 90%;
        }

        .rating-prompt-header {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
        }

        .rating-prompt-body {
            padding: 40px 30px;
        }

        .rating-prompt-content-inner {
            text-align: center;
        }

        .rating-prompt-icon {
            font-size: 4rem;
            margin-bottom: 20px;
            animation: bounce 2s infinite;
        }

        @@keyframes bounce {
            0%, 20%, 50%, 80%, 100% {
                transform: translateY(0);
            }
            40% {
                transform: translateY(-10px);
            }
            60% {
                transform: translateY(-5px);
            }
        }

        .rating-prompt-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #333;
            margin-bottom: 15px;
        }

        .rating-prompt-text {
            font-size: 1.1rem;
            color: #666;
            margin-bottom: 30px;
            line-height: 1.5;
        }

        .rating-prompt-actions {
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin-bottom: 25px;
        }

        .rating-prompt-btn {
            padding: 15px 30px;
            border: none;
            border-radius: 25px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        .rating-prompt-btn.btn-primary {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        }

        .rating-prompt-btn.btn-primary:hover {
            background: linear-gradient(135deg, #218838, #1ea085);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4);
        }

        .rating-prompt-btn.btn-secondary {
            background: #6c757d;
            color: white;
        }

        .rating-prompt-btn.btn-secondary:hover {
            background: #5a6268;
            transform: translateY(-2px);
        }

        .rating-prompt-note {
            background: linear-gradient(135deg, #e8f5e8, #d4edda);
            border: 1px solid #c3e6cb;
            border-radius: 10px;
            padding: 15px;
            font-size: 0.9rem;
            color: #155724;
            font-style: italic;
        }
        }

        .recipe-type-tabs {
            display: flex;
            gap: 10px;
            flex: 1;
        }

        .recipe-type-tab {
            padding: 10px 20px;
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
            color: #666;
            font-size: 0.9rem;
            white-space: nowrap;
        }

        .recipe-type-tab:hover {
            background: #e9ecef;
            transform: translateY(-1px);
        }

        .recipe-type-tab.active {
            background: #e91e63;
            color: white;
            border-color: #e91e63;
            box-shadow: 0 2px 10px rgba(233, 30, 99, 0.3);
        }

        .search-container {
            flex: 2;
            position: relative;
        }

        .search-input {
            width: 100%;
            padding: 12px 45px 12px 15px;
            border: 2px solid #e9ecef;
            border-radius: 25px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: white;
        }

        .search-input:focus {
            border-color: #e91e63;
            outline: none;
            box-shadow: 0 0 0 3px rgba(233, 30, 99, 0.1);
        }

        .search-icon {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #666;
            font-size: 1.1rem;
        }

        .clear-search {
            position: absolute;
            right: 40px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: #999;
            cursor: pointer;
            font-size: 1.2rem;
            padding: 2px;
            border-radius: 50%;
            transition: all 0.3s ease;
            display: none;
        }

        .clear-search:hover {
            background: #f0f0f0;
            color: #666;
        }

        .clear-search.visible {
            display: block;
        }

        .recipe-stats-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.85rem;
            color: #666;
            margin-top: 10px;
        }

        .recipes-count {
            font-weight: 600;
            color: #e91e63;
        }

        .sort-select {
            padding: 8px 12px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            background: white;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .sort-select:focus {
            border-color: #e91e63;
            outline: none;
        }

        /* Recipe Grid */
        .recipe-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
            max-height: 400px;
            overflow-y: auto;
            padding: 10px;
            border: 1px solid #e9ecef;
            border-radius: 10px;
            background: #fafafa;
        }

        .recipe-card {
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 18px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .recipe-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #e91e63, #ad1457);
            transform: scaleX(0);
            transition: transform 0.3s ease;
        }

        .recipe-card:hover {
            border-color: #e91e63;
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(233, 30, 99, 0.2);
        }

        .recipe-card:hover::before {
            transform: scaleX(1);
        }

        .recipe-card.selected {
            border-color: #e91e63;
            background: linear-gradient(135deg, rgba(233, 30, 99, 0.1), rgba(173, 20, 87, 0.05));
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(233, 30, 99, 0.3);
        }

        .recipe-card.selected::before {
            transform: scaleX(1);
        }

        .recipe-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 12px;
        }

        .recipe-name {
            font-weight: 700;
            font-size: 1.1rem;
            color: #333;
            line-height: 1.3;
            flex: 1;
            margin-right: 10px;
        }

        .recipe-type-badge {
            background: #e91e63;
            color: white;
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 0.7rem;
            font-weight: 600;
            white-space: nowrap;
        }

        .recipe-type-badge.my-recipe {
            background: #28a745;
        }

        .recipe-stats {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 8px;
            margin-bottom: 15px;
        }

        .recipe-stat {
            background: #f8f9fa;
            padding: 8px 10px;
            border-radius: 8px;
            text-align: center;
            font-size: 0.85rem;
            border: 1px solid #e9ecef;
        }

        .stat-value {
            font-weight: 700;
            color: #e91e63;
            font-size: 1rem;
        }

        .stat-label {
            color: #666;
            font-size: 0.75rem;
            margin-top: 2px;
        }

        .recipe-macros {
            display: flex;
            justify-content: space-between;
            margin-bottom: 12px;
            font-size: 0.8rem;
        }

        .macro {
            text-align: center;
        }

        .macro-value {
            font-weight: 600;
        }

        .macro-value.protein { color: #17a2b8; }
        .macro-value.carbs { color: #ffc107; }
        .macro-value.fat { color: #fd7e14; }

        .macro-label {
            color: #888;
            font-size: 0.7rem;
        }

        .recipe-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-top: 12px;
            border-top: 1px solid #f0f0f0;
        }

        .recipe-rating {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .stars {
            color: #ffd700;
            font-size: 0.9rem;
        }

        .rating-value {
            font-weight: 600;
            color: #333;
            font-size: 0.85rem;
        }

        .gramature-info {
            color: #666;
            font-size: 0.75rem;
            font-style: italic;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
            grid-column: 1 / -1;
        }

        .empty-state-icon {
            font-size: 4rem;
            margin-bottom: 20px;
            opacity: 0.3;
        }

        .empty-state-message {
            font-size: 1.1rem;
            margin-bottom: 15px;
        }

        .empty-state-submessage {
            font-size: 0.9rem;
            color: #888;
        }

        .empty-state-link {
            color: #e91e63;
            text-decoration: none;
            font-weight: 600;
        }

        .empty-state-link:hover {
            text-decoration: underline;
        }

        /* Loading State */
        .loading-spinner {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 40px;
            grid-column: 1 / -1;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #e91e63;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Custom Meal Tab */
        .custom-meal-input {
            margin-bottom: 25px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
            font-size: 0.95rem;
        }

        .form-input {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            font-size: 1rem;
            transition: all 0.3s ease;
            box-sizing: border-box;
        }

        .form-input:focus {
            border-color: #e91e63;
            outline: none;
            box-shadow: 0 0 0 3px rgba(233, 30, 99, 0.1);
        }

        .macros-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }

        .macro-group {
            display: flex;
            flex-direction: column;
        }

        .macro-input {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            font-size: 1rem;
            transition: all 0.3s ease;
            box-sizing: border-box;
        }

        .macro-input:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(233, 30, 99, 0.1);
        }

        .macro-calories { border-color: #e91e63; }
        .macro-protein { border-color: #17a2b8; }
        .macro-carbs { border-color: #ffc107; }
        .macro-fat { border-color: #fd7e14; }

        /* Gramature Section */
        .gramature-section {
            margin-bottom: 25px;
            padding: 20px;
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border-radius: 15px;
            border: 1px solid #dee2e6;
        }

        .gramature-info {
            color: #666;
            font-size: 0.85rem;
            margin-top: 8px;
            font-style: italic;
        }

        /* Nutrition Preview */
        .nutrition-preview {
            background: linear-gradient(135deg, #e8f5e8, #d4edda);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid #c3e6cb;
            display: none;
        }

        .preview-title {
            font-weight: 600;
            color: #155724;
            margin-bottom: 15px;
            text-align: center;
            font-size: 1.1rem;
        }

        .preview-stats {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 12px;
        }

        .preview-stat {
            text-align: center;
            padding: 15px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .preview-value {
            font-size: 1.3rem;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .preview-value.calories { color: #e91e63; }
        .preview-value.protein { color: #17a2b8; }
        .preview-value.carbs { color: #ffc107; }
        .preview-value.fat { color: #fd7e14; }

        .preview-label {
            font-size: 0.8rem;
            color: #666;
            font-weight: 500;
        }

        /* Modal Actions */
        .modal-actions {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 2px solid #f0f0f0;
        }

        .btn {
            padding: 15px 30px;
            border: none;
            border-radius: 10px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #e91e63, #ad1457);
            color: white;
        }

        .btn-primary:hover {
            background: linear-gradient(135deg, #c2185b, #8e0038);
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(233, 30, 99, 0.3);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #5a6268;
            transform: translateY(-2px);
        }

        /* Responsive Design */
        @@media (max-width: 1200px) {
            .days-grid {
                grid-template-columns: repeat(4, 1fr);
            }

            .summary-stats {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @@media (max-width: 768px) {
            .navigation-header {
                flex-direction: column;
                padding: 10px 0;
            }

            .nav-tabs {
                flex-wrap: wrap;
                padding: 0 10px;
                justify-content: center;
            }

            .nav-actions {
                padding: 10px 20px 0;
                justify-content: center;
            }

            .nav-tab {
                padding: 12px 15px;
                font-size: 14px;
            }

            .days-container {
                padding: 15px 10px;
            }

            .days-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 15px;
            }

            .week-nav {
                padding: 15px;
                gap: 15px;
            }

            .week-arrow {
                width: 40px;
                height: 40px;
                font-size: 1.2rem;
            }

            .week-date {
                font-size: 1rem;
                min-width: 120px;
            }

            .summary-stats {
                grid-template-columns: 1fr;
            }

            .recipe-grid {
                grid-template-columns: 1fr;
            }

            .meal-type-selection {
                grid-template-columns: repeat(2, 1fr);
            }

            .macros-grid {
                grid-template-columns: 1fr;
            }

            .preview-stats {
                grid-template-columns: repeat(2, 1fr);
            }

            .modal-content {
                margin: 10px;
                max-height: 95vh;
            }

            .modal-body {
                padding: 20px;
            }

            .recipe-type-tabs {
                flex-direction: column;
                gap: 8px;
            }

            .filter-row {
                flex-direction: column;
                align-items: stretch;
            }
        }

        @@media (max-width: 480px) {
            .days-grid {
                grid-template-columns: 1fr;
            }

            .nav-tabs {
                flex-direction: column;
                align-items: center;
            }

            .nav-actions {
                flex-direction: column;
                gap: 10px;
            }

            .modal-actions {
                flex-direction: column;
            }

            .meal-type-selection {
                grid-template-columns: 1fr;
            }

            .header-actions {
                flex-direction: column;
            }

            .preview-stats {
                grid-template-columns: 1fr;
            }

            .recipe-stats {
                grid-template-columns: 1fr;
            }

            /* Recipe View Modal Responsive */
            .recipe-view-header {
                flex-direction: column;
                text-align: center;
            }

            .recipe-view-image {
                margin-left: 0;
                margin-top: 15px;
            }

            .recipe-view-nutrition {
                grid-template-columns: repeat(2, 1fr);
            }
        }
        /* Ingredients proportions visualization */
        .ingredients-proportions {
            margin: 20px 0;
            padding: 20px;
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border-radius: 12px;
            border: 1px solid #dee2e6;
        }

        .proportion-bar {
            height: 30px;
            background: #f0f0f0;
            border-radius: 15px;
            overflow: hidden;
            display: flex;
            margin-bottom: 15px;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
        }

        .proportion-segment {
            height: 100%;
            transition: all 0.3s ease;
            position: relative;
            min-width: 2px;
        }

        .proportion-segment:hover {
            filter: brightness(1.1);
            transform: scaleY(1.05);
        }

        .proportion-legend {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 8px;
            margin-top: 10px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 6px 10px;
            background: white;
            border-radius: 6px;
            font-size: 0.85rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .legend-color {
            width: 16px;
            height: 16px;
            border-radius: 50%;
            flex-shrink: 0;
            border: 2px solid white;
            box-shadow: 0 1px 3px rgba(0,0,0,0.2);
        }

        .legend-text {
            font-weight: 500;
            color: #333;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        /* Enhanced ingredient items */
        .ingredient-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 0;
            border-bottom: 1px solid #e9ecef;
            transition: all 0.3s ease;
        }

        .ingredient-item:last-child {
            border-bottom: none;
        }

        .ingredient-item:hover {
            background: rgba(233, 30, 99, 0.02);
            padding-left: 10px;
            padding-right: 10px;
            border-radius: 8px;
        }

        .ingredient-name {
            font-weight: 600;
            color: #333;
            display: flex;
            flex-direction: column;
            gap: 4px;
            flex: 1;
        }

        .ingredient-percentage {
            font-weight: normal;
            color: #666;
            font-size: 0.8rem;
            opacity: 0.8;
        }

        .ingredient-amount {
            color: #e91e63;
            font-weight: 700;
            background: rgba(233, 30, 99, 0.1);
            padding: 6px 12px;
            border-radius: 15px;
            font-size: 0.9rem;
            min-width: 60px;
            text-align: center;
        }

        .no-proportions {
            text-align: center;
            color: #888;
            font-style: italic;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px dashed #ddd;
        }

        /* Responsive design for proportions */
        @@media (max-width: 768px) {
            .proportion-legend {
                grid-template-columns: 1fr;
            }
            
            .legend-item {
                font-size: 0.8rem;
            }
            
            .ingredient-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 8px;
                padding: 12px 0;
            }
            
            .ingredient-amount {
                align-self: flex-end;
            }
            
            .proportion-bar {
                height: 25px;
            }
        }

        @@media (max-width: 480px) {
            .ingredients-proportions {
                margin: 15px 0;
                padding: 15px;
            }
            
            .proportion-bar {
                height: 20px;
                margin-bottom: 12px;
            }
            
            .legend-item {
                padding: 4px 8px;
                font-size: 0.75rem;
            }
            
            .legend-color {
                width: 14px;
                height: 14px;
            }
        }
    </style>
</head>
<body>
    <!-- Navigation Header -->
    <div class="navigation-header">
        <div class="nav-tabs">
            <a href="/Diet" class="nav-tab active">Dieta</a>
            <a href="/ToDo" class="nav-tab">ToDo</a>
            @if (Model.adminCheck()) {<a href="/Admin/Dashboard" class="nav-tab">Admin</a>}
            <a href="/YourDietician/Index" class="nav-tab">Twój dietetyk</a>
            <a href="/Fridge/Index" class="nav-tab">Lodówka</a>
        </div>

    <!-- Rating Prompt Modal -->
    <div class="modal" id="ratingPromptModal">
        <div class="modal-content rating-prompt-content">
            <div class="modal-header rating-prompt-header">
                <div>
                    <h2 class="modal-title">🍽️ Zjadłeś przepis!</h2>
                    <p class="modal-subtitle" id="ratingPromptSubtitle"></p>
                </div>
                <button type="button" class="close-modal" onclick="closeRatingPrompt()">×</button>
            </div>

            <div class="modal-body rating-prompt-body">
                <div class="rating-prompt-content-inner">
                    <div class="rating-prompt-icon">⭐</div>
                    <h3 class="rating-prompt-title" id="ratingPromptRecipeName">Nazwa przepisu</h3>
                    <p class="rating-prompt-text">
                        Jak Ci smakowało? Podziel się swoją opinią z innymi użytkownikami!
                    </p>
                    
                    <div class="rating-prompt-actions">
                        <button type="button" class="btn btn-primary rating-prompt-btn" onclick="openRatingFromPrompt()">
                            ⭐ Oceń przepis
                        </button>
                        <button type="button" class="btn btn-secondary rating-prompt-btn" onclick="closeRatingPrompt()">
                            🚫 Może później
                        </button>
                    </div>
                    
                    <div class="rating-prompt-note">
                        💡 Twoja ocena pomoże innym użytkownikom w wyborze przepisów
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recipe View Modal -->
    <div class="modal" id="recipeViewModal">
        <div class="modal-content">
            <div class="modal-header">
                <div>
                    <h2 class="modal-title" id="recipeViewTitle">Podgląd przepisu</h2>
                    <p class="modal-subtitle" id="recipeViewSubtitle"></p>
                </div>
                <button type="button" class="close-modal" onclick="closeRecipeViewModal()">×</button>
            </div>

            <div class="modal-body">
                <div id="recipeViewContent">
                    <!-- Recipe content will be loaded here -->
                </div>
            </div>
        </div>
    </div>
        <div class="nav-actions">
            <a href="/Profile/Index" class="profile-link">👤 Mój profil</a>
            <form method="post" action="/Account/Logout" style="display: inline;">
                <button type="submit" class="logout-btn">🚪 Wyloguj</button>
            </form>
        </div>
    </div>

    <!-- Header Actions -->
    <div class="header-actions">
        <a href="/Recipes/Search" class="action-btn recipes">🔍 Wyszukaj przepisy</a>
        <a href="/Recipes/Add" class="action-btn">➕ Dodaj przepis</a>
    </div>

    <!-- Week Navigation -->
    <div class="week-nav">
        <button class="week-arrow" onclick="changeWeek(-1)">❮</button>
        <div class="week-date" id="weekDisplay"></div>
        <button class="week-arrow" onclick="changeWeek(1)">❯</button>
    </div>

    <!-- Days Grid -->
    <div class="days-container">
        <div class="days-grid" id="daysGrid">
            <!-- Days will be generated by JavaScript -->
        </div>
    </div>

    <!-- Daily Summary -->
    <div class="daily-summary">
        <h3 class="summary-title">📊 Podsumowanie Dzisiejsze</h3>
        
        <div class="summary-stats">
            <div class="summary-stat">
                <div class="stat-value" id="totalCalories">0</div>
                <div class="stat-label">Kalorie</div>
            </div>
            <div class="summary-stat">
                <div class="stat-value" id="totalProtein">0g</div>
                <div class="stat-label">Białko</div>
            </div>
            <div class="summary-stat">
                <div class="stat-value" id="totalCarbs">0g</div>
                <div class="stat-label">Węglowodany</div>
            </div>
            <div class="summary-stat">
                <div class="stat-value" id="totalFat">0g</div>
                <div class="stat-label">Tłuszcze</div>
            </div>
        </div>

        <div class="progress-section">
            <div class="progress-item">
                <div class="progress-header">
                    <span class="progress-label">🔥 Kalorie</span>
                    <span class="progress-value" id="caloriesProgress">0 / @(Model.CurrentUser?.CustomCaloriesDeficit ?? 2000) kcal</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill calories" id="caloriesBar" style="width: 0%"></div>
                </div>
            </div>

            <div class="progress-item">
                <div class="progress-header">
                    <span class="progress-label">🥩 Białko</span>
                    <span class="progress-value" id="proteinProgress">0 / @(Model.CurrentUser?.CustomProteinGrams ?? 100)g</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill protein" id="proteinBar" style="width: 0%"></div>
                </div>
            </div>

            <div class="progress-item">
                <div class="progress-header">
                    <span class="progress-label">🍞 Węglowodany</span>
                    <span class="progress-value" id="carbsProgress">0 / @(Model.CurrentUser?.CustomCarbsGrams ?? 200)g</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill carbs" id="carbsBar" style="width: 0%"></div>
                </div>
            </div>

            <div class="progress-item">
                <div class="progress-header">
                    <span class="progress-label">🥑 Tłuszcze</span>
                    <span class="progress-value" id="fatProgress">0 / @(Model.CurrentUser?.CustomFatGrams ?? 80)g</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill fat" id="fatBar" style="width: 0%"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Meal Modal -->
    <div class="modal" id="mealModal">
        <div class="modal-content">
            <div class="modal-header">
                <div>
                    <h2 class="modal-title">Dodaj Posiłek</h2>
                    <p class="modal-subtitle" id="modalDate"></p>
                </div>
                <button type="button" class="close-modal" onclick="closeModal()">×</button>
            </div>

            <div class="modal-body">
                <!-- Meal Type Selection -->
                <div class="meal-type-selection">
                    <div class="meal-type-btn" data-type="Sniadanie">🌅 Śniadanie</div>
                    <div class="meal-type-btn" data-type="Obiad">🌞 Obiad</div>
                    <div class="meal-type-btn" data-type="Kolacja">🌙 Kolacja</div>
                    <div class="meal-type-btn" data-type="Przekaska">🍎 Przekąska</div>
                </div>

                <!-- Modal Tabs -->
                <div class="modal-tabs">
                    <button class="modal-tab active" onclick="switchTab('recipe')">🍽️ Wybierz przepis</button>
                    <button class="modal-tab" onclick="switchTab('custom')">✍️ Własny posiłek</button>
                </div>

                <!-- Recipe Tab -->
                <div class="tab-content active" id="recipeTab">
                    <!-- Recipe Filters -->
                    <div class="recipe-filters">
                        <div class="filter-row">
                            <div class="recipe-type-tabs">
                                <div class="recipe-type-tab active" data-filter="all">
                                    🌟 Wszystkie
                                </div>
                                <div class="recipe-type-tab" data-filter="my">
                                    👤 Moje przepisy
                                </div>
                                <div class="recipe-type-tab" data-filter="public">
                                    🌍 Publiczne
                                </div>
                            </div>
                            <div class="search-container">
                                <input type="text" class="search-input" id="recipeSearch" placeholder="Szukaj przepisu po nazwie...">
                                <button class="clear-search" id="clearSearch" onclick="clearSearch()">×</button>
                                <span class="search-icon">🔍</span>
                            </div>
                        </div>
                        <div class="recipe-stats-row">
                            <div class="recipes-count" id="recipesCount">Ładowanie przepisów...</div>
                            <select class="sort-select" id="sortSelect" onchange="sortRecipes()">
                                <option value="name">Sortuj po nazwie</option>
                                <option value="calories">Sortuj po kaloriach</option>
                                <option value="protein">Sortuj po białku</option>
                                <option value="rating">Sortuj po ocenie</option>
                                <option value="recent">Najnowsze</option>
                            </select>
                        </div>
                    </div>

                    <div class="recipe-grid" id="recipeGrid">
                        <div class="loading-spinner">
                            <div class="spinner"></div>
                        </div>
                    </div>
                </div>

                <!-- Custom Meal Tab -->
                <div class="tab-content" id="customTab">
                    <div class="custom-meal-input">
                        <div class="form-group">
                            <label class="form-label">Nazwa posiłku:</label>
                            <input type="text" class="form-input" id="customMealName" placeholder="Wpisz nazwę własnego posiłku...">
                        </div>

                        <div class="form-group">
                            <label class="form-label">Makroskładniki na 100g:</label>
                            <div class="macros-grid">
                                <div class="macro-group">
                                    <label class="form-label" style="margin-bottom: 5px;">🔥 Kalorie (kcal):</label>
                                    <input type="number" class="macro-input macro-calories" id="customCalories" placeholder="0" min="0" max="9999">
                                </div>
                                <div class="macro-group">
                                    <label class="form-label" style="margin-bottom: 5px;">🥩 Białko (g):</label>
                                    <input type="number" class="macro-input macro-protein" id="customProtein" placeholder="0" min="0" max="100" step="0.1">
                                </div>
                                <div class="macro-group">
                                    <label class="form-label" style="margin-bottom: 5px;">🍞 Węglowodany (g):</label>
                                    <input type="number" class="macro-input macro-carbs" id="customCarbs" placeholder="0" min="0" max="100" step="0.1">
                                </div>
                                <div class="macro-group">
                                    <label class="form-label" style="margin-bottom: 5px;">🥑 Tłuszcze (g):</label>
                                    <input type="number" class="macro-input macro-fat" id="customFat" placeholder="0" min="0" max="100" step="0.1">
                                </div>
                            </div>
                        </div>

                        <!-- Nutrition Preview -->
                        <div class="nutrition-preview" id="nutritionPreview">
                            <div class="preview-title">📊 Podgląd wartości odżywczych:</div>
                            <div class="preview-stats">
                                <div class="preview-stat">
                                    <div class="preview-value calories" id="previewCalories">0</div>
                                    <div class="preview-label">kcal</div>
                                </div>
                                <div class="preview-stat">
                                    <div class="preview-value protein" id="previewProtein">0</div>
                                    <div class="preview-label">Białko (g)</div>
                                </div>
                                <div class="preview-stat">
                                    <div class="preview-value carbs" id="previewCarbs">0</div>
                                    <div class="preview-label">Węglowodany (g)</div>
                                </div>
                                <div class="preview-stat">
                                    <div class="preview-value fat" id="previewFat">0</div>
                                    <div class="preview-label">Tłuszcze (g)</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Gramatura Section (for both tabs) -->
                <div class="gramature-section">
                    <div class="form-group">
                        <label class="form-label">Gramatura (g):</label>
                        <input type="number" class="form-input" id="gramatureInput" value="100" min="1" max="2000" placeholder="100">
                        <div class="gramature-info">Makroskładniki zostaną przeliczone na podstawie podanej gramatury</div>
                    </div>
                </div>

                <div class="modal-actions">
                    <button type="button" class="btn btn-primary" onclick="addMeal()">🍽️ Dodaj posiłek</button>
                    <button type="button" class="btn btn-secondary" onclick="closeModal()">❌ Anuluj</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Configuration from server
        const userNutrition = {
            calories: @(Model.CurrentUser?.CustomCaloriesDeficit ?? 2000),
            protein: @(Model.CurrentUser?.CustomProteinGrams ?? 100),
            carbs: @(Model.CurrentUser?.CustomCarbsGrams ?? 200),
            fat: @(Model.CurrentUser?.CustomFatGrams ?? 80)
        };

        console.log('User nutrition data:', userNutrition);

        // Initialize current week to Monday
        let currentWeekStart = new Date();
        // Set to Monday of current week (0 = Sunday, so we need to adjust)
        const dayOfWeek = currentWeekStart.getDay();
        const diff = currentWeekStart.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);
        currentWeekStart.setDate(diff);

        let meals = {};
        let recipes = [];
        let filteredRecipes = [];
        let currentUserId = @(Model.CurrentUser?.Id ?? 0);
        
        const dayNames = ['Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota', 'Niedziela'];
        const mealTypes = ['Sniadanie', 'Obiad', 'Kolacja', 'Przekaska'];
        const mealTypeNames = {
            'Sniadanie': '🌅 Śniadanie',
            'Obiad': '🌞 Obiad', 
            'Kolacja': '🌙 Kolacja',
            'Przekaska': '🍎 Przekąska'
        };
        
        console.log('Meal type names mapping:', mealTypeNames);
        
        let currentMealDate = null;
        let selectedRecipe = null;
        let selectedMealType = null;
        let currentTab = 'recipe';
        let currentFilter = 'all';
        let currentSearchTerm = '';
        let currentSort = 'name';

        function generateDaysGrid() {
            const daysGrid = document.getElementById('daysGrid');
            daysGrid.innerHTML = '';
            
            const today = new Date();
            
            for (let i = 0; i < 7; i++) {
                const date = new Date(currentWeekStart);
                date.setDate(currentWeekStart.getDate() + i);
                
                const dayCard = document.createElement('div');
                dayCard.className = 'day-card';
                
                // Check if this date is today
                if (date.toDateString() === today.toDateString()) {
                    dayCard.classList.add('today');
                }
                
                const dateStr = date.toISOString().split('T')[0];
                const dayIndex = date.getDay();
                const adjustedDayIndex = dayIndex === 0 ? 6 : dayIndex - 1; // Convert Sunday (0) to 6, Monday (1) to 0, etc.
                
                dayCard.innerHTML = `
                    <div class="day-header">
                        <div class="day-name">${dayNames[adjustedDayIndex]}</div>
                        <div class="day-date">${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}</div>
                    </div>
                    <div class="day-content">
                        <button class="add-meal-btn" onclick="openMealModal('${dateStr}')">+ Dodaj posiłek</button>
                        <div class="meals-list" id="meals-${dateStr}">
                            ${renderMeals(dateStr)}
                        </div>
                    </div>
                `;
                
                daysGrid.appendChild(dayCard);
            }
        }

        function renderMeals(dateStr) {
            const dayMeals = meals[dateStr] || [];
            console.log('Rendering meals for', dateStr, ':', dayMeals);
            
            return dayMeals.map(meal => {
                console.log('Rendering meal:', meal, 'Type:', meal.type, 'MealType name:', mealTypeNames[meal.type]);
                
                return `
                <div class="meal-item ${meal.eaten ? 'eaten' : ''} ${meal.hasCustomNutrition ? 'custom-nutrition' : ''}">
                    <div class="meal-header">
                        <div class="meal-type">${mealTypeNames[meal.type] || meal.type}</div>
                        <div class="meal-actions">
                            <button class="meal-action-btn eaten" onclick="toggleMealEaten('${dateStr}', ${meal.id})" title="${meal.eaten ? 'Oznacz jako niezjedzone' : 'Oznacz jako zjedzone'}">
                                ${meal.eaten ? '✓' : '○'}
                            </button>
                            ${meal.recipeName ? `<button class="meal-action-btn view" onclick="viewRecipe('${dateStr}', ${meal.id})" title="Zobacz przepis">👁️</button>` : ''}
                            <button class="meal-action-btn delete" onclick="deleteMeal('${dateStr}', ${meal.id})" title="Usuń">🗑️</button>
                        </div>
                    </div>
                    <div class="meal-name">${meal.recipeName || meal.customEntry}</div>
                    <div class="meal-stats">
                        <div class="meal-calories">${Math.round(meal.calories || 0)} kcal</div>
                        <div class="meal-macros">B: ${Math.round(meal.protein || 0)}g | W: ${Math.round(meal.carbs || 0)}g | T: ${Math.round(meal.fat || 0)}g</div>
                    </div>
                    ${meal.gramature && meal.gramature !== 100 ? `<div style="font-size: 0.7rem; color: #888; margin-top: 5px;">Gramatura: ${meal.gramature}g</div>` : ''}
                </div>
            `;
            }).join('');
        }

        function updateWeekDisplay() {
            const endDate = new Date(currentWeekStart);
            endDate.setDate(currentWeekStart.getDate() + 6);
            
            const options = { day: '2-digit', month: '2-digit' };
            const startStr = currentWeekStart.toLocaleDateString('pl-PL', options);
            const endStr = endDate.toLocaleDateString('pl-PL', options);
            
            document.getElementById('weekDisplay').textContent = `${startStr} - ${endStr}`;
        }

        function changeWeek(direction) {
            currentWeekStart.setDate(currentWeekStart.getDate() + (direction * 7));
            updateWeekDisplay();
            generateDaysGrid();
            loadMealsForWeek();
        }

        function openMealModal(dateStr) {
            currentMealDate = dateStr;
            console.log('=== OPENING MEAL MODAL ===');
            console.log('Input dateStr:', dateStr);
            console.log('Setting currentMealDate to:', currentMealDate);
            
            // Sprawdź czy data jest w prawidłowym formacie
            if (!/^\d{4}-\d{2}-\d{2}$/.test(dateStr)) {
                console.error('Invalid date format:', dateStr);
                return;
            }
            
            const date = new Date(dateStr + 'T12:00:00'); // Dodaj czas żeby uniknąć problemów z timezone
            console.log('Created date object:', date);
            console.log('Date toISOString:', date.toISOString());
            console.log('Date getDay():', date.getDay());
            
            const dayIndex = date.getDay();
            const adjustedDayIndex = dayIndex === 0 ? 6 : dayIndex - 1;
            const dayName = dayNames[adjustedDayIndex];
            const dateDisplay = `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}`;
            
            console.log('Date processing:', {
                dayIndex,
                adjustedDayIndex,
                dayName,
                dateDisplay
            });
            
            document.getElementById('modalDate').textContent = `${dayName}, ${dateDisplay}`;
            document.getElementById('mealModal').classList.add('show');
            
            // Load recipes if not already loaded
            if (recipes.length === 0) {
                loadRecipes();
            } else {
                filterAndRenderRecipes();
            }
            
            // Reset selections
            selectedRecipe = null;
            selectedMealType = null;
            document.querySelectorAll('.meal-type-btn').forEach(btn => btn.classList.remove('selected'));
            document.querySelectorAll('.recipe-card').forEach(card => card.classList.remove('selected'));
            
            // Reset custom meal form
            document.getElementById('customMealName').value = '';
            document.getElementById('customCalories').value = '';
            document.getElementById('customProtein').value = '';
            document.getElementById('customCarbs').value = '';
            document.getElementById('customFat').value = '';
            document.getElementById('gramatureInput').value = '100';
            document.getElementById('nutritionPreview').style.display = 'none';
        }

        function closeModal() {
            document.getElementById('mealModal').classList.remove('show');
            currentMealDate = null;
            selectedRecipe = null;
            selectedMealType = null;
            document.getElementById('customMealName').value = '';
            document.getElementById('customCalories').value = '';
            document.getElementById('customProtein').value = '';
            document.getElementById('customCarbs').value = '';
            document.getElementById('customFat').value = '';
            document.getElementById('gramatureInput').value = '100';
            document.getElementById('nutritionPreview').style.display = 'none';
            switchTab('recipe');
            
            // Clear selections
            document.querySelectorAll('.meal-type-btn').forEach(btn => btn.classList.remove('selected'));
            document.querySelectorAll('.recipe-card').forEach(card => card.classList.remove('selected'));
        }

        function switchTab(tabName) {
            currentTab = tabName;
            
            // Update tab buttons
            document.querySelectorAll('.modal-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelector(`.modal-tab:nth-child(${tabName === 'recipe' ? '1' : '2'})`).classList.add('active');
            
            // Update tab content
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            document.getElementById(tabName === 'recipe' ? 'recipeTab' : 'customTab').classList.add('active');
        }

        // Recipe filtering and searching
        function filterRecipes() {
            let filtered = [...recipes];
            
            // Apply filter
            if (currentFilter === 'my') {
                filtered = filtered.filter(recipe => recipe.userId === currentUserId);
            } else if (currentFilter === 'public') {
                filtered = filtered.filter(recipe => recipe.isPublic && recipe.userId !== currentUserId);
            }
            
            // Apply search
            if (currentSearchTerm) {
                filtered = filtered.filter(recipe => 
                    recipe.name.toLowerCase().includes(currentSearchTerm.toLowerCase())
                );
            }
            
            filteredRecipes = filtered;
            sortRecipes();
        }

        function sortRecipes() {
            const sortSelect = document.getElementById('sortSelect');
            if (!sortSelect) return;
            
            currentSort = sortSelect.value;
            console.log('Sorting by:', currentSort, 'Recipes to sort:', filteredRecipes.length);
            
            if (filteredRecipes.length === 0) return;
            
            filteredRecipes.sort((a, b) => {
                switch (currentSort) {
                    case 'name':
                        return a.name.localeCompare(b.name, 'pl');
                    case 'calories':
                        const caloriesA = parseInt(a.calories) || 0;
                        const caloriesB = parseInt(b.calories) || 0;
                        return caloriesA - caloriesB;
                    case 'protein':
                        const proteinA = parseFloat(a.protein) || 0;
                        const proteinB = parseFloat(b.protein) || 0;
                        return proteinA - proteinB;
                    case 'rating':
                        const ratingA = parseFloat(a.averageRating) || 0;
                        const ratingB = parseFloat(b.averageRating) || 0;
                        return ratingB - ratingA; // malejąco
                    case 'recent':
                        const dateA = new Date(a.createdAt || 0);
                        const dateB = new Date(b.createdAt || 0);
                        return dateB - dateA; // najnowsze pierwsze
                    default:
                        return 0;
                }
            });
            
            console.log('Sorted recipes:', filteredRecipes.map(r => ({ name: r.name, calories: r.calories, protein: r.protein })));
            renderRecipes();
        }

        function filterAndRenderRecipes() {
            filterRecipes();
        }

        function clearSearch() {
            document.getElementById('recipeSearch').value = '';
            currentSearchTerm = '';
            document.getElementById('clearSearch').classList.remove('visible');
            filterAndRenderRecipes();
        }

        // Update nutrition preview when inputs change
        function updateNutritionPreview() {
            const calories = parseFloat(document.getElementById('customCalories').value) || 0;
            const protein = parseFloat(document.getElementById('customProtein').value) || 0;
            const carbs = parseFloat(document.getElementById('customCarbs').value) || 0;
            const fat = parseFloat(document.getElementById('customFat').value) || 0;
            const gramature = parseFloat(document.getElementById('gramatureInput').value) || 100;
            
            const multiplier = gramature / 100;
            
            // Show preview if any value is entered
            const preview = document.getElementById('nutritionPreview');
            if (calories > 0 || protein > 0 || carbs > 0 || fat > 0) {
                preview.style.display = 'block';
                document.getElementById('previewCalories').textContent = Math.round(calories * multiplier);
                document.getElementById('previewProtein').textContent = (protein * multiplier).toFixed(1);
                document.getElementById('previewCarbs').textContent = (carbs * multiplier).toFixed(1);
                document.getElementById('previewFat').textContent = (fat * multiplier).toFixed(1);
            } else {
                preview.style.display = 'none';
            }
        }

        let currentRating = 0;

        // Event listeners setup
        document.addEventListener('DOMContentLoaded', function() {
            // Meal type selection
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('meal-type-btn')) {
                    // Remove previous selection
                    document.querySelectorAll('.meal-type-btn').forEach(btn => btn.classList.remove('selected'));
                    
                    // Add selection to clicked button
                    e.target.classList.add('selected');
                    selectedMealType = e.target.dataset.type;
                }
            });

            // Recipe filter tabs
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('recipe-type-tab')) {
                    // Remove previous selection
                    document.querySelectorAll('.recipe-type-tab').forEach(tab => tab.classList.remove('active'));
                    
                    // Add selection to clicked tab
                    e.target.classList.add('active');
                    currentFilter = e.target.dataset.filter;
                    filterAndRenderRecipes();
                }
            });

            // Search input
            const searchInput = document.getElementById('recipeSearch');
            const clearButton = document.getElementById('clearSearch');
            
            if (searchInput) {
                searchInput.addEventListener('input', function(e) {
                    currentSearchTerm = e.target.value.trim();
                    if (currentSearchTerm) {
                        clearButton.classList.add('visible');
                    } else {
                        clearButton.classList.remove('visible');
                    }
                    filterAndRenderRecipes();
                });
            }

            // Gramature input
            const gramatureInput = document.getElementById('gramatureInput');
            if (gramatureInput) {
                gramatureInput.addEventListener('input', function() {
                    // Re-render recipes with new gramature calculations
                    if (filteredRecipes.length > 0) {
                        renderRecipes();
                    }
                    // Update nutrition preview
                    updateNutritionPreview();
                });
            }

            // Custom nutrition inputs
            const customInputs = ['customCalories', 'customProtein', 'customCarbs', 'customFat'];
            customInputs.forEach(inputId => {
                const input = document.getElementById(inputId);
                if (input) {
                    input.addEventListener('input', updateNutritionPreview);
                }
            });

            // Sort select change event
            const sortSelect = document.getElementById('sortSelect');
            if (sortSelect) {
                sortSelect.addEventListener('change', function() {
                    console.log('Sort changed to:', this.value);
                    sortRecipes();
                });
            }

            // Star rating interactions
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('star')) {
                    const rating = parseInt(e.target.dataset.rating);
                    const recipeId = e.target.parentElement.dataset.recipeId;
                    selectStarRating(recipeId, rating);
                }
            });

            document.addEventListener('mouseover', function(e) {
                if (e.target.classList.contains('star')) {
                    const rating = parseInt(e.target.dataset.rating);
                    const stars = e.target.parentElement.querySelectorAll('.star');
                    highlightStars(stars, rating);
                }
            });

            document.addEventListener('mouseout', function(e) {
                if (e.target.classList.contains('star')) {
                    const recipeId = e.target.parentElement.dataset.recipeId;
                    const stars = e.target.parentElement.querySelectorAll('.star');
                    resetStars(stars, currentRating);
                }
            });
        });

        function selectRecipe(recipeId, recipeName, calories, protein, carbs, fat) {
            selectedRecipe = { id: recipeId, name: recipeName, calories, protein, carbs, fat };
            
            // Update visual selection
            document.querySelectorAll('.recipe-card').forEach(card => {
                card.classList.remove('selected');
            });
            document.querySelector(`[data-recipe-id="${recipeId}"]`).classList.add('selected');
        }

        async function loadRecipes() {
            try {
                console.log('Loading recipes...');
                document.getElementById('recipesCount').textContent = 'Ładowanie przepisów...';
                
                const response = await fetch('/api/recipe');
                if (response.ok) {
                    recipes = await response.json();
                    console.log('Loaded recipes:', recipes);
                    filterAndRenderRecipes();
                } else {
                    console.error('Błąd podczas ładowania przepisów:', response.status);
                    document.getElementById('recipeGrid').innerHTML = '<div class="empty-state"><div class="empty-state-icon">⚠️</div><div class="empty-state-message">Błąd podczas ładowania przepisów</div></div>';
                    document.getElementById('recipesCount').textContent = 'Błąd ładowania';
                }
            } catch (error) {
                console.error('Błąd:', error);
                document.getElementById('recipeGrid').innerHTML = '<div class="empty-state"><div class="empty-state-icon">⚠️</div><div class="empty-state-message">Błąd połączenia z serwerem</div></div>';
                document.getElementById('recipesCount').textContent = 'Błąd połączenia';
            }
        }

        function renderRecipes() {
            const recipeGrid = document.getElementById('recipeGrid');
            const recipesCount = document.getElementById('recipesCount');
            
            if (!filteredRecipes.length) {
                let emptyMessage = 'Brak przepisów.';
                let submessage = '';
                
                if (currentFilter === 'my') {
                    emptyMessage = 'Nie masz jeszcze żadnych przepisów.';
                    submessage = '<a href="/Recipes/Add" class="empty-state-link">Dodaj pierwszy przepis</a>';
                } else if (currentFilter === 'public') {
                    emptyMessage = 'Brak publicznych przepisów.';
                } else if (currentSearchTerm) {
                    emptyMessage = `Nie znaleziono przepisów dla "${currentSearchTerm}".`;
                    submessage = 'Spróbuj zmienić wyszukiwane hasło.';
                }
                
                recipeGrid.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-state-icon">🍽️</div>
                        <div class="empty-state-message">${emptyMessage}</div>
                        <div class="empty-state-submessage">${submessage}</div>
                    </div>
                `;
                recipesCount.textContent = 'Znaleziono 0 przepisów';
                return;
            }
            
            const gramature = parseFloat(document.getElementById('gramatureInput')?.value) || 100;
            const multiplier = gramature / 100;
            
            console.log('Rendering recipes:', filteredRecipes.length, 'Gramature:', gramature);
            
            recipeGrid.innerHTML = filteredRecipes.map(recipe => {
                const isMyRecipe = recipe.userId === currentUserId;
                const hasRating = recipe.averageRating && recipe.averageRating > 0;
                const starsCount = Math.round(recipe.averageRating || 0);
                const fullStars = '★'.repeat(Math.min(starsCount, 5));
                const emptyStars = '☆'.repeat(Math.max(0, 5 - starsCount));
                
                // Bezpiecznie parsuj wartości odżywcze
                const calories = parseInt(recipe.calories) || 0;
                const protein = parseFloat(recipe.protein) || 0;
                const carbs = parseFloat(recipe.carbs) || 0;
                const fat = parseFloat(recipe.fat) || 0;
                
                return `
                    <div class="recipe-card" data-recipe-id="${recipe.id}" onclick="selectRecipe(${recipe.id}, '${recipe.name.replace(/'/g, "\\'")}', ${calories}, ${protein}, ${carbs}, ${fat})">
                        <div class="recipe-header">
                            <div class="recipe-name">${recipe.name}</div>
                            <div class="recipe-type-badge ${isMyRecipe ? 'my-recipe' : ''}">${isMyRecipe ? 'Mój' : 'Publiczny'}</div>
                        </div>
                        <div class="recipe-stats">
                            <div class="recipe-stat">
                                <div class="stat-value">${Math.round(calories * multiplier)}</div>
                                <div class="stat-label">kcal</div>
                            </div>
                            <div class="recipe-stat">
                                <div class="stat-value">${gramature}g</div>
                                <div class="stat-label">porcja</div>
                            </div>
                        </div>
                        <div class="recipe-macros">
                            <div class="macro">
                                <div class="macro-value protein">${Math.round(protein * multiplier)}g</div>
                                <div class="macro-label">Białko</div>
                            </div>
                            <div class="macro">
                                <div class="macro-value carbs">${Math.round(carbs * multiplier)}g</div>
                                <div class="macro-label">Węgl.</div>
                            </div>
                            <div class="macro">
                                <div class="macro-value fat">${Math.round(fat * multiplier)}g</div>
                                <div class="macro-label">Tłuszcze</div>
                            </div>
                        </div>
                        <div class="recipe-footer">
                            <div class="recipe-rating">
                                ${hasRating ? `
                                    <span class="stars">${fullStars}${emptyStars}</span>
                                    <span class="rating-value">${recipe.averageRating.toFixed(1)}</span>
                                ` : `
                                    <span class="stars">☆☆☆☆☆</span>
                                    <span class="rating-value">Brak ocen</span>
                                `}
                            </div>
                            <div class="gramature-info">Na ${gramature}g</div>
                        </div>
                    </div>
                `;
            }).join('');
            
            recipesCount.textContent = `Znaleziono ${filteredRecipes.length} przepisów`;
            
            console.log('Recipes rendered successfully');
        }

        async function addMeal() {
            console.log('Adding meal...');
            
            if (!currentMealDate) {
                alert('Błąd: Nie wybrano daty');
                return;
            }

            if (!selectedMealType) {
                alert('Proszę wybrać typ posiłku');
                return;
            }

            // Sprawdź czy gramatura jest poprawna
            const gramatureInput = document.getElementById('gramatureInput');
            const gramature = parseFloat(gramatureInput.value);
            
            if (!gramature || gramature <= 0 || gramature > 2000) {
                alert('Proszę wpisać poprawną gramaturę (1-2000g)');
                gramatureInput.focus();
                return;
            }

            // Formatuj datę prawidłowo dla serwera (YYYY-MM-DD)
            console.log('Current meal date before formatting:', currentMealDate);
            const formattedDate = currentMealDate; // Już jest w formacie YYYY-MM-DD

            let mealData = {
                date: formattedDate,
                mealType: selectedMealType,
                gramature: gramature
            };

            console.log('Meal data being prepared:', mealData);

            if (currentTab === 'recipe') {
                if (!selectedRecipe) {
                    alert('Proszę wybrać przepis');
                    return;
                }
                mealData.recipeId = selectedRecipe.id;
                // Dla przepisów, CustomEntry powinien być pusty lub null
                mealData.customEntry = "";
                console.log('Adding meal with recipe:', selectedRecipe, 'gramature:', gramature);
            } else {
                const customName = document.getElementById('customMealName').value.trim();
                if (!customName) {
                    alert('Proszę wpisać nazwę posiłku');
                    document.getElementById('customMealName').focus();
                    return;
                }
                
                // Walidacja makroskładników
                const calories = parseFloat(document.getElementById('customCalories').value) || 0;
                const protein = parseFloat(document.getElementById('customProtein').value) || 0;
                const carbs = parseFloat(document.getElementById('customCarbs').value) || 0;
                const fat = parseFloat(document.getElementById('customFat').value) || 0;

                // Sprawdź czy wprowadzono przynajmniej jeden makroskładnik
                if (calories === 0 && protein === 0 && carbs === 0 && fat === 0) {
                    alert('Proszę wpisać przynajmniej jeden makroskładnik');
                    document.getElementById('customCalories').focus();
                    return;
                }

                // Walidacja zakresów
                if (calories < 0 || calories > 9999) {
                    alert('Kalorie muszą być między 0 a 9999');
                    document.getElementById('customCalories').focus();
                    return;
                }
                
                if (protein < 0 || protein > 100) {
                    alert('Białko musi być między 0 a 100g');
                    document.getElementById('customProtein').focus();
                    return;
                }
                
                if (carbs < 0 || carbs > 100) {
                    alert('Węglowodany muszą być między 0 a 100g');
                    document.getElementById('customCarbs').focus();
                    return;
                }
                
                if (fat < 0 || fat > 100) {
                    alert('Tłuszcze muszą być między 0 a 100g');
                    document.getElementById('customFat').focus();
                    return;
                }

                mealData.customEntry = customName;
                // Wysyłaj tylko te wartości, które są większe od 0
                if (calories > 0) mealData.customCalories = Math.round(calories);
                if (protein > 0) mealData.customProtein = Math.round(protein * 10) / 10; // 1 miejsce po przecinku
                if (carbs > 0) mealData.customCarbs = Math.round(carbs * 10) / 10;
                if (fat > 0) mealData.customFat = Math.round(fat * 10) / 10;
                
                console.log('Adding custom meal:', customName, 'with nutrition:', {calories, protein, carbs, fat}, 'gramature:', gramature);
            }

            console.log('Final meal data to send:', JSON.stringify(mealData, null, 2));

            // Zablokuj przycisk podczas wysyłania
            const addButton = document.querySelector('.btn-primary');
            const originalText = addButton.innerHTML;
            addButton.disabled = true;
            addButton.innerHTML = '⏳ Dodawanie...';

            try {
                const response = await fetch('/api/mealplan', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify(mealData)
                });

                console.log('Response status:', response.status);

                if (response.ok) {
                    const newMeal = await response.json();
                    console.log('Added meal response:', newMeal);
                    
                    // Calculate nutrition based on gramature
                    const multiplier = gramature / 100;
                    
                    // Add to local meals data
                    if (!meals[currentMealDate]) {
                        meals[currentMealDate] = [];
                    }
                    
                    const mealToAdd = {
                        id: newMeal.id,
                        type: selectedMealType,
                        recipeName: newMeal.recipe?.name,
                        customEntry: newMeal.customEntry,
                        calories: Math.round((newMeal.calories || 0) * multiplier),
                        protein: Math.round((newMeal.protein || 0) * multiplier),
                        carbs: Math.round((newMeal.carbs || 0) * multiplier),
                        fat: Math.round((newMeal.fat || 0) * multiplier),
                        gramature: gramature,
                        eaten: newMeal.eaten || false,
                        hasCustomNutrition: newMeal.hasCustomNutrition || false
                    };
                    
                    console.log('Adding meal to local data for date:', currentMealDate, 'Meal:', mealToAdd);
                    meals[currentMealDate].push(mealToAdd);

                    // Refresh the day's meals
                    const mealsContainer = document.getElementById(`meals-${currentMealDate}`);
                    if (mealsContainer) {
                        mealsContainer.innerHTML = renderMeals(currentMealDate);
                        console.log('Refreshed meals container for date:', currentMealDate);
                    }

                    // Update daily summary if it's today
                    const today = new Date().toISOString().split('T')[0];
                    if (currentMealDate === today) {
                        updateDailySummary();
                    }

                    closeModal();
                } else {
                    // Obsługa błędów z serwera
                    let errorMessage = 'Wystąpił błąd podczas dodawania posiłku';
                    
                    try {
                        const contentType = response.headers.get('content-type');
                        console.log('Response content-type:', contentType);
                        console.log('Response status:', response.status);
                        
                        if (contentType && contentType.includes('application/json')) {
                            const errorData = await response.json();
                            console.error('Error response JSON:', errorData);
                            
                            if (errorData.errors) {
                                // Błędy walidacji ModelState
                                const errors = [];
                                for (const [field, messages] of Object.entries(errorData.errors)) {
                                    console.log(`Field: ${field}, Messages:`, messages);
                                    errors.push(`${field}: ${messages.join(', ')}`);
                                }
                                errorMessage = `Błędy walidacji:\n${errors.join('\n')}`;
                            } else if (errorData.title) {
                                errorMessage = errorData.title;
                            } else if (errorData.message) {
                                errorMessage = errorData.message;
                            } else {
                                errorMessage = JSON.stringify(errorData);
                            }
                        } else {
                            const errorText = await response.text();
                            console.error('Error response text:', errorText);
                            if (errorText) {
                                errorMessage = errorText;
                            }
                        }
                    } catch (parseError) {
                        console.error('Error parsing response:', parseError);
                        errorMessage = `Błąd serwera (${response.status})`;
                    }
                    
                    console.error('Final error message:', errorMessage);
                    alert(errorMessage);
                }
            } catch (error) {
                console.error('Network error:', error);
                alert('Błąd połączenia z serwerem. Sprawdź połączenie internetowe.');
            } finally {
                // Przywróć przycisk
                addButton.disabled = false;
                addButton.innerHTML = originalText;
            }
        }

        async function loadMealsForWeek() {
            try {
                console.log('Loading meals for week starting:', currentWeekStart.toISOString().split('T')[0]);
                
                const response = await fetch('/api/mealplan');
                if (response.ok) {
                    const allMeals = await response.json();
                    console.log('Loaded meals:', allMeals);
                    
                    // Clear current meals
                    meals = {};
                    
                    // Group meals by date
                    allMeals.forEach(meal => {
                        if (meal.date) {
                            // Lepsze parsowanie daty - może być problem z timezone
                            let dateStr;
                            try {
                                // Sprawdź różne formaty daty
                                const mealDate = new Date(meal.date);
                                console.log('Original date from server:', meal.date);
                                console.log('Parsed date object:', mealDate);
                                console.log('UTC date string:', mealDate.toISOString());
                                
                                // Użyj lokalnej daty zamiast UTC
                                const year = mealDate.getFullYear();
                                const month = String(mealDate.getMonth() + 1).padStart(2, '0');
                                const day = String(mealDate.getDate()).padStart(2, '0');
                                dateStr = `${year}-${month}-${day}`;
                                
                                console.log('Final dateStr:', dateStr);
                            } catch (error) {
                                console.error('Date parsing error:', error);
                                dateStr = meal.date.split('T')[0]; // Fallback
                            }
                            
                            if (!meals[dateStr]) {
                                meals[dateStr] = [];
                            }
                            
                            // Calculate actual nutrition values based on gramature
                            const multiplier = (meal.gramature || 100) / 100;
                            
                            // Mapuj typ posiłku z liczby na tekst
                            let mealTypeName;
                            switch(meal.mealType) {
                                case 0:
                                case "Sniadanie":
                                    mealTypeName = "Sniadanie";
                                    break;
                                case 1:
                                case "Obiad":
                                    mealTypeName = "Obiad";
                                    break;
                                case 2:
                                case "Kolacja":
                                    mealTypeName = "Kolacja";
                                    break;
                                case 3:
                                case "Przekaska":
                                    mealTypeName = "Przekaska";
                                    break;
                                default:
                                    mealTypeName = meal.mealType || "Nieznany";
                            }
                            
                            const mealToAdd = {
                                id: meal.id,
                                type: mealTypeName, // Używaj zmapowanego typu
                                recipeName: meal.recipe?.name,
                                customEntry: meal.customEntry,
                                calories: Math.round((meal.calories || 0) * multiplier),
                                protein: Math.round((meal.protein || 0) * multiplier),
                                carbs: Math.round((meal.carbs || 0) * multiplier),
                                fat: Math.round((meal.fat || 0) * multiplier),
                                gramature: meal.gramature,
                                eaten: meal.eaten,
                                hasCustomNutrition: meal.hasCustomNutrition
                            };
                            
                            console.log('Loading meal from server:', {
                                originalMealType: meal.mealType,
                                mappedMealType: mealTypeName,
                                date: dateStr,
                                meal: mealToAdd
                            });
                            
                            meals[dateStr].push(mealToAdd);
                        }
                    });
                    
                    console.log('Grouped meals by date:', meals);
                    
                    // Refresh the grid
                    generateDaysGrid();
                    updateDailySummary();
                } else {
                    console.error('Błąd podczas ładowania posiłków:', response.status);
                }
            } catch (error) {
                console.error('Błąd:', error);
            }
        }

        async function toggleMealEaten(dateStr, mealId) {
            try {
                const meal = meals[dateStr]?.find(m => m.id === mealId);
                if (!meal) return;

                const newEatenStatus = !meal.eaten;
                const endpoint = newEatenStatus ? 'eaten' : 'uneaten';
                
                const response = await fetch(`/api/mealplan/${mealId}/${endpoint}`, {
                    method: 'PUT'
                });

                if (response.ok) {
                    meal.eaten = newEatenStatus;
                    
                    // Refresh the day's meals
                    const mealsContainer = document.getElementById(`meals-${dateStr}`);
                    if (mealsContainer) {
                        mealsContainer.innerHTML = renderMeals(dateStr);
                    }

                    // Update daily summary if it's today
                    const today = new Date().toISOString().split('T')[0];
                    if (dateStr === today) {
                        updateDailySummary();
                    }

                    // Jeśli posiłek został oznaczony jako zjedzony i ma przepis - pokaż opcję oceniania
                    if (newEatenStatus && meal.recipeName) {
                        setTimeout(() => {
                            showRatingPrompt(meal, dateStr, mealId);
                        }, 500); // Małe opóźnienie dla lepszego UX
                    }
                } else {
                    alert('Błąd podczas aktualizacji statusu posiłku');
                }
            } catch (error) {
                console.error('Błąd:', error);
                alert('Błąd podczas aktualizacji statusu posiłku');
            }
        }

        async function deleteMeal(dateStr, mealId) {
            if (!confirm('Czy na pewno chcesz usunąć ten posiłek?')) {
                return;
            }

            try {
                const response = await fetch(`/api/mealplan/${mealId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    // Remove from local data
                    if (meals[dateStr]) {
                        meals[dateStr] = meals[dateStr].filter(m => m.id !== mealId);
                    }
                    
                    // Refresh the day's meals
                    const mealsContainer = document.getElementById(`meals-${dateStr}`);
                    if (mealsContainer) {
                        mealsContainer.innerHTML = renderMeals(dateStr);
                    }

                    // Update daily summary if it's today
                    const today = new Date().toISOString().split('T')[0];
                    if (dateStr === today) {
                        updateDailySummary();
                    }
                } else {
                    alert('Błąd podczas usuwania posiłku');
                }
            } catch (error) {
                console.error('Błąd:', error);
                alert('Błąd podczas usuwania posiłku');
            }
        }
        async function debugRecipeAPI(recipeId) {
            console.log('=== DEBUGGING RECIPE API ===');
            console.log('Recipe ID:', recipeId);
            
            try {
                const response = await fetch(`/api/recipe/${recipeId}`);
                console.log('API Response status:', response.status);
                console.log('API Response headers:', [...response.headers.entries()]);
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('=== FULL API RESPONSE ===');
                    console.log('Recipe data:', data);
                    console.log('Recipe ingredients:', data.recipeIngredients);
                    
                    if (data.recipeIngredients) {
                        console.log('Ingredients count:', data.recipeIngredients.length);
                        data.recipeIngredients.forEach((ri, index) => {
                            console.log(`Ingredient ${index}:`, {
                                id: ri.id,
                                recipeId: ri.recipeId,
                                ingredientId: ri.ingredientId,
                                amount: ri.amount,
                                ingredient: ri.ingredient
                            });
                        });
                    } else {
                        console.warn('recipeIngredients is null or undefined');
                    }
                    
                    return data;
                } else {
                    const errorText = await response.text();
                    console.error('API Error:', errorText);
                    return null;
                }
            } catch (error) {
                console.error('API Exception:', error);
                return null;
            }
        }
        async function testRecipeAPI() {
            console.log('=== TESTING RECIPE API ===');
            
            // Test wszystkich przepisów
            try {
                const allRecipesResponse = await fetch('/api/recipe');
                if (allRecipesResponse.ok) {
                    const allRecipes = await allRecipesResponse.json();
                    console.log('All recipes:', allRecipes);
                    
                    if (allRecipes.length > 0) {
                        const firstRecipe = allRecipes[0];
                        console.log('Testing first recipe:', firstRecipe.name, 'ID:', firstRecipe.id);
                        
                        // Test szczegółów pierwszego przepisu
                        await debugRecipeAPI(firstRecipe.id);
                    }
                }
            } catch (error) {
                console.error('Test failed:', error);
            }
        }
        async function viewRecipe(dateStr, mealId) {
            try {
                console.log('=== VIEWING RECIPE FOR MEAL ===');
                console.log('Date:', dateStr, 'Meal ID:', mealId);
                
                // Znajdź posiłek w lokalnych danych
                const meal = meals[dateStr]?.find(m => m.id === mealId);
                if (!meal || !meal.recipeName) {
                    console.error('Meal or recipe name not found:', meal);
                    alert('Nie można znaleźć przepisu dla tego posiłku');
                    return;
                }

                console.log('Found meal:', meal);

                // Znajdź pełne dane przepisu w lokalnej pamięci
                let recipe = recipes.find(r => r.name === meal.recipeName);
                
                if (!recipe) {
                    console.log('Recipe not found locally, fetching all recipes from server...');
                    showRecipeViewModal(meal.recipeName, null, meal.gramature);
                    
                    const response = await fetch('/api/recipe');
                    if (response.ok) {
                        const allRecipes = await response.json();
                        recipe = allRecipes.find(r => r.name === meal.recipeName);
                        recipes = allRecipes;
                        console.log('Updated recipes cache, found recipe:', recipe?.name);
                    } else {
                        console.error('Failed to fetch recipes:', response.status);
                        showRecipeViewModal(meal.recipeName, null, meal.gramature);
                        return;
                    }
                }

                if (recipe) {
                    console.log('Found recipe, ID:', recipe.id);
                    
                    // Debug API call
                    const detailedRecipe = await debugRecipeAPI(recipe.id);
                    
                    if (detailedRecipe) {
                        showRecipeViewModal(meal.recipeName, detailedRecipe, meal.gramature);
                    } else {
                        console.log('Falling back to basic recipe data');
                        showRecipeViewModal(meal.recipeName, recipe, meal.gramature);
                    }
                } else {
                    console.error('Recipe not found:', meal.recipeName);
                    showRecipeViewModal(meal.recipeName, null, meal.gramature);
                }
            } catch (error) {
                console.error('Error in viewRecipe:', error);
                alert('Błąd podczas ładowania przepisu: ' + error.message);
            }
        }
         function createIngredientsProportionsVisualization(ingredients, totalMass) {
            console.log('=== CREATING PROPORTIONS VISUALIZATION ===');
            console.log('Ingredients:', ingredients);
            console.log('Total mass:', totalMass);
            
            if (!ingredients || ingredients.length === 0 || totalMass === 0) {
                return '<div class="no-proportions">Brak danych do wizualizacji proporcji</div>';
            }

            // Kolory dla składników
            const colors = [
                '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', 
                '#DDA0DD', '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9',
                '#F8C471', '#82E0AA', '#F1948A', '#85C1E9', '#D7BDE2'
            ];

            let proportionHtml = '<div class="ingredients-proportions">';
            proportionHtml += '<h5 style="margin-bottom: 15px; color: #333; font-weight: 600;">📊 Proporcje składników:</h5>';
            
            // Pasek proporcji
            proportionHtml += '<div class="proportion-bar">';
            
            ingredients.forEach((ingredient, index) => {
                const proportion = (ingredient.amount / totalMass) * 100;
                const color = colors[index % colors.length];
                
                proportionHtml += `
                    <div class="proportion-segment" 
                         style="width: ${proportion}%; background-color: ${color};"
                         title="${ingredient.name}: ${proportion.toFixed(1)}%">
                    </div>
                `;
            });
            
            proportionHtml += '</div>';
            
            // Legenda
            proportionHtml += '<div class="proportion-legend">';
            ingredients.forEach((ingredient, index) => {
                const proportion = (ingredient.amount / totalMass) * 100;
                const color = colors[index % colors.length];
                
                proportionHtml += `
                    <div class="legend-item">
                        <div class="legend-color" style="background-color: ${color};"></div>
                        <span class="legend-text">${ingredient.name} (${proportion.toFixed(1)}%)</span>
                    </div>
                `;
            });
            proportionHtml += '</div>';
            
            proportionHtml += '</div>';
            
            console.log('Generated proportions HTML');
            return proportionHtml;
        }

        function calculateIngredientNutrition(recipeIngredients, totalMass, targetGramature) {
            console.log('=== CALCULATING INGREDIENT NUTRITION ===');
            console.log('Recipe ingredients:', recipeIngredients);
            console.log('Total mass:', totalMass, 'Target gramature:', targetGramature);
            
            if (!recipeIngredients || recipeIngredients.length === 0 || totalMass === 0) {
                return [];
            }

            return recipeIngredients.map(ri => {
                const baseAmount = ri.amount || 0;
                const proportion = baseAmount / totalMass;
                const scaledAmount = proportion * targetGramature;
                
                const nutritionData = {
                    id: ri.ingredientId,
                    name: ri.ingredient?.name || 'Nieznany składnik',
                    baseAmount: baseAmount,
                    proportion: proportion,
                    scaledAmount: scaledAmount,
                    formattedAmount: formatUnit(scaledAmount),
                    percentageText: `${(proportion * 100).toFixed(1)}%`,
                    // Dodaj wartości odżywcze składnika jeśli dostępne
                    calories: ri.ingredient?.calories || 0,
                    protein: ri.ingredient?.protein || 0,
                    carbs: ri.ingredient?.carbs || 0,
                    fat: ri.ingredient?.fat || 0
                };
                
                console.log(`Ingredient: ${nutritionData.name}`, {
                    base: baseAmount + 'g',
                    proportion: (proportion * 100).toFixed(1) + '%',
                    scaled: scaledAmount.toFixed(1) + 'g',
                    formatted: nutritionData.formattedAmount
                });
                
                return nutritionData;
            });
        }

        function formatUnit(amount) {
            if (amount === 0) {
                return '0g';
            } else if (amount < 1) {
                return `${(amount * 1000).toFixed(0)}mg`;
            } else if (amount < 10) {
                return `${amount.toFixed(1)}g`;
            } else {
                return `${amount.toFixed(0)}g`;
            }
        }

        function debugIngredients(recipe, gramature) {
            console.log('=== INGREDIENTS DEBUG ===');
            console.log('Recipe name:', recipe.name);
            console.log('Target gramature:', gramature + 'g');
            console.log('Recipe ingredients count:', recipe.recipeIngredients?.length || 0);
            
            if (recipe.recipeIngredients && recipe.recipeIngredients.length > 0) {
                console.log('=== INGREDIENTS BREAKDOWN ===');
                
                let totalMass = 0;
                recipe.recipeIngredients.forEach((ri, index) => {
                    const amount = ri.amount || 0;
                    totalMass += amount;
                    
                    console.log(`${index + 1}. ${ri.ingredient?.name || 'Unknown'}:`, {
                        id: ri.ingredientId,
                        amount: amount + 'g',
                        ingredient: ri.ingredient
                    });
                });
                
                console.log('Total recipe mass:', totalMass + 'g');
                console.log('Scaling factor:', (gramature / totalMass).toFixed(3));
                
                if (totalMass > 0) {
                    console.log('=== SCALED AMOUNTS ===');
                    recipe.recipeIngredients.forEach((ri, index) => {
                        const baseAmount = ri.amount || 0;
                        const proportion = baseAmount / totalMass;
                        const scaledAmount = proportion * gramature;
                        
                        console.log(`${index + 1}. ${ri.ingredient?.name}:`, {
                            original: baseAmount + 'g',
                            proportion: (proportion * 100).toFixed(1) + '%',
                            scaled: scaledAmount.toFixed(1) + 'g',
                            formatted: formatUnit(scaledAmount)
                        });
                    });
                }
            } else {
                console.warn('No ingredients found in recipe!');
            }
        }

        function showRecipeViewModal(recipeName, recipe, gramature = 100) {
            console.log('=== SHOW RECIPE VIEW MODAL ===');
            console.log('Recipe name:', recipeName);
            console.log('Recipe object:', recipe);
            console.log('Gramature:', gramature);
            
            document.getElementById('recipeViewTitle').textContent = recipeName;
            document.getElementById('recipeViewSubtitle').textContent = gramature ? `Porcja: ${gramature}g` : '';
            
            const content = document.getElementById('recipeViewContent');
            
            if (!recipe) {
                content.innerHTML = `
                    <div class="recipe-view-loading">
                        <div class="spinner"></div>
                        <p>Ładowanie przepisu...</p>
                    </div>
                `;
            } else {
                // Debug ingredients
                debugIngredients(recipe, gramature);
                
                const multiplier = gramature ? gramature / 100 : 1;
                const hasRating = recipe.averageRating && recipe.averageRating > 0;
                const starsCount = Math.round(recipe.averageRating || 0);
                const fullStars = '★'.repeat(Math.min(starsCount, 5));
                const emptyStars = '☆'.repeat(Math.max(0, 5 - starsCount));
                
                // Calculate ingredients data
                let ingredientsHtml = '';
                let proportionsVisualization = '';
                
                if (recipe.recipeIngredients && recipe.recipeIngredients.length > 0) {
                    const totalMass = recipe.recipeIngredients.reduce((sum, ri) => sum + (ri.amount || 0), 0);
                    console.log('Total mass calculated:', totalMass);
                    
                    if (totalMass > 0) {
                        const ingredientsData = calculateIngredientNutrition(recipe.recipeIngredients, totalMass, gramature);
                        proportionsVisualization = createIngredientsProportionsVisualization(recipe.recipeIngredients, totalMass);
                        
                        ingredientsHtml = `
                            <div class="recipe-view-ingredients">
                                <h4 class="ingredients-title">🥕 Składniki na ${gramature}g</h4>
                                
                                ${proportionsVisualization}
                                
                                <div class="ingredients-list">
                                    ${ingredientsData.map(ingredient => `
                                        <div class="ingredient-item">
                                            <span class="ingredient-name">
                                                ${ingredient.name}
                                                <small class="ingredient-percentage">(${ingredient.percentageText})</small>
                                            </span>
                                            <span class="ingredient-amount">${ingredient.formattedAmount}</span>
                                        </div>
                                    `).join('')}
                                </div>
                                
                                <div class="ingredients-note">
                                    💡 Składniki przeliczone proporcjonalnie dla porcji <strong>${gramature}g</strong>
                                    <br><small>Przepis bazowy: ${totalMass}g składników</small>
                                </div>
                            </div>
                        `;
                    } else {
                        ingredientsHtml = `
                            <div class="recipe-view-ingredients">
                                <h4 class="ingredients-title">🥕 Składniki</h4>
                                <div class="no-instructions">Brak informacji o ilościach składników</div>
                            </div>
                        `;
                    }
                } else {
                    ingredientsHtml = `
                        <div class="recipe-view-ingredients">
                            <h4 class="ingredients-title">🥕 Składniki</h4>
                            <div class="no-instructions">Brak informacji o składnikach tego przepisu</div>
                        </div>
                    `;
                }
                
                content.innerHTML = `
                    <div class="recipe-view-container">
                        <div class="recipe-view-header">
                            <div class="recipe-view-info">
                                <h3 class="recipe-view-name">${recipe.name}</h3>
                                <div class="recipe-view-meta">
                                    ${recipe.isPublic ? '🌍 Przepis publiczny' : '👤 Twój przepis'}
                                    ${recipe.userId ? ` • Autor: ${recipe.userId === currentUserId ? 'Ty' : 'Inny użytkownik'}` : ''}
                                </div>
                            </div>
                            ${recipe.imageData ? `
                                <div class="recipe-view-image">
                                    <img src="data:image/jpeg;base64,${recipe.imageData}" alt="${recipe.name}">
                                </div>
                            ` : ''}
                        </div>

                        ${hasRating ? `
                            <div class="recipe-view-rating">
                                <span class="rating-stars">${fullStars}${emptyStars}</span>
                                <span class="rating-text">${recipe.averageRating.toFixed(1)} / 5 (${recipe.ratingCount || 0} ocen)</span>
                            </div>
                        ` : ''}

                        <div class="recipe-view-nutrition">
                            <div class="nutrition-card calories">
                                <div class="nutrition-value calories">${Math.round((recipe.calories || 0) * multiplier)}</div>
                                <div class="nutrition-label">kcal</div>
                            </div>
                            <div class="nutrition-card protein">
                                <div class="nutrition-value protein">${Math.round((recipe.protein || 0) * multiplier)}g</div>
                                <div class="nutrition-label">Białko</div>
                            </div>
                            <div class="nutrition-card carbs">
                                <div class="nutrition-value carbs">${Math.round((recipe.carbs || 0) * multiplier)}g</div>
                                <div class="nutrition-label">Węglowodany</div>
                            </div>
                            <div class="nutrition-card fat">
                                <div class="nutrition-value fat">${Math.round((recipe.fat || 0) * multiplier)}g</div>
                                <div class="nutrition-label">Tłuszcze</div>
                            </div>
                        </div>
                        <div class="nutrition-note">Wartości przeliczone na porcję <strong>${gramature}g</strong> (bazowo: 100g)</div>

                        ${ingredientsHtml}

                        <div class="recipe-view-instructions">
                            <h4 class="instructions-title">📋 Instrukcje przygotowania</h4>
                            ${recipe.instructions ? `
                                <div class="instructions-content">${recipe.instructions}</div>
                            ` : `
                                <div class="no-instructions">Brak instrukcji przygotowania</div>
                            `}
                        </div>

                        ${gramature ? `
                            <div class="recipe-rating-section">
                                <h4 class="rating-section-title">⭐ Oceń ten przepis</h4>
                                <div class="rating-form" id="ratingForm-${recipe.id}">
                                    <div class="star-rating" data-recipe-id="${recipe.id}">
                                        <span class="star" data-rating="1">☆</span>
                                        <span class="star" data-rating="2">☆</span>
                                        <span class="star" data-rating="3">☆</span>
                                        <span class="star" data-rating="4">☆</span>
                                        <span class="star" data-rating="5">☆</span>
                                    </div>
                                    <div class="rating-comment">
                                        <textarea 
                                            id="ratingComment-${recipe.id}" 
                                            class="rating-textarea" 
                                            placeholder="Podziel się swoją opinią o tym przepisie... (opcjonalne)"
                                            maxlength="500"
                                        ></textarea>
                                        <div class="rating-actions">
                                            <button 
                                                type="button" 
                                                class="btn btn-primary rating-submit-btn" 
                                                onclick="submitRating(${recipe.id})"
                                                disabled
                                            >
                                                💬 Wystaw opinię
                                            </button>
                                            <div class="rating-help">Kliknij gwiazdki aby wystawić ocenę</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        ` : ''}
                    </div>
                `;
            }
            
            document.getElementById('recipeViewModal').classList.add('show');
            
            // Check if user already rated this recipe
            if (recipe && recipe.id) {
                checkExistingRating(recipe.id);
            }
        }

        function highlightStars(stars, rating) {
            stars.forEach((star, index) => {
                if (index < rating) {
                    star.textContent = '★';
                    star.classList.add('active');
                } else {
                    star.textContent = '☆';
                    star.classList.remove('active');
                }
            });
        }

        function resetStars(stars, rating) {
            stars.forEach((star, index) => {
                if (index < rating) {
                    star.textContent = '★';
                    star.classList.add('active');
                } else {
                    star.textContent = '☆';
                    star.classList.remove('active');
                }
            });
        }

        function selectStarRating(recipeId, rating) {
            currentRating = rating;
            const stars = document.querySelector(`[data-recipe-id="${recipeId}"]`).querySelectorAll('.star');
            highlightStars(stars, rating);
            
            // Enable submit button
            const submitBtn = document.querySelector(`.rating-submit-btn[onclick="submitRating(${recipeId})"]`);
            if (submitBtn) {
                submitBtn.disabled = false;
                submitBtn.querySelector('.rating-help') && (submitBtn.querySelector('.rating-help').textContent = 'Kliknij aby wysłać opinię');
            }
        }

        async function submitRating(recipeId) {
            if (currentRating === 0) {
                alert('Proszę wybrać ocenę (gwiazdki)');
                return;
            }

            const comment = document.getElementById(`ratingComment-${recipeId}`).value.trim();
            const submitBtn = document.querySelector(`.rating-submit-btn[onclick="submitRating(${recipeId})"]`);
            
            // Disable button and show loading
            const originalText = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '⏳ Wysyłanie...';

            try {
                const response = await fetch(`/api/recipe/${recipeId}/rate`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify({
                        rating: currentRating,
                        comment: comment
                    })
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log('Rating submitted successfully:', result);
                    
                    // Show success message
                    const ratingForm = document.getElementById(`ratingForm-${recipeId}`);
                    ratingForm.innerHTML = `
                        <div class="rating-success">
                            ✅ Dziękujemy za opinię! Twoja ocena: ${currentRating}/5 ⭐
                            ${comment ? `<div style="margin-top: 10px; font-style: italic;">"${comment}"</div>` : ''}
                            <div style="margin-top: 10px; font-size: 0.9rem;">
                                Nowa średnia ocena: ${result.averageRating}/5 (${result.ratingCount} ocen)
                            </div>
                        </div>
                    `;
                    
                    // Update recipe rating in recipes array
                    const recipe = recipes.find(r => r.id === recipeId);
                    if (recipe) {
                        recipe.averageRating = result.averageRating;
                        recipe.ratingCount = result.ratingCount;
                    }
                    
                    // Reset current rating
                    currentRating = 0;
                    
                } else {
                    let errorMessage = 'Błąd podczas wysyłania opinii';
                    try {
                        const errorData = await response.json();
                        if (errorData.message) {
                            errorMessage = errorData.message;
                        }
                    } catch (e) {
                        const errorText = await response.text();
                        if (errorText) {
                            errorMessage = errorText;
                        }
                    }
                    
                    // Show error message
                    const ratingForm = document.getElementById(`ratingForm-${recipeId}`);
                    ratingForm.innerHTML += `
                        <div class="rating-error">
                            ❌ ${errorMessage}
                        </div>
                    `;
                    
                    // Restore button
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalText;
                }
            } catch (error) {
                console.error('Error submitting rating:', error);
                
                // Show error message
                const ratingForm = document.getElementById(`ratingForm-${recipeId}`);
                ratingForm.innerHTML += `
                    <div class="rating-error">
                        ❌ Błąd połączenia z serwerem
                    </div>
                `;
                
                // Restore button
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
            }
        }

        function closeRecipeViewModal() {
            document.getElementById('recipeViewModal').classList.remove('show');
            currentRating = 0; // Reset rating when closing modal
        }

        function editMeal(dateStr, mealId) {
            // Funkcja usunięta - zastąpiona przez viewRecipe
            console.log('Edit function has been replaced with view recipe');
        }

        function updateDailySummary() {
            const today = new Date().toISOString().split('T')[0];
            const todayMeals = meals[today] || [];
            const eatenMeals = todayMeals.filter(meal => meal.eaten);

            let totalCalories = 0;
            let totalProtein = 0;
            let totalCarbs = 0;
            let totalFat = 0;

            eatenMeals.forEach(meal => {
                totalCalories += meal.calories || 0;
                totalProtein += meal.protein || 0;
                totalCarbs += meal.carbs || 0;
                totalFat += meal.fat || 0;
            });

            // Update summary stats
            document.getElementById('totalCalories').textContent = totalCalories;
            document.getElementById('totalProtein').textContent = `${Math.round(totalProtein)}g`;
            document.getElementById('totalCarbs').textContent = `${Math.round(totalCarbs)}g`;
            document.getElementById('totalFat').textContent = `${Math.round(totalFat)}g`;

            // Update progress bars
            const caloriesPercent = Math.min(100, (totalCalories / userNutrition.calories) * 100);
            const proteinPercent = Math.min(100, (totalProtein / userNutrition.protein) * 100);
            const carbsPercent = Math.min(100, (totalCarbs / userNutrition.carbs) * 100);
            const fatPercent = Math.min(100, (totalFat / userNutrition.fat) * 100);

            document.getElementById('caloriesBar').style.width = `${caloriesPercent}%`;
            document.getElementById('proteinBar').style.width = `${proteinPercent}%`;
            document.getElementById('carbsBar').style.width = `${carbsPercent}%`;
            document.getElementById('fatBar').style.width = `${fatPercent}%`;

            // Update progress text
            document.getElementById('caloriesProgress').textContent = `${totalCalories} / ${userNutrition.calories} kcal`;
            document.getElementById('proteinProgress').textContent = `${Math.round(totalProtein)} / ${userNutrition.protein}g`;
            document.getElementById('carbsProgress').textContent = `${Math.round(totalCarbs)} / ${userNutrition.carbs}g`;
            document.getElementById('fatProgress').textContent = `${Math.round(totalFat)} / ${userNutrition.fat}g`;
        }
        async function checkExistingRating(recipeId) {
            try {
                const response = await fetch(`/api/recipe/${recipeId}/rating`);
                if (response.ok) {
                    const ratingData = await response.json();
                    
                    if (ratingData.userRating) {
                        // User already rated this recipe
                        const ratingForm = document.getElementById(`ratingForm-${recipeId}`);
                        if (ratingForm) {
                            const stars = '★'.repeat(ratingData.userRating) + '☆'.repeat(5 - ratingData.userRating);
                            
                            ratingForm.innerHTML = `
                                <div class="existing-rating">
                                    <div class="existing-rating-title">Twoja ocena tego przepisu:</div>
                                    <div class="existing-rating-stars">${stars}</div>
                                    ${ratingData.userComment ? `
                                        <div class="existing-rating-comment">
                                            "${ratingData.userComment}"
                                        </div>
                                    ` : ''}
                                    <div class="existing-rating-date">
                                        Średnia: ${ratingData.averageRating}/5 (${ratingData.ratingCount} ocen)
                                    </div>
                                </div>
                            `;
                        }
                    }
                } else {
                    console.log('No existing rating found or error fetching rating');
                }
            } catch (error) {
                console.error('Error checking existing rating:', error);
            }
        }

        function showRatingPrompt(meal, dateStr, mealId) {
            console.log('Showing rating prompt for meal:', meal.recipeName);
            
            document.getElementById('ratingPromptRecipeName').textContent = meal.recipeName;
            document.getElementById('ratingPromptSubtitle').textContent = `Porcja: ${meal.gramature}g`;
            
            // Store data for later use
            window.currentRatingMeal = meal;
            window.currentRatingDateStr = dateStr;
            window.currentRatingMealId = mealId;
            
            document.getElementById('ratingPromptModal').classList.add('show');
        }

        function closeRatingPrompt() {
            document.getElementById('ratingPromptModal').classList.remove('show');
            window.currentRatingMeal = null;
            window.currentRatingDateStr = null;
            window.currentRatingMealId = null;
        }

        function openRatingFromPrompt() {
            if (window.currentRatingMeal) {
                closeRatingPrompt();
                // Open the recipe view modal in rating mode
                viewRecipe(window.currentRatingDateStr, window.currentRatingMealId);
            }
        }
        // Close modal when clicking outside
        document.getElementById('mealModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });

        // Close recipe view modal when clicking outside
        document.getElementById('recipeViewModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeRecipeViewModal();
            }
        });

        // Close rating prompt when clicking outside
        document.getElementById('ratingPromptModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeRatingPrompt();
            }
        });

        // Initialize
        console.log('Initializing Diet page...');
        updateWeekDisplay();
        generateDaysGrid();
        loadMealsForWeek();
    </script>
</body>
</html>