@page
@model KontrolaNawykow.Pages.Recipes.AddModel
@{
    ViewData["Title"] = "Dodaj przepis";
}
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dodaj przepis - KontrolaNawyków</title>
    <style>
        /* Reset and base styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
        }

        /* Navigation Header */
        .navigation-header {
            background: linear-gradient(135deg, #e91e63 0%, #ad1457 100%);
            padding: 0;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 100;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .nav-tabs {
            display: flex;
            padding: 0 20px;
        }

        .nav-actions {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 0 20px;
        }

        .nav-tab {
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            padding: 15px 25px;
            font-weight: 600;
            transition: all 0.3s ease;
            border-bottom: 3px solid transparent;
            font-size: 16px;
        }

            .nav-tab:hover {
                color: white;
                background: rgba(255,255,255,0.1);
            }

        .profile-link {
            color: white;
            text-decoration: none;
            padding: 8px 16px;
            border-radius: 20px;
            background: rgba(255,255,255,0.15);
            font-weight: 600;
            font-size: 14px;
            transition: all 0.3s ease;
            border: 1px solid rgba(255,255,255,0.2);
        }

            .profile-link:hover {
                background: rgba(255,255,255,0.25);
                transform: translateY(-1px);
                color: white;
                text-decoration: none;
            }

        .logout-btn {
            background: rgba(255,255,255,0.1);
            color: white;
            border: 1px solid rgba(255,255,255,0.3);
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .logout-btn:hover {
                background: rgba(255,255,255,0.2);
                transform: translateY(-1px);
                box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            }

        /* Main Container */
        .add-recipe-container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Page Header */
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            background: white;
            padding: 25px 30px;
            border-radius: 15px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        .page-title {
            font-size: 2.2rem;
            color: #333;
            margin: 0;
            font-weight: 700;
            background: linear-gradient(135deg, #e91e63, #ad1457);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .back-button {
            background: linear-gradient(135deg, #e91e63, #ad1457);
            color: white;
            padding: 12px 24px;
            border-radius: 25px;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(233, 30, 99, 0.3);
        }

            .back-button:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(233, 30, 99, 0.4);
                color: white;
                text-decoration: none;
            }

        /* Alerts */
        .alert {
            padding: 15px 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            font-weight: 500;
            position: relative;
        }

        .alert-success {
            background: linear-gradient(135deg, #d4edda, #c3e6cb);
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .alert-danger {
            background: linear-gradient(135deg, #f8d7da, #f5c6cb);
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .alert-warning {
            background: linear-gradient(135deg, #fff3cd, #ffeaa7);
            color: #856404;
            border: 1px solid #ffeaa7;
        }

        .alert-info {
            background: linear-gradient(135deg, #d1ecf1, #bee5eb);
            color: #0c5460;
            border: 1px solid #bee5eb;
        }

        .alert-close {
            position: absolute;
            top: 10px;
            right: 15px;
            background: none;
            border: none;
            font-size: 1.2rem;
            cursor: pointer;
            opacity: 0.7;
        }

            .alert-close:hover {
                opacity: 1;
            }

        /* Form Container */
        .recipe-form-container {
            background: white;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 30px rgba(0,0,0,0.08);
            border: 1px solid rgba(233, 30, 99, 0.1);
        }

        /* Form Sections */
        .form-section {
            margin-bottom: 40px;
            padding-bottom: 30px;
            border-bottom: 2px solid #f8f9fa;
        }

            .form-section:last-of-type {
                border-bottom: none;
                margin-bottom: 0;
            }

        .section-title {
            color: #333;
            font-size: 1.4rem;
            margin-bottom: 20px;
            font-weight: 600;
            padding-bottom: 10px;
            border-bottom: 3px solid #e91e63;
            display: inline-block;
        }

        /* Form Groups */
        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
            font-size: 0.95rem;
        }

        .form-control {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: #fafafa;
        }

            .form-control:focus {
                border-color: #e91e63;
                outline: none;
                box-shadow: 0 0 0 3px rgba(233, 30, 99, 0.1);
                background: white;
            }

        .form-checkbox {
            width: auto;
            margin-right: 8px;
            transform: scale(1.2);
        }

        .form-help {
            font-size: 0.85rem;
            color: #6c757d;
            margin-top: 5px;
            font-style: italic;
        }

        .text-danger {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 5px;
            display: block;
        }

        /* File Upload */
        .file-upload-container {
            position: relative;
        }

        .file-input {
            position: absolute;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }

        .file-upload-label {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
            border: 2px dashed #e91e63;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            background: rgba(233, 30, 99, 0.05);
        }

            .file-upload-label:hover {
                background: rgba(233, 30, 99, 0.1);
                border-color: #c2185b;
            }

        .upload-icon {
            font-size: 1.5rem;
            margin-right: 10px;
        }

        .upload-text {
            font-weight: 600;
            color: #e91e63;
        }

        .image-preview {
            margin-top: 15px;
            position: relative;
            display: inline-block;
        }

            .image-preview img {
                max-width: 200px;
                max-height: 200px;
                border-radius: 10px;
                box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            }

        .remove-image {
            position: absolute;
            top: -10px;
            right: -10px;
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            cursor: pointer;
            font-size: 0.8rem;
        }

        /* Nutrition Grid */
        .nutrition-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 25px;
        }

        .nutrition-item .form-control {
            background: linear-gradient(135deg, #fafafa, #f0f0f0);
        }

        .nutrition-item:nth-child(1) .form-control:focus {
            border-color: #ff6b6b;
            box-shadow: 0 0 0 3px rgba(255, 107, 107, 0.1);
        }

        .nutrition-item:nth-child(2) .form-control:focus {
            border-color: #74b9ff;
            box-shadow: 0 0 0 3px rgba(116, 185, 255, 0.1);
        }

        .nutrition-item:nth-child(3) .form-control:focus {
            border-color: #fdcb6e;
            box-shadow: 0 0 0 3px rgba(253, 203, 110, 0.1);
        }

        .nutrition-item:nth-child(4) .form-control:focus {
            border-color: #fd79a8;
            box-shadow: 0 0 0 3px rgba(253, 121, 168, 0.1);
        }

        /* Ingredients Section */
        .ingredients-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .ingredients-search {
            flex: 1;
            margin-right: 20px;
        }

        .search-input {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            font-size: 1rem;
            background: #fafafa;
        }

            .search-input:focus {
                border-color: #e91e63;
                outline: none;
                box-shadow: 0 0 0 3px rgba(233, 30, 99, 0.1);
                background: white;
            }

        .ingredients-controls {
            display: flex;
            gap: 15px;
        }

        .btn {
            padding: 12px 20px;
            border: none;
            border-radius: 25px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9rem;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #e91e63, #ad1457);
            color: white;
        }

        .btn-secondary {
            background: linear-gradient(135deg, #6c757d, #5a6268);
            color: white;
        }

        .btn-success {
            background: linear-gradient(135deg, #28a745, #1e7e34);
            color: white;
        }

        .btn-info {
            background: linear-gradient(135deg, #17a2b8, #138496);
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }

        /* Ingredients from database */
        .database-ingredients {
            margin-bottom: 30px;
        }

        .ingredients-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 15px;
            max-height: 300px;
            overflow-y: auto;
            border: 1px solid #e9ecef;
            border-radius: 10px;
            padding: 15px;
            background: #fafafa;
        }

        .ingredient-card {
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

            .ingredient-card:hover {
                border-color: #e91e63;
                transform: translateY(-2px);
                box-shadow: 0 4px 15px rgba(233, 30, 99, 0.2);
            }

            .ingredient-card.selected {
                border-color: #e91e63;
                background: rgba(233, 30, 99, 0.1);
            }

        .ingredient-name {
            font-weight: 600;
            margin-bottom: 8px;
            color: #333;
        }

        .ingredient-nutrition {
            font-size: 0.85rem;
            color: #666;
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
            gap: 5px;
        }

        .nutrition-value {
            background: #f8f9fa;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 0.8rem;
        }

        /* Selected ingredients */
        .selected-ingredients {
            margin-bottom: 30px;
        }

        .selected-ingredient-item {
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
            display: grid;
            grid-template-columns: 2fr 150px 120px 50px;
            gap: 15px;
            align-items: center;
        }

        .selected-ingredient-info {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .selected-ingredient-name {
            font-weight: 600;
            color: #333;
        }

        .selected-ingredient-nutrition {
            font-size: 0.8rem;
            color: #666;
        }

        .amount-input {
            padding: 10px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            background: white;
            font-size: 0.95rem;
            text-align: center;
        }

            .amount-input:focus {
                border-color: #28a745;
                outline: none;
                box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.1);
            }

        .calculated-nutrition {
            font-size: 0.8rem;
            color: #28a745;
            text-align: center;
            font-weight: 600;
        }

        .remove-ingredient-btn {
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .remove-ingredient-btn:hover {
                background: #c82333;
                transform: scale(1.1);
            }

        /* Calculated totals */
        .calculated-totals {
            background: linear-gradient(135deg, #e8f5e8, #d4edda);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid #c3e6cb;
        }

        .totals-title {
            font-weight: 600;
            color: #155724;
            margin-bottom: 15px;
            text-align: center;
        }

        .totals-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
        }

        .total-item {
            text-align: center;
            background: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .total-value {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 5px;
        }

            .total-value.calories {
                color: #e91e63;
            }

            .total-value.protein {
                color: #17a2b8;
            }

            .total-value.carbs {
                color: #ffc107;
            }

            .total-value.fat {
                color: #fd7e14;
            }

        .total-label {
            font-size: 0.8rem;
            color: #666;
            font-weight: 500;
        }

        .auto-fill-btn {
            background: linear-gradient(135deg, #28a745, #1e7e34);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 15px;
            display: block;
            margin-left: auto;
            margin-right: auto;
        }

            .auto-fill-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
            }

        /* Instructions */
        .instructions-textarea {
            min-height: 150px;
            resize: vertical;
            font-family: inherit;
            line-height: 1.6;
        }

        /* Form Actions */
        .form-actions {
            display: flex;
            gap: 20px;
            justify-content: center;
            margin-top: 40px;
            padding-top: 30px;
            border-top: 2px solid #f8f9fa;
        }

        .submit-btn {
            background: linear-gradient(135deg, #e91e63, #ad1457);
            color: white;
            border: none;
            padding: 15px 40px;
            border-radius: 30px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(233, 30, 99, 0.3);
        }

            .submit-btn:hover {
                transform: translateY(-3px);
                box-shadow: 0 8px 25px rgba(233, 30, 99, 0.4);
            }

        .cancel-btn {
            background: #6c757d;
            color: white;
            padding: 15px 40px;
            border-radius: 30px;
            text-decoration: none;
            font-size: 1.1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-block;
        }

            .cancel-btn:hover {
                background: #5a6268;
                transform: translateY(-3px);
                color: white;
                text-decoration: none;
            }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
            backdrop-filter: blur(5px);
        }

            .modal.show {
                display: flex;
                align-items: center;
                justify-content: center;
            }

        .modal-content {
            background: white;
            border-radius: 20px;
            padding: 0;
            max-width: 700px;
            width: 90%;
            max-height: 80vh;
            overflow: hidden;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            animation: modalSlideIn 0.3s ease-out;
        }

        @@keyframes modalSlideIn {
            from {
                transform: translateY(-50px);
                opacity: 0;
            }

            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .modal-header {
            background: linear-gradient(135deg, #e91e63, #ad1457);
            color: white;
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 1.4rem;
            font-weight: 600;
            margin: 0;
        }

        .close-modal {
            background: none;
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            padding: 5px;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

            .close-modal:hover {
                background: rgba(255,255,255,0.2);
            }

        .modal-body {
            padding: 30px;
            overflow-y: auto;
            max-height: calc(80vh - 140px);
        }

        .modal-actions {
            padding: 20px 30px;
            background: #f8f9fa;
            display: flex;
            gap: 15px;
            justify-content: center;
            border-top: 1px solid #e9ecef;
        }

        /* Empty state */
        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: #666;
            font-style: italic;
        }

        .empty-state-icon {
            font-size: 3rem;
            margin-bottom: 15px;
            opacity: 0.5;
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .navigation-header {
                flex-direction: column;
                padding: 10px 0;
            }

            .nav-tabs {
                flex-wrap: wrap;
                padding: 0 10px;
                justify-content: center;
            }

            .nav-actions {
                padding: 10px 20px 0;
                justify-content: center;
            }

            .nav-tab {
                padding: 12px 15px;
                font-size: 14px;
            }

            .add-recipe-container {
                padding: 15px 10px;
            }

            .page-header {
                flex-direction: column;
                gap: 15px;
                text-align: center;
            }

            .page-title {
                font-size: 1.8rem;
            }

            .recipe-form-container {
                padding: 20px;
            }

            .nutrition-grid {
                grid-template-columns: repeat(2, 1fr);
            }

            .ingredients-header {
                flex-direction: column;
                gap: 15px;
            }

            .ingredients-search {
                margin-right: 0;
            }

            .ingredients-controls {
                justify-content: center;
                flex-wrap: wrap;
            }

            .selected-ingredient-item {
                grid-template-columns: 1fr;
                text-align: center;
                gap: 10px;
            }

            .totals-grid {
                grid-template-columns: repeat(2, 1fr);
            }

            .form-actions {
                flex-direction: column;
            }
        }

        @@media (max-width: 480px) {
            .nutrition-grid {
                grid-template-columns: 1fr;
            }

            .ingredients-grid {
                grid-template-columns: 1fr;
            }

            .totals-grid {
                grid-template-columns: 1fr;
            }

            .nav-tabs {
                flex-direction: column;
                align-items: center;
            }

            .nav-actions {
                flex-direction: column;
                gap: 10px;
            }

            .ingredients-controls {
                flex-direction: column;
            }
        }

        /* Loading states */
        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        .spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #e91e63;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }
    </style>
</head>
<body>
    <!-- Navigation Header -->
    <div class="navigation-header">
        <div class="nav-tabs">
            <a href="/Diet" class="nav-tab">Dieta</a>
            <a href="/ToDo" class="nav-tab">ToDo</a>
            <a href="/Admin" class="nav-tab">Admin</a>
            <a href="/Dietitian" class="nav-tab">Twój dietetyk</a>
        </div>
        <div class="nav-actions">
            <a href="/Profile/Index" class="profile-link">👤 Mój profil</a>
            <form method="post" action="/Account/Logout" style="display: inline;">
                <button type="submit" class="logout-btn">🚪 Wyloguj</button>
            </form>
        </div>
    </div>

    <!-- Main Container -->
    <div class="add-recipe-container">
        <!-- Page Header -->
        <div class="page-header">
            <h1 class="page-title">Dodaj nowy przepis</h1>
            <a href="/Diet" class="back-button">Powrót do diety</a>
        </div>

        <!-- Alerts Container -->
        <div id="alertsContainer">
            @if (!string.IsNullOrEmpty(Model.SuccessMessage))
            {
                <div class="alert alert-success">
                    @Model.SuccessMessage
                    <button type="button" class="alert-close" onclick="this.parentElement.remove()">×</button>
                </div>
            }
            @if (!string.IsNullOrEmpty(Model.ErrorMessage))
            {
                <div class="alert alert-danger">
                    @Model.ErrorMessage
                    <button type="button" class="alert-close" onclick="this.parentElement.remove()">×</button>
                </div>
            }
        </div>

        <!-- Recipe Form -->
        <div class="recipe-form-container">
            <form id="recipeForm" enctype="multipart/form-data">
                <!-- Basic Information Section -->
                <div class="form-section">
                    <h2 class="section-title">📝 Podstawowe informacje</h2>

                    <div class="form-group">
                        <label for="recipeName" class="form-label">Nazwa przepisu *</label>
                        <input type="text" id="recipeName" name="recipeName" class="form-control" required placeholder="np. Spaghetti Bolognese">
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label for="recipeImage" class="form-label">Zdjęcie przepisu</label>
                        <div class="file-upload-container">
                            <input type="file" id="recipeImage" name="recipeImage" class="file-input" accept="image/*">
                            <label for="recipeImage" class="file-upload-label">
                                <span class="upload-icon">📸</span>
                                <span class="upload-text">Wybierz zdjęcie</span>
                            </label>
                            <div class="image-preview" id="imagePreview" style="display: none;">
                                <img id="previewImg" src="" alt="Podgląd">
                                <button type="button" class="remove-image" onclick="removeImage()">✕</button>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">
                            <input type="checkbox" id="isPublicCheckbox" name="isPublic" class="form-checkbox">
                            Udostępnij przepis publicznie
                        </label>
                        <div class="form-help">Inni użytkownicy będą mogli korzystać z tego przepisu</div>
                    </div>
                </div>

                <!-- Nutrition Information Section -->
                <div class="form-section">
                    <h2 class="section-title">🍎 Wartości odżywcze (na 100g)</h2>

                    <div class="nutrition-grid">
                        <div class="nutrition-item">
                            <label for="calories" class="form-label">Kalorie (kcal) *</label>
                            <input type="number" id="calories" name="calories" class="form-control" required min="0" max="9999" placeholder="300">
                            <span asp-validation-for="Calories" class="text-danger"></span>
                        </div>

                        <div class="nutrition-item">
                            <label for="protein" class="form-label">Białko (g) *</label>
                            <input type="number" id="protein" name="protein" class="form-control" required min="0" max="100" step="0.1" placeholder="15.5">
                            <span asp-validation-for="Protein" class="text-danger"></span>
                        </div>

                        <div class="nutrition-item">
                            <label for="carbs" class="form-label">Węglowodany (g) *</label>
                            <input type="number" id="carbs" name="carbs" class="form-control" required min="0" max="100" step="0.1" placeholder="45.2">
                            <span asp-validation-for="Carbs" class="text-danger"></span>
                        </div>

                        <div class="nutrition-item">
                            <label for="fat" class="form-label">Tłuszcze (g) *</label>
                            <input type="number" id="fat" name="fat" class="form-control" required min="0" max="100" step="0.1" placeholder="8.7">
                            <span asp-validation-for="Fat" class="text-danger"></span>
                        </div>
                    </div>
                </div>

                <!-- Ingredients Section -->
                <div class="form-section">
                    <h2 class="section-title">🥕 Składniki</h2>

                    <div class="ingredients-header">
                        <div class="ingredients-search">
                            <input type="text" id="ingredientSearch" class="search-input" placeholder="Szukaj składnika...">
                        </div>
                        <div class="ingredients-controls">
                            <button type="button" class="btn btn-primary" onclick="openIngredientModal()">➕ Dodaj nowy składnik</button>
                        </div>
                    </div>

                    <div class="database-ingredients">
                        <h3>Składniki z bazy danych:</h3>
                        <div class="ingredients-grid" id="ingredientsGrid">
                            <!-- Składniki będą załadowane przez JavaScript -->
                        </div>
                    </div>

                    <div class="selected-ingredients">
                        <h3>Wybrane składniki:</h3>
                        <div id="selectedIngredientsContainer">
                            <div class="empty-state">
                                <div class="empty-state-icon">🥄</div>
                                <div>Nie wybrano jeszcze żadnych składników</div>
                            </div>
                        </div>
                    </div>

                    <div class="calculated-totals" id="calculatedTotals" style="display: none;">
                        <div class="totals-title">Obliczone wartości odżywcze (na 100g):</div>
                        <div class="totals-grid">
                            <div class="total-item">
                                <div class="total-value calories" id="totalCalories">0</div>
                                <div class="total-label">kcal</div>
                            </div>
                            <div class="total-item">
                                <div class="total-value protein" id="totalProtein">0</div>
                                <div class="total-label">białko (g)</div>
                            </div>
                            <div class="total-item">
                                <div class="total-value carbs" id="totalCarbs">0</div>
                                <div class="total-label">węgl. (g)</div>
                            </div>
                            <div class="total-item">
                                <div class="total-value fat" id="totalFat">0</div>
                                <div class="total-label">tłuszcze (g)</div>
                            </div>
                        </div>
                        <button type="button" class="auto-fill-btn" onclick="autoFillNutrition()">
                            🔄 Wypełnij automatycznie
                        </button>
                    </div>
                </div>

                <!-- Instructions Section -->
                <div class="form-section">
                    <h2 class="section-title">📋 Instrukcje przygotowania</h2>

                    <div class="form-group">
                        <textarea id="instructions" name="instructions" class="form-control instructions-textarea" rows="8" placeholder="Opisz krok po kroku jak przygotować ten przepis...&#10;&#10;1. Przygotuj składniki...&#10;2. Rozgrzej piekarnik do 180°C...&#10;3. ..."></textarea>
                        <span asp-validation-for="Instructions" class="text-danger"></span>
                    </div>
                </div>

                <!-- Submit Section -->
                <div class="form-actions">
                    <button type="submit" class="submit-btn">💾 Zapisz przepis</button>
                    <a href="/Diet" class="cancel-btn">❌ Anuluj</a>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal for Adding New Ingredient -->
    <div class="modal" id="ingredientModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Dodaj nowy składnik</h2>
                <button type="button" class="close-modal" onclick="closeIngredientModal()">✕</button>
            </div>

            <div class="modal-body">
                <form id="ingredientForm">
                    <div class="form-group">
                        <label class="form-label">Nazwa składnika *</label>
                        <input type="text" id="newIngredientName" class="form-control" required placeholder="np. Kurczak pierś">
                    </div>

                    <div class="form-group">
                        <label class="form-label">Wartości odżywcze na 100g:</label>
                        <div class="nutrition-grid">
                            <div class="nutrition-item">
                                <label for="newIngredientCalories" class="form-label">Kalorie (kcal) *</label>
                                <input type="number" id="newIngredientCalories" class="form-control" required min="0" max="9999" placeholder="165">
                            </div>
                            <div class="nutrition-item">
                                <label for="newIngredientProtein" class="form-label">Białko (g) *</label>
                                <input type="number" id="newIngredientProtein" class="form-control" required min="0" max="100" step="0.1" placeholder="31.0">
                            </div>
                            <div class="nutrition-item">
                                <label for="newIngredientCarbs" class="form-label">Węglowodany (g) *</label>
                                <input type="number" id="newIngredientCarbs" class="form-control" required min="0" max="100" step="0.1" placeholder="0.0">
                            </div>
                            <div class="nutrition-item">
                                <label for="newIngredientFat" class="form-label">Tłuszcze (g) *</label>
                                <input type="number" id="newIngredientFat" class="form-control" required min="0" max="100" step="0.1" placeholder="3.6">
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">
                            <input type="checkbox" id="addToDatabase" class="form-checkbox" checked>
                            Dodaj składnik do bazy danych
                        </label>
                        <div class="form-help">Składnik będzie dostępny dla wszystkich użytkowników</div>
                    </div>
                </form>
            </div>

            <div class="modal-actions">
                <button type="button" class="btn btn-primary" onclick="saveNewIngredient()">💾 Zapisz składnik</button>
                <button type="button" class="btn btn-secondary" onclick="closeIngredientModal()">❌ Anuluj</button>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let ingredients = [];
        let selectedIngredients = [];
        let calculatedNutrition = { calories: 0, protein: 0, carbs: 0, fat: 0 };

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function () {
            console.log('Recipe Add page loaded');

            // Setup image preview
            setupImagePreview();

            // Setup ingredient search
            setupIngredientSearch();

            // Setup form submission
            setupFormSubmission();

            // Load ingredients from database
            loadIngredients();
        });

        function setupImagePreview() {
            const imageInput = document.getElementById('recipeImage');
            if (imageInput) {
                imageInput.addEventListener('change', function (e) {
                    const file = e.target.files[0];
                    if (file) {
                        // Validate file type
                        const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
                        if (!allowedTypes.includes(file.type.toLowerCase())) {
                            showAlert('Dozwolone są tylko pliki obrazów (JPG, PNG, GIF, WebP)', 'danger');
                            imageInput.value = '';
                            return;
                        }

                        // Validate file size (max 5MB)
                        if (file.size > 5 * 1024 * 1024) {
                            showAlert('Plik nie może być większy niż 5MB', 'danger');
                            imageInput.value = '';
                            return;
                        }

                        const reader = new FileReader();
                        reader.onload = function (e) {
                            const preview = document.getElementById('imagePreview');
                            const img = document.getElementById('previewImg');
                            img.src = e.target.result;
                            preview.style.display = 'block';

                            // Update label text
                            const uploadText = document.querySelector('.upload-text');
                            uploadText.textContent = file.name;
                        };
                        reader.readAsDataURL(file);
                    }
                });
            }
        }

        function setupIngredientSearch() {
            const searchInput = document.getElementById('ingredientSearch');
            if (searchInput) {
                searchInput.addEventListener('input', function (e) {
                    const searchTerm = e.target.value.toLowerCase();
                    filterIngredients(searchTerm);
                });
            }
        }

        function setupFormSubmission() {
            const form = document.getElementById('recipeForm');
            if (form) {
                form.addEventListener('submit', function (e) {
                    e.preventDefault();
                    submitRecipe();
                });
            }
        }

        async function loadIngredients() {
            try {
                console.log('Loading ingredients...');
                showAlert('Ładowanie składników...', 'info');

                const response = await fetch('/api/ingredient', {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include'
                });

                console.log('Response status:', response.status);

                if (response.ok) {
                    ingredients = await response.json();
                    console.log('Loaded ingredients:', ingredients);

                    renderIngredients();

                    if (ingredients.length === 0) {
                        showAlert('Brak składników w bazie danych. Dodaj pierwszy składnik używając przycisku "Dodaj nowy składnik".', 'warning');
                    } else {
                        showAlert(`Załadowano ${ingredients.length} składników`, 'success');
                        // Auto-hide success message after 3 seconds
                        setTimeout(() => {
                            const alerts = document.querySelectorAll('.alert-success');
                            alerts.forEach(alert => alert.remove());
                        }, 3000);
                    }
                } else {
                    const errorText = await response.text();
                    console.error('Failed to load ingredients:', response.status, errorText);
                    showAlert(`Błąd podczas ładowania składników: ${response.status}`, 'danger');
                }
            } catch (error) {
                console.error('Error loading ingredients:', error);
                showAlert('Błąd połączenia z serwerem: ' + error.message, 'danger');
            }
        }

        function renderIngredients() {
            const grid = document.getElementById('ingredientsGrid');

            if (ingredients.length === 0) {
                grid.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-state-icon">📦</div>
                        <div>Brak składników w bazie danych</div>
                    </div>
                `;
                return;
            }

            grid.innerHTML = ingredients.map(ingredient => `
                <div class="ingredient-card" data-ingredient-id="${ingredient.id}" onclick="selectIngredient(${ingredient.id})">
                    <div class="ingredient-name">${ingredient.name}</div>
                    <div class="ingredient-nutrition">
                        <span class="nutrition-value">${ingredient.calories} kcal</span>
                        <span class="nutrition-value">B: ${ingredient.protein}g</span>
                        <span class="nutrition-value">W: ${ingredient.carbs}g</span>
                        <span class="nutrition-value">T: ${ingredient.fat}g</span>
                    </div>
                </div>
            `).join('');
        }

        function filterIngredients(searchTerm) {
            const cards = document.querySelectorAll('.ingredient-card');

            cards.forEach(card => {
                const name = card.querySelector('.ingredient-name').textContent.toLowerCase();
                if (name.includes(searchTerm)) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        }

        function selectIngredient(ingredientId) {
            const ingredient = ingredients.find(ing => ing.id === ingredientId);
            if (!ingredient) return;

            // Check if already selected
            if (selectedIngredients.find(sel => sel.id === ingredientId)) {
                showAlert('Ten składnik jest już dodany do przepisu', 'warning');
                return;
            }

            // Add to selected ingredients
            selectedIngredients.push({
                ...ingredient,
                amount: 100 // default amount
            });

            renderSelectedIngredients();
            calculateTotalNutrition();

            showAlert(`Dodano składnik: ${ingredient.name}`, 'success');
            setTimeout(() => {
                const alerts = document.querySelectorAll('.alert-success');
                alerts.forEach(alert => alert.remove());
            }, 2000);
        }

        function renderSelectedIngredients() {
            const container = document.getElementById('selectedIngredientsContainer');

            if (selectedIngredients.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-state-icon">🥄</div>
                        <div>Nie wybrano jeszcze żadnych składników</div>
                    </div>
                `;
                return;
            }

            container.innerHTML = selectedIngredients.map((ingredient, index) => `
                <div class="selected-ingredient-item">
                    <div class="selected-ingredient-info">
                        <div class="selected-ingredient-name">${ingredient.name}</div>
                        <div class="selected-ingredient-nutrition">
                            ${ingredient.calories} kcal | B: ${ingredient.protein}g | W: ${ingredient.carbs}g | T: ${ingredient.fat}g (na 100g)
                        </div>
                    </div>
                    <input
                        type="number"
                        class="amount-input"
                        value="${ingredient.amount}"
                        min="0.1"
                        step="0.1"
                        placeholder="Ilość (g)"
                        onchange="updateIngredientAmount(${index}, this.value)"
                    >
                    <div class="calculated-nutrition">
                        <div>${Math.round((ingredient.calories * ingredient.amount) / 100)} kcal</div>
                        <div>B: ${((ingredient.protein * ingredient.amount) / 100).toFixed(1)}g</div>
                        <div>W: ${((ingredient.carbs * ingredient.amount) / 100).toFixed(1)}g</div>
                        <div>T: ${((ingredient.fat * ingredient.amount) / 100).toFixed(1)}g</div>
                    </div>
                    <button
                        type="button"
                        class="remove-ingredient-btn"
                        onclick="removeSelectedIngredient(${index})"
                        title="Usuń składnik"
                    >
                        🗑️
                    </button>
                </div>
            `).join('');
        }

        function updateIngredientAmount(index, amount) {
            if (selectedIngredients[index]) {
                selectedIngredients[index].amount = parseFloat(amount) || 0;
                renderSelectedIngredients();
                calculateTotalNutrition();
            }
        }

        function removeSelectedIngredient(index) {
            if (selectedIngredients[index]) {
                const ingredient = selectedIngredients[index];
                selectedIngredients.splice(index, 1);
                renderSelectedIngredients();
                calculateTotalNutrition();
                showAlert(`Usunięto składnik: ${ingredient.name}`, 'info');
                setTimeout(() => {
                    const alerts = document.querySelectorAll('.alert-info');
                    alerts.forEach(alert => alert.remove());
                }, 2000);
            }
        }

        function calculateTotalNutrition() {
            if (selectedIngredients.length === 0) {
                document.getElementById('calculatedTotals').style.display = 'none';
                return;
            }

            let totalWeight = 0;
            let totalCalories = 0;
            let totalProtein = 0;
            let totalCarbs = 0;
            let totalFat = 0;

            selectedIngredients.forEach(ingredient => {
                const weight = ingredient.amount || 0;
                totalWeight += weight;

                // Calculate nutrition for actual amount
                totalCalories += (ingredient.calories * weight) / 100;
                totalProtein += (ingredient.protein * weight) / 100;
                totalCarbs += (ingredient.carbs * weight) / 100;
                totalFat += (ingredient.fat * weight) / 100;
            });

            if (totalWeight > 0) {
                // Calculate per 100g values
                const per100g = {
                    calories: Math.round((totalCalories / totalWeight) * 100),
                    protein: Math.round(((totalProtein / totalWeight) * 100) * 10) / 10,
                    carbs: Math.round(((totalCarbs / totalWeight) * 100) * 10) / 10,
                    fat: Math.round(((totalFat / totalWeight) * 100) * 10) / 10
                };

                calculatedNutrition = per100g;

                // Update display
                document.getElementById('totalCalories').textContent = per100g.calories;
                document.getElementById('totalProtein').textContent = per100g.protein;
                document.getElementById('totalCarbs').textContent = per100g.carbs;
                document.getElementById('totalFat').textContent = per100g.fat;

                document.getElementById('calculatedTotals').style.display = 'block';
            } else {
                document.getElementById('calculatedTotals').style.display = 'none';
            }
        }

        function autoFillNutrition() {
            if (calculatedNutrition.calories > 0) {
                document.getElementById('calories').value = calculatedNutrition.calories;
                document.getElementById('protein').value = calculatedNutrition.protein;
                document.getElementById('carbs').value = calculatedNutrition.carbs;
                document.getElementById('fat').value = calculatedNutrition.fat;

                showAlert('Wartości odżywcze zostały wypełnione automatycznie', 'success');
                setTimeout(() => {
                    const alerts = document.querySelectorAll('.alert-success');
                    alerts.forEach(alert => alert.remove());
                }, 3000);
            } else {
                showAlert('Najpierw dodaj składniki do przepisu', 'warning');
            }
        }

        function removeImage() {
            document.getElementById('recipeImage').value = '';
            document.getElementById('imagePreview').style.display = 'none';
            document.querySelector('.upload-text').textContent = 'Wybierz zdjęcie';
        }

        function openIngredientModal() {
            document.getElementById('ingredientModal').classList.add('show');

            // Clear form
            document.getElementById('newIngredientName').value = '';
            document.getElementById('newIngredientCalories').value = '';
            document.getElementById('newIngredientProtein').value = '';
            document.getElementById('newIngredientCarbs').value = '';
            document.getElementById('newIngredientFat').value = '';
            document.getElementById('addToDatabase').checked = true;
        }

        function closeIngredientModal() {
            document.getElementById('ingredientModal').classList.remove('show');
        }

        async function saveNewIngredient() {
            const name = document.getElementById('newIngredientName').value.trim();
            const calories = parseInt(document.getElementById('newIngredientCalories').value);
            const protein = parseFloat(document.getElementById('newIngredientProtein').value);
            const carbs = parseFloat(document.getElementById('newIngredientCarbs').value);
            const fat = parseFloat(document.getElementById('newIngredientFat').value);
            const addToDatabase = document.getElementById('addToDatabase').checked;

            // Validation
            if (!name) {
                showAlert('Nazwa składnika jest wymagana', 'danger');
                return;
            }

            if (isNaN(calories) || calories < 0 || calories > 9999) {
                showAlert('Kalorie muszą być liczbą między 0 a 9999', 'danger');
                return;
            }

            if (isNaN(protein) || protein < 0 || protein > 100) {
                showAlert('Białko musi być liczbą między 0 a 100', 'danger');
                return;
            }

            if (isNaN(carbs) || carbs < 0 || carbs > 100) {
                showAlert('Węglowodany muszą być liczbą między 0 a 100', 'danger');
                return;
            }

            if (isNaN(fat) || fat < 0 || fat > 100) {
                showAlert('Tłuszcze muszą być liczbą między 0 a 100', 'danger');
                return;
            }

            const newIngredient = {
                id: Date.now(), // temporary ID
                name: name,
                calories: calories,
                protein: protein,
                carbs: carbs,
                fat: fat
            };

            if (addToDatabase) {
                try {
                    console.log('Saving new ingredient to database:', newIngredient);

                    const response = await fetch('/api/ingredient', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        credentials: 'include',
                        body: JSON.stringify({
                            Name: name,
                            Calories: calories,
                            Protein: parseFloat(protein.toString().replace(',', '.')),
                            Carbs: parseFloat(carbs.toString().replace(',', '.')),
                            Fat: parseFloat(fat.toString().replace(',', '.'))
                        })
                    });

                    if (response.ok) {
                        const savedIngredient = await response.json();
                        console.log('New ingredient created:', savedIngredient);

                        // Update the ingredient with real ID
                        newIngredient.id = savedIngredient.id;

                        // Add to local ingredients array
                        ingredients.push(newIngredient);

                        // Re-render ingredients
                        renderIngredients();

                        showAlert(`Składnik "${name}" został dodany do bazy danych!`, 'success');
                    } else {
                        const errorText = await response.text();
                        console.error('Error creating ingredient:', response.status, errorText);
                        showAlert('Błąd podczas dodawania składnika do bazy: ' + response.status, 'danger');

                        // Still add locally for this recipe
                        ingredients.push(newIngredient);
                        renderIngredients();
                    }
                } catch (error) {
                    console.error('Error saving ingredient:', error);
                    showAlert('Błąd połączenia z serwerem: ' + error.message, 'danger');

                    // Still add locally for this recipe
                    ingredients.push(newIngredient);
                    renderIngredients();
                }
            } else {
                // Add only locally for this recipe
                ingredients.push(newIngredient);
                renderIngredients();
                showAlert(`Składnik "${name}" został dodany lokalnie do tego przepisu`, 'success');
            }

            closeIngredientModal();
        }

        async function submitRecipe() {
            console.log('=== SUBMITTING RECIPE ===');

            // Show loading state
            const submitBtn = document.querySelector('.submit-btn');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<span class="spinner"></span> Zapisywanie...';
            submitBtn.disabled = true;

            try {
                // Basic validation - używaj ID zamiast name
                const nameElement = document.getElementById('recipeName');
                const caloriesElement = document.getElementById('calories');
                const proteinElement = document.getElementById('protein');
                const carbsElement = document.getElementById('carbs');
                const fatElement = document.getElementById('fat');

                // Sprawdź czy wszystkie wymagane elementy istnieją
                if (!nameElement || !caloriesElement || !proteinElement || !carbsElement || !fatElement) {
                    throw new Error('Nie można znaleźć wszystkich wymaganych pól formularza');
                }

                const name = nameElement.value.trim();
                const calories = caloriesElement.value;
                const protein = proteinElement.value;
                const carbs = carbsElement.value;
                const fat = fatElement.value;

                console.log('Form data:', { name, calories, protein, carbs, fat });

                if (!name) {
                    throw new Error('Nazwa przepisu jest wymagana');
                }

                if (!calories || !protein || !carbs || !fat) {
                    throw new Error('Wszystkie wartości odżywcze są wymagane');
                }

                if (selectedIngredients.length === 0) {
                    if (!confirm('Nie dodano żadnych składników. Czy chcesz kontynuować bez składników?')) {
                        return;
                    }
                }

                // Prepare form data z poprawnymi nazwami dla RecipeDto
                // Serwer oczekuje przecinków (polskie ustawienia)
                const formData = new FormData();
                formData.append('Name', name);
                formData.append('Calories', calories);
                formData.append('Protein', protein.replace('.', ','));
                formData.append('Carbs', carbs.replace('.', ','));
                formData.append('Fat', fat.replace('.', ','));
                formData.append('Instructions', document.getElementById('instructions').value || '');
                formData.append('IsPublic', document.getElementById('isPublicCheckbox').checked);

                // Add image if selected
                const imageFile = document.getElementById('recipeImage').files[0];
                if (imageFile) {
                    console.log('Adding image:', imageFile.name, imageFile.size);
                    formData.append('image', imageFile);  // parametr metody kontrolera
                }

                // Add ingredients JSON
                const ingredientsData = selectedIngredients.map(ingredient => ({
                    IngredientId: ingredient.id,
                    Amount: parseFloat(ingredient.amount) || 100
                }));

                console.log('Ingredients to save:', ingredientsData);
                formData.append('RecipeIngredients', JSON.stringify(ingredientsData));

                // Debug FormData
                console.log('FormData contents:');
                for (let [key, value] of formData.entries()) {
                    console.log(key, ':', value);
                }

                showAlert('Zapisywanie przepisu do bazy danych...', 'info');

                const response = await fetch('/api/recipe', {
                    method: 'POST',
                    body: formData,
                    credentials: 'include'
                });

                console.log('Response status:', response.status);

                if (response.ok) {
                    const newRecipe = await response.json();
                    console.log('Recipe created successfully:', newRecipe);

                    // Immediate redirect with success message
                    showAlert('✅ Przepis został dodany pomyślnie!', 'success');
                    
                    // Wait a short moment for user to see the success message, then redirect
                    setTimeout(() => {
                        console.log('Redirecting to /Diet/Index...');
                        // Use replace() to prevent going back to the form
                        window.location.replace('/Diet/Index');
                    }, 1500);

                } else {
                    // Obsługa błędów walidacji
                    const contentType = response.headers.get('content-type');
                    let errorMessage = `Błąd serwera (${response.status})`;

                    if (contentType && contentType.includes('application/json')) {
                        try {
                            const errorData = await response.json();
                            console.error('Error response JSON:', errorData);

                            // Jeśli to błąd walidacji z ModelState
                            if (errorData.errors) {
                                const errorMessages = [];
                                for (const [field, messages] of Object.entries(errorData.errors)) {
                                    errorMessages.push(`${field}: ${messages.join(', ')}`);
                                }
                                errorMessage = `Błędy walidacji: ${errorMessages.join('; ')}`;
                            } else if (errorData.title) {
                                errorMessage = errorData.title;
                            } else if (errorData.message) {
                                errorMessage = errorData.message;
                            }
                        } catch (parseError) {
                            console.error('Error parsing JSON response:', parseError);
                        }
                    } else {
                        try {
                            const errorText = await response.text();
                            console.error('Error response text:', errorText);
                            if (errorText) {
                                errorMessage = errorText;
                            }
                        } catch (textError) {
                            console.error('Error reading response text:', textError);
                        }
                    }

                    throw new Error(errorMessage);
                }
            } catch (error) {
                console.error('Error submitting recipe:', error);
                showAlert(`❌ Błąd podczas zapisywania przepisu: ${error.message}`, 'danger');
            } finally {
                // Restore button state
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        }

        function showAlert(message, type) {
            const alertsContainer = document.getElementById('alertsContainer');

            // Remove existing alerts of the same type
            const existingAlerts = alertsContainer.querySelectorAll(`.alert-${type}`);
            existingAlerts.forEach(alert => alert.remove());

            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type}`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="alert-close" onclick="this.parentElement.remove()">×</button>
            `;

            alertsContainer.appendChild(alertDiv);

            // Auto remove info alerts after 5 seconds
            if (type === 'info') {
                setTimeout(() => {
                    if (alertDiv.parentElement) {
                        alertDiv.remove();
                    }
                }, 5000);
            }
        }

        // Close modal when clicking outside
        document.addEventListener('click', function (e) {
            const modal = document.getElementById('ingredientModal');
            if (e.target === modal) {
                closeIngredientModal();
            }
        });

        // Close modal with Escape key
        document.addEventListener('keydown', function (e) {
            if (e.key === 'Escape') {
                closeIngredientModal();
            }
        });
    </script>
</body>
</html>