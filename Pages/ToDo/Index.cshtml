@page
@model KontrolaNawykow.Pages.ToDo.IndexModel
@{
    ViewData["Title"] = "ToDo";
    Layout = null;
}<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ToDo - KontrolaNawyków</title>
    <style>
        /* Zachowujemy oryginalny wygląd ToDo */
        /* Reset and base styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f8f9fa;
            min-height: 100vh;
        }

        /* Navigation Header */
        .navigation-header {
            background: linear-gradient(135deg, #e91e63 0%, #ad1457 100%);
            padding: 0;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 100;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .nav-tabs {
            display: flex;
            padding: 0 20px;
        }

        .nav-actions {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 0 20px;
        }

        .nav-tab {
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            padding: 15px 25px;
            font-weight: 600;
            transition: all 0.3s ease;
            border-bottom: 3px solid transparent;
            font-size: 16px;
        }

        .nav-tab:hover {
            color: white;
            background: rgba(255,255,255,0.1);
        }

        .nav-tab.active {
            color: white;
            border-bottom-color: #fff;
            background: rgba(255,255,255,0.15);
        }

        .profile-link {
            color: white;
            text-decoration: none;
            padding: 8px 16px;
            border-radius: 20px;
            background: rgba(255,255,255,0.15);
            font-weight: 600;
            font-size: 14px;
            transition: all 0.3s ease;
            border: 1px solid rgba(255,255,255,0.2);
        }

        .profile-link:hover {
            background: rgba(255,255,255,0.25);
            transform: translateY(-1px);
            color: white;
            text-decoration: none;
        }

        .logout-btn {
            background: rgba(255,255,255,0.1);
            color: white;
            border: 1px solid rgba(255,255,255,0.3);
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .logout-btn:hover {
            background: rgba(255,255,255,0.2);
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        }

        /* Week Navigation */
        .week-nav {
            background: white;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .week-arrow {
            background: #e91e63;
            color: white;
            border: none;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            font-size: 1.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .week-arrow:hover {
            background: #c2185b;
            transform: scale(1.1);
        }

        .week-date {
            font-size: 1.2rem;
            font-weight: 600;
            color: #333;
            min-width: 150px;
            text-align: center;
        }

        /* Days Grid */
        .days-container {
            padding: 20px;
        }

        .days-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 20px;
            max-width: 1400px;
            margin: 0 auto;
        }

        .day-card {
            background: white;
            border-radius: 10px;
            padding: 20px 15px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            min-height: 400px;
            border: 1px solid #e0e0e0;
        }

        .day-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        }

        .day-card.today {
            background: linear-gradient(135deg, rgba(233, 30, 99, 0.1), rgba(173, 20, 87, 0.05));
            border-color: #e91e63;
        }

        .day-header {
            text-align: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f0f0f0;
        }

        .day-name {
            font-size: 1.1rem;
            font-weight: 700;
            color: #333;
            margin-bottom: 5px;
        }

        .day-date {
            font-size: 0.9rem;
            color: #666;
        }

        .day-content {
            display: flex;
            flex-direction: column;
            height: calc(100% - 80px);
        }

        .add-task-btn {
            background: #e91e63;
            color: white;
            border: none;
            padding: 12px 15px;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 15px;
            font-size: 0.9rem;
        }

        .add-task-btn:hover {
            background: #c2185b;
            transform: translateY(-1px);
        }

        .tasks-list {
            flex: 1;
            overflow-y: auto;
        }

        .task-item {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 10px;
            transition: all 0.3s ease;
            border: 1px solid #e9ecef;
        }

        .task-item:hover {
            background: #e9ecef;
        }

        .task-checkbox {
            width: 20px;
            height: 20px;
            border-radius: 4px;
            border: 2px solid #e91e63;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }

        .task-checkbox.completed {
            background: #e91e63;
        }

        .task-checkbox.completed::after {
            content: '✓';
            color: white;
            font-size: 12px;
            font-weight: bold;
        }

        .task-text {
            flex: 1;
            font-size: 0.9rem;
            color: #333;
            font-weight: 500;
        }

        .task-text.completed {
            text-decoration: line-through;
            color: #888;
        }

        .task-delete {
            background: #dc3545;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 0.8rem;
            width: 24px;
            height: 24px;
            border-radius: 4px;
            opacity: 0;
            transition: all 0.3s ease;
        }

        .task-item:hover .task-delete {
            opacity: 1;
        }

        .task-delete:hover {
            background: #c82333;
        }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
            backdrop-filter: blur(5px);
        }

        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            border-radius: 15px;
            padding: 30px;
            max-width: 600px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }

        .modal-header {
            text-align: center;
            margin-bottom: 25px;
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 5px;
        }

        .modal-subtitle {
            color: #666;
            font-size: 0.9rem;
        }

        .modal-tabs {
            display: flex;
            margin-bottom: 25px;
            border-bottom: 2px solid #f0f0f0;
        }

        .modal-tab {
            flex: 1;
            padding: 12px 20px;
            background: none;
            border: none;
            cursor: pointer;
            font-weight: 600;
            color: #666;
            transition: all 0.3s ease;
            border-bottom: 3px solid transparent;
        }

        .modal-tab.active {
            color: #e91e63;
            border-bottom-color: #e91e63;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
        }

        .form-input {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .form-input:focus {
            border-color: #e91e63;
            outline: none;
            box-shadow: 0 0 0 3px rgba(233, 30, 99, 0.1);
        }

        .form-checkbox {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 15px;
        }

        .checkbox-input {
            width: 18px;
            height: 18px;
            accent-color: #e91e63;
        }

        .saved-activities-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 12px;
            margin-bottom: 20px;
        }

        .saved-activity-btn {
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            padding: 15px 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            font-weight: 500;
            color: #333;
        }

        .saved-activity-btn:hover {
            background: #e91e63;
            color: white;
            border-color: #e91e63;
        }

        .saved-activity-btn.selected {
            background: #e91e63;
            color: white;
            border-color: #e91e63;
        }

        .modal-actions {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-top: 25px;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1rem;
        }

        .btn-primary {
            background: #e91e63;
            color: white;
        }

        .btn-primary:hover {
            background: #c2185b;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #5a6268;
        }

        .delete-saved-btn {
            background: #dc3545;
            color: white;
            border: none;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.7rem;
            cursor: pointer;
            margin-top: 5px;
            opacity: 0;
            transition: all 0.3s ease;
        }

        .saved-activity-btn:hover .delete-saved-btn {
            opacity: 1;
        }

        .delete-saved-btn:hover {
            background: #c82333;
        }

        /* Responsive Design */
        @@media (max-width: 1200px) {
            .days-grid {
                grid-template-columns: repeat(4, 1fr);
            }
        }

        @@media (max-width: 768px) {
            .navigation-header {
                flex-direction: column;
                padding: 10px 0;
            }

            .nav-tabs {
                flex-wrap: wrap;
                padding: 0 10px;
                justify-content: center;
            }

            .nav-actions {
                padding: 10px 20px 0;
                justify-content: center;
            }

            .nav-tab {
                padding: 12px 15px;
                font-size: 14px;
            }

            .days-container {
                padding: 15px 10px;
            }

            .days-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 15px;
            }

            .week-nav {
                padding: 15px;
                gap: 15px;
            }

            .week-arrow {
                width: 40px;
                height: 40px;
                font-size: 1.2rem;
            }

            .week-date {
                font-size: 1rem;
                min-width: 120px;
            }

            .saved-activities-grid {
                grid-template-columns: 1fr;
            }

            .modal-tabs {
                flex-direction: column;
            }
        }

        @@media (max-width: 480px) {
            .days-grid {
                grid-template-columns: 1fr;
            }

            .nav-tabs {
                flex-direction: column;
                align-items: center;
            }

            .nav-actions {
                flex-direction: column;
                gap: 10px;
            }

            .modal-content {
                padding: 20px;
                margin: 15px;
            }

            .modal-actions {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <!-- Navigation Header -->
    <div class="navigation-header">
        <div class="nav-tabs">
            <a href="/Diet" class="nav-tab">Dieta</a>
            <a href="/ToDo" class="nav-tab active">ToDo</a>
            <a href="/Admin" class="nav-tab">Admin</a>
            <a href="/YourDietician/Index" class="nav-tab">Twój dietetyk</a>
            <a href="/Fridge/Index" class="nav-tab">Lodówka</a>
        </div>
        <div class="nav-actions">
            <a href="/Profile/Index" class="profile-link">👤 Mój profil</a>
            <form method="post" action="/Account/Logout" style="display: inline;">
                <button type="submit" class="logout-btn">🚪 Wyloguj</button>
            </form>
        </div>
    </div>

    <!-- Week Navigation -->
    <div class="week-nav">
        <button class="week-arrow" onclick="changeWeek(-1)">❮</button>
        <div class="week-date" id="weekDisplay">16.06 - 22.06</div>
        <button class="week-arrow" onclick="changeWeek(1)">❯</button>
    </div>

    <!-- Days Grid -->
    <div class="days-container">
        <div class="days-grid" id="daysGrid">
            <!-- Days will be generated by JavaScript -->
        </div>
    </div>

    <!-- Add Task Modal -->
    <div class="modal" id="taskModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Dodaj Nowe Zadanie</h2>
                <p class="modal-subtitle" id="modalDate"></p>
            </div>

            <!-- Modal Tabs -->
            <div class="modal-tabs">
                <button class="modal-tab active" onclick="switchTab('manual')">✍️ Napisz własne</button>
                <button class="modal-tab" onclick="switchTab('saved')">💾 Zapisane aktywności</button>
            </div>

            <!-- Manual Tab -->
            <div class="tab-content active" id="manualTab">
                <form id="taskForm">
                    <div class="form-group">
                        <label class="form-label">Nazwa zadania:</label>
                        <input type="text" class="form-input" id="taskInput" placeholder="Wpisz nazwę zadania..." required>
                    </div>
                    <div class="form-checkbox">
                        <input type="checkbox" class="checkbox-input" id="saveAsTemplate">
                        <label for="saveAsTemplate">Zapisz jako szablon do przyszłego użycia</label>
                    </div>
                </form>
            </div>

            <!-- Saved Activities Tab -->
            <div class="tab-content" id="savedTab">
                <div class="saved-activities-grid" id="savedActivitiesGrid">
                    <!-- Saved activities will be loaded here -->
                </div>
            </div>

            <div class="modal-actions">
                <button type="button" class="btn btn-primary" onclick="addTask()">✅ Dodaj zadanie</button>
                <button type="button" class="btn btn-secondary" onclick="closeModal()">❌ Anuluj</button>
            </div>
        </div>
    </div>

    <script>
        // Sample data
        let currentWeekStart = new Date();
        currentWeekStart.setDate(currentWeekStart.getDate() - currentWeekStart.getDay() + 1); // Monday

        let tasks = {
            '2024-06-19': [
                { id: 1, text: 'Wypicie 2L wody', completed: true },
                { id: 2, text: 'Spacer 30 min', completed: false }
            ]
        };

        let savedActivities = [
            { id: 1, name: "🚶 Spacer 30 min" },
            { id: 2, name: "💧 Wypicie 2L wody" },
            { id: 3, name: "🧘 Medytacja 10 min" },
            { id: 4, name: "📚 Czytanie 20 min" },
            { id: 5, name: "🏃 Bieganie 20 min" },
            { id: 6, name: "🥗 Zdrowy posiłek" },
            { id: 7, name: "💤 8h snu" },
            { id: 8, name: "🧽 Sprzątanie" }
        ];

        const dayNames = ['Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota', 'Niedziela'];
        let currentTaskDate = null;
        let selectedSavedActivity = null;
        let currentTab = 'manual';

        function generateDaysGrid() {
            const daysGrid = document.getElementById('daysGrid');
            daysGrid.innerHTML = '';
            
            const today = new Date();
            
            for (let i = 0; i < 7; i++) {
                const date = new Date(currentWeekStart);
                date.setDate(currentWeekStart.getDate() + i);
                
                const dayCard = document.createElement('div');
                dayCard.className = 'day-card';
                
                if (date.toDateString() === today.toDateString()) {
                    dayCard.classList.add('today');
                }
                
                const dateStr = date.toISOString().split('T')[0];
                
                dayCard.innerHTML = `
                    <div class="day-header">
                        <div class="day-name">${dayNames[i]}</div>
                        <div class="day-date">${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}</div>
                    </div>
                    <div class="day-content">
                        <button class="add-task-btn" onclick="openTaskModal('${dateStr}')">+ Dodaj aktywność</button>
                        <div class="tasks-list" id="tasks-${dateStr}">
                            ${renderTasks(dateStr)}
                        </div>
                    </div>
                `;
                
                daysGrid.appendChild(dayCard);
            }
        }

        function renderTasks(dateStr) {
            const dayTasks = tasks[dateStr] || [];
            return dayTasks.map(task => `
                <div class="task-item">
                    <div class="task-checkbox ${task.completed ? 'completed' : ''}" 
                         onclick="toggleTask('${dateStr}', ${task.id})"></div>
                    <div class="task-text ${task.completed ? 'completed' : ''}">${task.text}</div>
                    <button class="task-delete" onclick="deleteTask('${dateStr}', ${task.id})">🗑️</button>
                </div>
            `).join('');
        }

        function renderSavedActivities() {
            const savedGrid = document.getElementById('savedActivitiesGrid');
            savedGrid.innerHTML = savedActivities.map(activity => `
                <div class="saved-activity-btn" onclick="selectSavedActivity(${activity.id}, '${activity.name}')" data-id="${activity.id}">
                    ${activity.name}
                    <button class="delete-saved-btn" onclick="event.stopPropagation(); deleteSavedActivity(${activity.id})">🗑️</button>
                </div>
            `).join('');
        }

        function updateWeekDisplay() {
            const endDate = new Date(currentWeekStart);
            endDate.setDate(currentWeekStart.getDate() + 6);
            
            const startStr = `${currentWeekStart.getDate().toString().padStart(2, '0')}.${(currentWeekStart.getMonth() + 1).toString().padStart(2, '0')}`;
            const endStr = `${endDate.getDate().toString().padStart(2, '0')}.${(endDate.getMonth() + 1).toString().padStart(2, '0')}`;
            
            document.getElementById('weekDisplay').textContent = `${startStr} - ${endStr}`;
        }

        function changeWeek(direction) {
            currentWeekStart.setDate(currentWeekStart.getDate() + (direction * 7));
            updateWeekDisplay();
            generateDaysGrid();
        }

        function openTaskModal(dateStr) {
            currentTaskDate = dateStr;
            const date = new Date(dateStr);
            const dayName = dayNames[date.getDay() === 0 ? 6 : date.getDay() - 1];
            const dateDisplay = `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}`;
            document.getElementById('modalDate').textContent = `${dayName}, ${dateDisplay}`;
            document.getElementById('taskModal').classList.add('show');
            document.getElementById('taskInput').focus();
            renderSavedActivities();
        }

        function closeModal() {
            document.getElementById('taskModal').classList.remove('show');
            document.getElementById('taskForm').reset();
            currentTaskDate = null;
            selectedSavedActivity = null;
            switchTab('manual');
            
            // Clear selected state
            document.querySelectorAll('.saved-activity-btn').forEach(btn => {
                btn.classList.remove('selected');
            });
        }

        function switchTab(tabName) {
            currentTab = tabName;
            
            // Update tab buttons
            document.querySelectorAll('.modal-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelector(`.modal-tab:nth-child(${tabName === 'manual' ? '1' : '2'})`).classList.add('active');
            
            // Update tab content
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            document.getElementById(tabName === 'manual' ? 'manualTab' : 'savedTab').classList.add('active');
            
            // Reset selections
            selectedSavedActivity = null;
            document.querySelectorAll('.saved-activity-btn').forEach(btn => {
                btn.classList.remove('selected');
            });
        }

        function selectSavedActivity(id, name) {
            selectedSavedActivity = { id, name };
            
            // Update visual selection
            document.querySelectorAll('.saved-activity-btn').forEach(btn => {
                btn.classList.remove('selected');
            });
            document.querySelector(`[data-id="${id}"]`).classList.add('selected');
        }

        function addTask() {
            if (!currentTaskDate) return;
            
            let taskText = '';
            let saveAsTemplate = false;
            
            if (currentTab === 'manual') {
                taskText = document.getElementById('taskInput').value.trim();
                saveAsTemplate = document.getElementById('saveAsTemplate').checked;
                
                if (!taskText) {
                    alert('Proszę wpisać nazwę zadania');
                    return;
                }
            } else {
                if (!selectedSavedActivity) {
                    alert('Proszę wybrać aktywność');
                    return;
                }
                taskText = selectedSavedActivity.name;
            }
            
            // Add to tasks
            if (!tasks[currentTaskDate]) {
                tasks[currentTaskDate] = [];
            }
            
            const newTask = {
                id: Date.now(),
                text: taskText,
                completed: false
            };
            
            tasks[currentTaskDate].push(newTask);
            
            // Save as template if requested
            if (saveAsTemplate && currentTab === 'manual') {
                const newActivity = {
                    id: Date.now() + 1,
                    name: taskText
                };
                savedActivities.push(newActivity);
            }
            
            // Refresh the specific day's tasks
            const tasksContainer = document.getElementById(`tasks-${currentTaskDate}`);
            if (tasksContainer) {
                tasksContainer.innerHTML = renderTasks(currentTaskDate);
            }
            
            closeModal();
        }

        function toggleTask(dateStr, taskId) {
            if (tasks[dateStr]) {
                const task = tasks[dateStr].find(t => t.id === taskId);
                if (task) {
                    task.completed = !task.completed;
                    document.getElementById(`tasks-${dateStr}`).innerHTML = renderTasks(dateStr);
                }
            }
        }

        function deleteTask(dateStr, taskId) {
            if (tasks[dateStr]) {
                tasks[dateStr] = tasks[dateStr].filter(t => t.id !== taskId);
                document.getElementById(`tasks-${dateStr}`).innerHTML = renderTasks(dateStr);
            }
        }

        function deleteSavedActivity(activityId) {
            savedActivities = savedActivities.filter(a => a.id !== activityId);
            renderSavedActivities();
        }

        // Close modal when clicking outside
        document.getElementById('taskModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });

        // Initialize
        updateWeekDisplay();
        generateDaysGrid();
    </script>
</body>
</html>