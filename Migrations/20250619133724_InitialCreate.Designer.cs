// <auto-generated />
using System;
using KontrolaNawykow.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KontrolaNawykow.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250619133724_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("KontrolaNawykow.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("UzytkownikId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UzytkownikId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.Blokada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdminId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DataKonca")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataPoczatku")
                        .HasColumnType("TEXT");

                    b.Property<string>("Powod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UzytkownikId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("UzytkownikId");

                    b.ToTable("Blokady");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.CustomFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Calories")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Carbs")
                        .HasColumnType("REAL");

                    b.Property<float>("Fat")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Protein")
                        .HasColumnType("REAL");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CustomFoods");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.Dietetyk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Specjalizacja")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Zdjecie")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("Dietetycy");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.DietetykRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("DietetykId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("DietetykId", "UserId")
                        .IsUnique();

                    b.ToTable("DietetykRatings");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Calories")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Carbs")
                        .HasColumnType("REAL");

                    b.Property<float>("Fat")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Protein")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.ListaZakupow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlanPosilkowId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlanPosilkowId");

                    b.ToTable("ListyZakupow");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.MealPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomEntry")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Eaten")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("Gramature")
                        .HasColumnType("REAL");

                    b.Property<int>("MealType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("MealPlans");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.Nawyk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Cykliczny")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataUtworzenia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Wykonany")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Nawyki");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.NawykWPlanie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Dzien")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NawykId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UzytkownikId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NawykId");

                    b.HasIndex("UzytkownikId");

                    b.ToTable("NawykiWPlanie");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.PlanPosilkowPrzepis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlanPosilkowId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrzepisId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlanPosilkowId");

                    b.HasIndex("PrzepisId");

                    b.ToTable("PlanPosilkowPrzepisy");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Calories")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Carbs")
                        .HasColumnType("REAL");

                    b.Property<float>("Fat")
                        .HasColumnType("REAL");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Protein")
                        .HasColumnType("REAL");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.RecipeIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float?>("Amount")
                        .HasColumnType("REAL");

                    b.Property<int>("IngredientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeIngredients");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.RecipeRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("RecipeId", "UserId")
                        .IsUnique();

                    b.ToTable("RecipeRatings");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.ShoppingList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Amount")
                        .HasColumnType("REAL");

                    b.Property<int>("IngredientId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingLists");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.Statystyki", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<int>("DniDiety")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UzytkownikId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Waga")
                        .HasColumnType("REAL");

                    b.Property<double>("ZmianaWagi")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("UzytkownikId");

                    b.ToTable("Statystyki");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.ToDo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Task")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ToDos");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AktywnoscFizyczna")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Cel")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<double?>("CustomBmi")
                        .HasColumnType("REAL");

                    b.Property<int?>("CustomCaloriesDeficit")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomCarbsGrams")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomFatGrams")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomProteinGrams")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DietetykId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DieticianAccepted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Plec")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RodzajPracy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double?>("Waga")
                        .HasColumnType("REAL");

                    b.Property<int?>("Wiek")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Wzrost")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("DietetykId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.Zgloszenie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int?>("IdBlokady")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdZglaszajacego")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IdZglaszanego")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Powod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Typ")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdBlokady");

                    b.HasIndex("IdZglaszajacego");

                    b.HasIndex("IdZglaszanego");

                    b.ToTable("Zgloszenia");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.Admin", b =>
                {
                    b.HasOne("KontrolaNawykow.Models.User", "Uzytkownik")
                        .WithOne("Admin")
                        .HasForeignKey("KontrolaNawykow.Models.Admin", "UzytkownikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uzytkownik");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.Blokada", b =>
                {
                    b.HasOne("KontrolaNawykow.Models.Admin", "Admin")
                        .WithMany("Blokady")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KontrolaNawykow.Models.User", "Uzytkownik")
                        .WithMany()
                        .HasForeignKey("UzytkownikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Uzytkownik");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.CustomFood", b =>
                {
                    b.HasOne("KontrolaNawykow.Models.User", "User")
                        .WithMany("CustomFoods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.DietetykRating", b =>
                {
                    b.HasOne("KontrolaNawykow.Models.Dietetyk", "Dietetyk")
                        .WithMany("Ratings")
                        .HasForeignKey("DietetykId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KontrolaNawykow.Models.User", "User")
                        .WithMany("DietetykRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dietetyk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.ListaZakupow", b =>
                {
                    b.HasOne("KontrolaNawykow.Models.MealPlan", "PlanPosilkow")
                        .WithMany("ListaZakupow")
                        .HasForeignKey("PlanPosilkowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanPosilkow");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.MealPlan", b =>
                {
                    b.HasOne("KontrolaNawykow.Models.Recipe", "Recipe")
                        .WithMany("MealPlans")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KontrolaNawykow.Models.User", "User")
                        .WithMany("MealPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.NawykWPlanie", b =>
                {
                    b.HasOne("KontrolaNawykow.Models.Nawyk", "Nawyk")
                        .WithMany("NawykiWPlanie")
                        .HasForeignKey("NawykId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KontrolaNawykow.Models.User", "Uzytkownik")
                        .WithMany("NawykiWPlanie")
                        .HasForeignKey("UzytkownikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nawyk");

                    b.Navigation("Uzytkownik");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.PlanPosilkowPrzepis", b =>
                {
                    b.HasOne("KontrolaNawykow.Models.MealPlan", "PlanPosilkow")
                        .WithMany("PlanPosilkowPrzepisy")
                        .HasForeignKey("PlanPosilkowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KontrolaNawykow.Models.Recipe", "Przepis")
                        .WithMany("PlanPosilkowPrzepisy")
                        .HasForeignKey("PrzepisId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlanPosilkow");

                    b.Navigation("Przepis");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.Recipe", b =>
                {
                    b.HasOne("KontrolaNawykow.Models.User", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.RecipeIngredient", b =>
                {
                    b.HasOne("KontrolaNawykow.Models.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KontrolaNawykow.Models.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.RecipeRating", b =>
                {
                    b.HasOne("KontrolaNawykow.Models.Recipe", "Recipe")
                        .WithMany("Ratings")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KontrolaNawykow.Models.User", "User")
                        .WithMany("RecipeRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.ShoppingList", b =>
                {
                    b.HasOne("KontrolaNawykow.Models.Ingredient", "Ingredient")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KontrolaNawykow.Models.User", "User")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.Statystyki", b =>
                {
                    b.HasOne("KontrolaNawykow.Models.User", "Uzytkownik")
                        .WithMany("Statystyki")
                        .HasForeignKey("UzytkownikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uzytkownik");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.ToDo", b =>
                {
                    b.HasOne("KontrolaNawykow.Models.User", "User")
                        .WithMany("ToDos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.User", b =>
                {
                    b.HasOne("KontrolaNawykow.Models.Dietetyk", "Dietetyk")
                        .WithMany("Users")
                        .HasForeignKey("DietetykId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Dietetyk");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.Zgloszenie", b =>
                {
                    b.HasOne("KontrolaNawykow.Models.Blokada", "Blokada")
                        .WithMany("Zgloszenia")
                        .HasForeignKey("IdBlokady")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KontrolaNawykow.Models.User", "Zglaszajacy")
                        .WithMany()
                        .HasForeignKey("IdZglaszajacego")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KontrolaNawykow.Models.User", "Zglaszany")
                        .WithMany()
                        .HasForeignKey("IdZglaszanego")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Blokada");

                    b.Navigation("Zglaszajacy");

                    b.Navigation("Zglaszany");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.Admin", b =>
                {
                    b.Navigation("Blokady");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.Blokada", b =>
                {
                    b.Navigation("Zgloszenia");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.Dietetyk", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.Ingredient", b =>
                {
                    b.Navigation("RecipeIngredients");

                    b.Navigation("ShoppingLists");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.MealPlan", b =>
                {
                    b.Navigation("ListaZakupow");

                    b.Navigation("PlanPosilkowPrzepisy");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.Nawyk", b =>
                {
                    b.Navigation("NawykiWPlanie");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.Recipe", b =>
                {
                    b.Navigation("MealPlans");

                    b.Navigation("PlanPosilkowPrzepisy");

                    b.Navigation("Ratings");

                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("KontrolaNawykow.Models.User", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("CustomFoods");

                    b.Navigation("DietetykRatings");

                    b.Navigation("MealPlans");

                    b.Navigation("NawykiWPlanie");

                    b.Navigation("RecipeRatings");

                    b.Navigation("Recipes");

                    b.Navigation("ShoppingLists");

                    b.Navigation("Statystyki");

                    b.Navigation("ToDos");
                });
#pragma warning restore 612, 618
        }
    }
}
